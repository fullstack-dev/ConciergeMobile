//Autogenerated content, DO EDIT EDIT!
//Generated on: 11/19/2016 3:38:58 PM
//Generated from assembly ColonyConcierge.API.dll
//Assembly version: 1.0.6165.22974
var EndPoints = {
		 'APIVersion' : '1.0.6165.22974',
		 'APIDate' : '11/17/2016 12:45:48 PM',
		/// Gets an account structure for the given account id
		'IAccountsGetAccount' : '/accounts/{account_id}',

		/// Updates an existing account with Account new account data
		'IAccountsSetAccount' : '/accounts/',

		/// Gets a list of all users for this account
		'IAccountsGetUsers' : '/accounts/{account_id}/users',

		/// Gets a list of all users for this account
		'IAccountsGetUserIds' : '/accounts/{account_id}/users/ids',

		/// Get
		'IAccountsGetPendingUsers' : '/accounts/{account_id}/pending_users',

		/// Get
		'IAccountsGetPendingUserIds' : '/accounts/{account_id}/pending_users/ids',

		/// Adds a new user *with* a new main account to go along with it.
		'IAccountsRegisterNewAccount' : '/accounts/',

		/// Causes a new verification email to be sent to the specified username or email address
		'IAccountsResendVerificationEmail' : '/accounts/send_verification/{username_or_email}',

		/// Deletes the account with the test user ID. Note this function is not for production, it will only work on test accounts invoked form a logged in test account
		'IAccountsDeleteAccount' : '/accounts/{account_id}',

		/// Requests Account cancelation. This does not take effect until the current subscription has expired.
		'IAccountsRequestAccountCancelation' : '/accounts/{account_id}/cancel_account',

		/// Queries if this account has been marked for cancelation as the end of the billing cycle
		'IAccountsGetIsAccountCancelationPending' : '/accounts/{account_id}/cancel_account',

		/// Requests Account  plan change. If transitioning from an unpaid to a paid subscription, the effect is immediate. Otherwise, the change will take effect when the currentl plan expires. If there are any existing pending changes they will be superseded
		'IAccountsRequestPlanChange' : '/accounts/{account_id}/pending_plan_id',

		/// Queries if this account has been marked for plan change at the end of the plan expiration
		'IAccountsGetIsPlanChangePending' : '/accounts/{account_id}/pending_plan_id',

		/// Gets a list of invoice IDs for this account
		'IAccountsGetInvoiceIds' : '/accounts/{account_id}/invoices/ids',

		/// Gets a invoice by ID for this account
		'IAccountsGetInvoice' : '/accounts/{account_id}/invoices/{invoice_id}',

		'IAccountsGetPaymentIds' : '/accounts/{account_id}/payments/ids',

		'IAccountsGetPayments' : '/accounts/{account_id}/payments',

		'IAccountsGetPayment' : '/accounts/{account_id}/payments/{payment_id}',

		'IAccountsGetPaymentNotes' : '/accounts/{account_id}/payments/{payment_id}/notes',

		'IAccountsGetPaymentNoteIds' : '/accounts/{account_id}/payments/{payment_id}/notes/ids',

		'IAccountsGetPaymentNote' : '/accounts/payments/{payment_id}/notes/{note_id}',

		'IAccountsAddPaymentNote' : '/accounts/payments/{payment_id}/notes',

		'IAccountsSetPaymentNote' : '/accounts/payments/{payment_id}/notes/{note_id}',

		'IAccountsDeletePaymentNote' : '/accounts/payments/{payment_id}/notes/{note_id}',

		'IAccountsGetPaymentAdminNotes' : '/accounts/{account_id}/payments/{payment_id}/admin_notes',

		'IAccountsGetPaymentAdminNoteIds' : '/accounts/{account_id}/payments/{payment_id}/admin_notes/ids',

		'IAccountsGetPaymentAdminNote' : '/accounts/payments/{payment_id}/admin_notes/{note_id}',

		'IAccountsAddPaymentAdminNote' : '/accounts/payments/{payment_id}/admin_notes',

		'IAccountsSetPaymentAdminNote' : '/accounts/payments/{payment_id}/admin_notes/{note_id}',

		'IAccountsDeletePaymentAdminNote' : '/accounts/payments/{payment_id}/admin_notes/{note_id}',

		/// Gets a list of service address IDs for this account
		'IAccountsGetServiceAddressIDs' : '/accounts/{account_id}/addresses/ids',

		/// Gets a list of service addresses for this account
		'IAccountsGetServiceAddresses' : '/accounts/{account_id}/addresses',

		/// Gets a service address by ID for this account
		'IAccountsGetServiceAddress' : '/accounts/{account_id}/addresses/{address_id}',

		/// Adds a service address, returns an ID
		'IAccountsAddServiceAddress' : '/accounts/{account_id}/addresses',

		/// Updates a service address by ID for this account
		'IAccountsSetServiceAddress' : '/accounts/{account_id}/addresses/{address_id}',

		/// Deletes a service address by ID for this account (will fail if this is the only service address for the account)
		'IAccountsDeleteServiceAddress' : '/accounts/{account_id}/addresses/{address_id}',

		/// Gets the default shopping preferences for this account
		'IAccountsGetShoppingPreference' : '/accounts/{account_id}/shopping_preference',

		/// Sets the default shopping preferences for this account
		'IAccountsSetShoppingPreference' : '/accounts/{account_id}/shopping_preference',

		/// Gets a list of payment method IDs this account
		'IAccountsGetPaymentMethodIDs' : '/accounts/{account_id}/payment_methods/ids',

		'IAccountsGetPaymentMethods' : '/accounts/{account_id}/payment_methods',

		/// Adds a new payment method to this account, and returns the ID
		'IAccountsAddPaymentMethod' : '/accounts/{account_id}/payment_methods',

		/// Gets a payment method object by ID
		'IAccountsGetPaymentMethod' : '/accounts/{account_id}/payment_methods/{payment_method_id}',

		/// Gets a payment method object by ID, providing a more detailed version.
		/// This API must delegate data lookup to the Credit Card Gateways, so only use this API when you really need the extra data. It will be much slower.
		'IAccountsGetPaymentMethodForEditing' : '/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit',

		/// Updates an existing payment method.
		/// Only certain operations are permitted. You cannot alter the payment method to a completely new type of payment method, you cannot change
		/// account numbers.
		'IAccountsUpdatePaymentMethod' : '/accounts/{account_id}/payment_methods/{payment_method_id}',

		/// 'Deletes' a payment method. The payment data is not actually deleted, but marked a inactive.
		'IAccountsDeletePaymentMethod' : '/accounts/{account_id}/payment_methods/{payment_method_id}',

		/// Gets the amount of service fee credit remaining
		'IAccountsGetServiceCreditRemaining' : '/accounts/{account_id}/service_credit',

		/// Gets a list of account IDs
		'IAdminGetAccountIds' : '/admin/accounts',

		/// Gets a list of account history IDs associated with the account
		'IAdminGetAccountHistoryIDs' : '/admin/accounts/{account_id}/history/ids',

		/// Gets a list of account history items associated with the account
		'IAdminGetAccountHistory' : '/admin/accounts/{account_id}/history',

		/// Gets an account history item associated with the account
		'IAdminGetAccountHistoryEntry' : '/admin/accounts/{account_id}/history/{history_id}',

		/// Creates a custom invoice on this account
		'IAdminCreateCustomInvoice' : '/admin/accounts/{account_id}/invoices',

		/// Adds a new invoice line item entry to this invoice
		'IAdminAddInvoiceLineItem' : '/admin/invoices/{invoice_id}/items',

		/// Removes an invoice line item entry from this invoice
		'IAdminRemoveInvoiceLineItem' : '/admin/invoices/{invoice_id}/items/{line_item_id}',

		/// Updates an existing invoice line item entry from in this invoice
		'IAdminUpdateInvoiceLineItem' : '/admin/invoices/{invoice_id}/items/{line_item_id}',

		/// Gets a list of scheduled Services matching the criteria
		'IAdminGetScheduledServices' : '/admin/scheduled_services',

		/// Gets a list of scheduled service objects for a given list of IDs
		'IAdminGetScheduledServicesByIDs' : '/admin/scheduled_services/by_id',

		/// Gets the status of the scheduled service.
		'IAdminGetScheduledServiceStatus' : '/admin/scheduled_services/{scheduled_service_id}/status',

		/// Causes an invoice to be computed for the specified Scheduled Service. Returns an invoice ID
		'IAdminComputeInvoice' : '/admin/scheduled_services/{scheduled_service_id}/compute_invoice',

		/// Gets the charges for the scheduled service.
		'IAdminGetSchedueledServiceCharges' : '/admin/scheduled_services/{scheduled_service_id}/charges',

		/// Sets the charge for the scheduled service.
		'IAdminSetSchedueledServiceCharges' : '/admin/scheduled_services/{scheduled_service_id}/charges',

		/// Causes a charge for the invoice, and returns a payment id
		'IAdminChargeInvoice' : '/admin/invoices/{invoice_id}/payment/{payment_method_id}',

		/// Gets a list of all users ids in the system.
		'IAdminGetUserIds' : '/admin/users/ids',

		/// Gets a list of all users in the system.
		'IAdminGetUsers' : '/admin/users',

		/// Creates a new user with an account, typically for non-consumer purposes, such as for managers, employees, or contractors
		'IAdminCreateUser' : '/admin/users',

		/// Gets a list of stores associated with a service definition. Only shopping services can have stores associated with them.
		'IAdminGetStores' : '/admin/stores/by_service/{service_id}',

		/// Gets a list of all user roles in the system.
		'IAdminGetRolls' : '/admin/roles',

		/// Adds a new store to the specified service, returning the ID of the new store. The service must be a shopping service.
		'IAdminAddStore' : '/admin/stores/by_service/{service_id}',

		/// Adds a new store to the specified service, returning the ID of the new store
		'IAdminUpdateStore' : '/admin/stores/by_service/{service_id}/{store_id}',

		/// Gets a shopping store associated with the specified service.
		'IAdminGetStore' : '/admin/stores/by_service/{service_id}/{store_id}',

		/// Gets a service's weekly filter setting
		'IAdminGetServiceCalendarWeeklyFilter' : '/admin/services/{service_id}/calendar/weekly_filter',

		/// Sets a service's weekly filter setting
		'IAdminSetServiceCalendarWeeklyFilter' : '/admin/services/{service_id}/calendar/weekly_filter',

		/// Gets a list of ServiceHolidayDateObjects for the specified range.
		'IAdminGetServiceHolidayDates' : '/admin/services/{service_id}/calendar/holidays/search',

		/// Gets a ServiceHolidayDateObjects for the specified date, or null if none exist for the service on that day.
		'IAdminGetServiceHolidayByDate' : '/admin/services/{service_id}/calendar/holidays/on_date/{date}',

		/// Gets a ServiceHolidayDateObjects by id
		'IAdminGetServiceHoliday' : '/admin/services/{service_id}/calendar/holidays/{holiday_id}',

		/// Sets a service holiday for a given date on a service. If there is already a holiday for that date, it will be overridden.
		'IAdminSetServiceHolidayDate' : '/admin/services/{service_id}/calendar/holidays',

		/// Deletes a service holiday.
		'IAdminDeleteServiceHolidayDate' : '/admin/services/{service_id}/calendar/holidays/{holiday_id}',

		/// Gets a news item
		'IAdminGetNewsItem' : '/admin/news/{item_id}',

		/// Adds a new news item
		'IAdminAddNewsItem' : '/admin/news',

		/// Updates an existing news item
		'IAdminUpdateNewsItem' : '/admin/news/{item_id}',

		/// Deletes a news item
		'IAdminDeleteNewsItem' : '/admin/news/{item_id}',

		/// Computes and processes monthly service changes and cancelations for all active accounts. It returns the number of modifications processed.
		'IBatchedTasksProcessMonthyServiceModifications' : '/batched_tasks/monthly_service_mods/{year}/{month}',

		/// Computes and processes monthly service fees for all active accounts
		'IBatchedTasksProcessMonthyServiceFees' : '/batched_tasks/monthly_fees/{year}/{month}',

		/// Allocates service credits for all accounts for the given year and month. Can be called multiple times. Returns the number of accounts that had credits applied.
		'IBatchedTasksApplyServiceCredits' : '/batched_tasks/monthly_service_credits/{year}/{month}',

		/// Retrieves a list of open jobs available to the specified user
		'IContractorGetOpenJobs' : '/contractor/jobs/{user_id}/open_jobs/',

		/// Assigns a scheduled service to a user
		'IContractorDispatchService' : '/contractor/scheduled_services/{service_id}/assign/{contractor_id}',

		/// Log's in a user, and returns a hashed login token
		'ILoginsGetLoginToken' : '/logins/{username_or_email}',

		/// Sets a new password for a user, and returns a new login token
		'ILoginsSetPassword' : '/logins/{username}/password',

		/// Sets a new password for a user, and requires a secret answer, and returns a new login token
		'ILoginsSetLostPassword' : '/logins/{username}/new_password',

		/// Causes a 'reset password' email to get generated for specified username or email address'
		'ILoginsResetPassword' : '/logins/{username_or_email}/reset',

		/// Gets a list of question ID's for this user
		'ILoginsGetQuestionIDs' : '/logins/{username}/questions',

		/// Gets the text of a question for a given question ID
		'ILoginsGetQuestion' : '/logins/{username}/questions/{question_id}',

		/// Tests that a security question is correct. The 'password' parameter is ignored. Be careful, too many wrong answers will trigger an account lockout.
		'ILoginsIsAnswerCorrect' : '/logins/{username}/answers',

		/// Enables a new account, based on a key send in a verification email.
		'ILoginsEnableAccount' : '/logins/{username}/verify/{verification_key}',

		/// Gets a user structure for a logged in user
		'ILoginsGetUser' : '/logins/{token}/user',

		/// Logs out the referenced session
		'ILoginsLogout' : '/logins/{token}',

		/// Logs out all login sessions related to s specific user
		'ILoginsLogoutAllSessions' : '/logins/{username}/logins',

		/// Checks to see if the email address is registered
		'ILoginsIsUserEmailRegistered' : '/logins/validity/email_addresses/{email_address}/in_use',

		/// Checks if the given username is already registered
		'ILoginsIsUserNameRegistered' : '/logins/validity/usernames/{user_name}/in_use',

		/// Checks if the given username is valid according to system rules
		'ILoginsIsUserNameValid' : '/logins/validity/usernames/{user_name}/is_valid',

		/// Checks if the given password is valid according to system rules
		'ILoginsIsPasswordValid' : '/logins/validity/passwords/is_valid',

		'IMealsFindMenuIDs' : '/meals/menu/ID/search',

		/// Finds all the menus for the given zip-code and that are active within the given date range. If start_date and
		/// end_date are not provided, it returns active menus without regards to date. If only start_date is provided, it will return all menus active after that date.
		/// This version returns a list of menu objects.
		'IMealsFindMenus' : '/meals/menu/search/',

		/// Retrieves a menu for a given date and zip code where entrees and side dishes that are unavailable culled
		'IMealsGetMenuForDay' : '/meals/menu/{menu_id}/by_day_and_zip/{zip_code}',

		/// Retrieves a menu's daily schedule for the given date, if it exists.
		'IMealsFindMenuDailySchedule' : '/meals/menu/{menu_id}/daily_schedules/by_date',

		/// Retrieves a menu's daily schedule by id.
		'IMealsGetMenuDailySchedule' : '/meals/menu/{menu_id}/daily_schedules/{schedule_id}',

		/// Retrieves a list of a menu's daily schedule ids
		'IMealsGetMenuDailyScheduleIDs' : '/meals/menu/{menu_id}/daily_schedules/ids',

		/// Retrieves a list of a menu's daily schedule ids
		'IMealsGetMenuDailySchedules' : '/meals/menu/{menu_id}/daily_schedules',

		/// Gets a list of dates that should be considered valid for the given menu, limited by the optional date parameters
		'IMealsGetMealServiceDates' : '/meals/menu/{menu_id}/service_dates',

		/// Gets a list of dates that should be considered valid for any menu for the given zipcode, limited by the optional date parameters
		'IMealsGetMealsServiceDatesByZip' : '/meals/menu/service_dates/by_zip/{zip_code}',

		/// Gets the availability of an entree item for a given date
		'IMealsGetEntreeMenuItemAvailabilityRemaining' : '/meals/entree/{entree_id}/availability/remaining',

		/// Gets the availability of a side dish item for a given date
		'IMealsGetSideDishMenuItemAvailabilityRemaining' : '/meals/side_dish/{side_id}/availability/remaining',

		/// Gets all the menus
		'IMealsGetAllMenus' : '/meals/menu',

		/// Gets a menu by ID
		'IMealsGetMenu' : '/meals/menu/{menu_id}',

		/// Adds a new menu, NOTE that the ENTREES/SIDES must exist already, they cannot be created via this API, only the ID's are used to link to this menu
		'IMealsAddMenu' : '/meals/menu',

		/// Updates an existing menu
		'IMealsUpdateMenu' : '/meals/menu/{menu_id}',

		/// Gets a list of serivces associated with this menu
		'IMealsGetMenuServices' : '/meals/menu/{menu_id}/service',

		/// Gets a list of serivces associated with this menu
		'IMealsGetMenuServiceIds' : '/meals/menu/{menu_id}/service/ids',

		/// Adds a service association to this menu
		'IMealsAssociateMenuWithService' : '/meals/menu/{menu_id}/service/ids/{service_id}',

		/// Remove a service association with this menu Disassociate
		'IMealsDisassociateMenuWithService' : '/meals/menu/{menu_id}/service/ids/{service_id}',

		/// Adds a daily schedule for a menu. If a schedule for the specified day (in eastern time) already exists, an error will occur
		'IMealsAddMenuDailySchedule' : '/meals/menu/{menu_id}/daily_schedules',

		/// Modifies an existing daily schedule for a menu. Note that the DATE cannot be changed, delete this schedule and create a new one for the new date
		'IMealsUpdateMenuDailySchedule' : '/meals/menu/{menu_id}/daily_scheduled/{schedule_id}',

		/// Deletes an existing daily schedule for a menu.
		'IMealsDeleteMenuDailySchedule' : '/meals/menu/{menu_id}/daily_scheduled/{schedule_id}',

		/// Gets a list of 'Active' entrees
		'IMealsGetEntrees' : '/meals/entree',

		/// Gets a list of 'Active' entree ids
		'IMealsGetEntreeIDs' : '/meals/entree/ids',

		/// Gets an entree by id.
		'IMealsGetEntree' : '/meals/entree/{entree_id}',

		/// Adds a new entree
		'IMealsAddEntree' : '/meals/entree',

		/// Updates an entree
		'IMealsUpdateEntree' : '/meals/entree/{entree_id}',

		/// Deletes an entree (technically, marks it 'inactive')
		'IMealsDeleteEntree' : '/meals/entree/{entree_id}',

		/// Gets a list of pre-defined entree categories. (I don't know why I hard-coded the categories, but that's the way I did it... sorry
		'IMealsGetEntreeCategories' : '/meals/entree_categories',

		/// Gets a list of 'Active' side dishes
		'IMealsGetSideDishes' : '/meals/side_dish',

		/// Gets a list of 'Active' side dish ids
		'IMealsGetSideDishIDs' : '/meals/side_dish/ids',

		/// Gets a side dish by id.
		'IMealsGetSideDish' : '/meals/side_dish/{side_dish_id}',

		/// Adds a new side dish
		'IMealsAddSideDish' : '/meals/side_dish',

		/// Updates a side dish
		'IMealsUpdateSideDish' : '/meals/side_dish/{side_dish_id}',

		/// Deletes a side dish (technically, marks it 'inactive')
		'IMealsDeleteSideDish' : '/meals/side_dish/{side_dish_id}',

		/// Gets the availability of an entree item for a given date, this is the administrative version that supplies more information
		'IMealsGetEntreeMenuItemAvailability' : '/meals/entree/{entree_id}/availability',

		/// Sets the availability of an entree item for a given date. This will replace any existing availability entry for this item on this date.
		'IMealsSetEntreeMenuItemAvailability' : '/meals/entree/{entree_id}/availability',

		/// Gets the availability of a side dish item for a given date, this is the administrative version that supplies more information
		'IMealsGetSideDishMenuItemAvailability' : '/meals/side_dish/{side_id}/availability',

		/// Sets the availability of a side dish item for a given date. This will replace any existing availability entry for this item on this date.
		'IMealsSetSideDishMenuItemAvailability' : '/meals/side_dish/{side_id}/availability',

		'INewsGetNewsByZip' : '/news/by_zip/{zip_code}',

		'INewsGetNewsForAccount' : '/news/for_account/{account_id}',

		'IRestaurantIngestMenu' : '/restaurant/menu/add',

		'IRestaurantGetAllRestaurants' : '/restaurant/all',

		'IRestaurantGetAllLocations' : '/restaurant/locations/all',

		'IRestaurantGetRestaurant' : '/restaurant/{rest_id}',

		'IRestaurantGetRestaurantByName' : '/restaurant/by_name/{name}',

		'IRestaurantFindLocations' : '/restaurant/locations/by_address',

		'IRestaurantFindLocationsByLocation' : '/restaurant/locations/by_location/lat/{lat}/long/{lon}',

		'IRestaurantGetLocations' : '/restaurant/{rest_id}/locations',

		'IRestaurantGetLocation' : '/restaurant/locations/{loc_id}',

		'IRestaurantGetLocationSearchMetadata' : '/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}',

		'IRestaurantGetLocationSearchMetadataByLocation' : '/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}',

		'IRestaurantGetCategories' : '/restaurantcategories',

		'IRestaurantGetLocationHolidayDates' : '/restaurant/locations/{loc_id}/holiday_dates',

		'IRestaurantGetMenuIDs' : '/restaurant/locations/{loc_id}/menus/ids',

		'IRestaurantGetMenus' : '/restaurant/locations/{loc_id}/menus',

		'IRestaurantGetMenu' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}',

		'IRestaurantGetAvailableOrderTimes' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start_date}',

		'IRestaurantGetMenuModifierGroupIDs' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids',

		'IRestaurantGetMenuModifierGroups' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups',

		'IRestaurantGetMenuModifierGroup' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}',

		'IRestaurantGetMenuModifierGroupsByIDList' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}',

		'IRestaurantGetMenuModifierIds' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids',

		'IRestaurantGetMenuModifiers' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers',

		'IRestaurantGetMenuModifier' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}',

		'IRestaurantGetMenuModifiersByIDList' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}',

		'IRestaurantGetMenuTagIDs' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids',

		'IRestaurantGetMenuTags' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags',

		'IRestaurantGetMenuTag' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}',

		'IRestaurantGetMenuTagsByIDList' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}',

		'IRestaurantGetMenuGroupIds' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids',

		'IRestaurantGetMenuGroups' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups',

		'IRestaurantGetChildMenuGroupIds' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids',

		'IRestaurantGetChildMenuGroups' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups',

		'IRestaurantGetMenuGroup' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}',

		'IRestaurantGetMenuItemIds' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids',

		'IRestaurantGetMenuItems' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems',

		'IRestaurantGetChildMenuItemIds' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids',

		'IRestaurantGetChildMenuItems' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}',

		'IRestaurantGetMenuItemIdsByTagIdList' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids',

		'IRestaurantGetMenuItemsByTagIdList' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}',

		'IRestaurantGetMenuItem' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}',

		'IRestaurantGetModifierPrice' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}',

		'IRestaurantGetModifierPricesByIDList' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}',

		'IRestaurantCheckPrice' : '/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price',

		'IRestaurantAdminAddRestaurant' : '/restaurant_admin/restaurants',

		'IRestaurantAdminGetGeoFence' : '/restaurant_admin/restaurants/location/{loc_id}/geofence',

		'IRestaurantAdminGetGeoShapeIds' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes/ids',

		'IRestaurantAdminGetGeoShapes' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes',

		'IRestaurantAdminGetGeoShape' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}',

		'IRestaurantAdminAddGeoShape' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes',

		'IRestaurantAdminDeleteGeoShape' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}',

		'IRestaurantAdminGetConvexShapeIDs' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids',

		'IRestaurantAdminGetConvexShapes' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}/optimized_shapes',

		'IRestaurantAdminGetConvexShape' : '/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}',

		/// Get basic 'hello' from this server.
		'IServerInfoGetHello' : '/server_info/',

		/// Checks DB connectivity
		'IServerInfoGetDatabaseOk' : '/server_info/dbok',

		/// Gets the code version running on this server
		'IServerInfoGetCodeVersion' : '/server_info/version',

		/// Gets the codebase date running on this server
		'IServerInfoGetBuildDate' : '/server_info/builddate',

		/// Gets the SHA-1 of the git commit used to build the code.
		'IServerInfoGetBuildSourceControlCommit' : '/server_info/build_sc_commit',

		/// Gets the build configuration used to build this code.
		'IServerInfoGetBuildConfig' : '/server_info/build_config',

		/// Retrieves the automatic migration script after a code update.
		'IServerInfoGetMigrationCode' : '/server_info/migration_script',

		/// Places the server in 'time debug' mode, where the logic acts as though the date and time is as specified in the timestamp parameter.
		'IServerInfoSetTimeDebugMode' : '/server_info/time_debug/{enable_debug}',

		/// Gets the server's current time.
		'IServerInfoGetServerTime' : '/server_info/time_debug/server_time',

		/// Gets the server's current local time .
		'IServerInfoGtServerLocalTime' : '/server_info/time_debug/server_local_time',

		'IServerInfoDoPlivoCallback' : '/server_info/plivo_callback',

		'IScheduledServicesGetServices' : '/scheduled_services/',

		/// Gets a Scheduled Service Object
		'IScheduledServicesGetScheduledService' : '/scheduled_services/{service_id}',

		/// Returns 'true' if this scheduled service can be edited, as determined by the business logic
		'IScheduledServicesIsServiceOpenToEdits' : '/scheduled_services/{service_id}/can_edit',

		'IScheduledServicesGetHistoryEntries' : '/scheduled_services/{service_id}/history',

		'IScheduledServicesGetHistoryEntryIDs' : '/scheduled_services/{service_id}/history/ids',

		'IScheduledServicesGetHistoryEntry' : '/scheduled_services/{service_id}/history/{history_id}',

		/// Gets a list of user notes for the scheduled service object.
		'IScheduledServicesGetNotes' : '/scheduled_services/{service_id}/notes',

		/// Gets a list of user note ids for the scheduled service object.
		'IScheduledServicesGetNoteIds' : '/scheduled_services/{service_id}/notes/ids',

		/// Gets a user note object for the scheduled service object.
		'IScheduledServicesGetNote' : '/scheduled_services/{service_id}/notes/{note_id}',

		/// Adds a user note for the scheduled service object.
		'IScheduledServicesAddNote' : '/scheduled_services/{service_id}/notes',

		/// Updates a user note object for the scheduled service object.
		'IScheduledServicesSetNote' : '/scheduled_services/{service_id}/notes/{note_id}',

		/// Deletes a user note object for the scheduled service object.
		'IScheduledServicesDeleteNote' : '/scheduled_services/{service_id}/notes/{note_id}',

		/// Gets a list of admin notes for the scheduled service object.
		'IScheduledServicesGetAdminNotes' : '/scheduled_services/{service_id}/admin_notes',

		/// Gets a list of admin note ids for the scheduled service object.
		'IScheduledServicesGetAdminNoteIds' : '/scheduled_services/{service_id}/admin_notes/ids',

		/// Gets an admin note object for the scheduled service object.
		'IScheduledServicesGetAdminNote' : '/scheduled_services/{service_id}/admin_notes/{note_id}',

		/// Adds an admin note for the scheduled service object.
		'IScheduledServicesAddAdminNote' : '/scheduled_services/{service_id}/admin_notes',

		/// Updates an admin note object for the scheduled service object.
		'IScheduledServicesSetAdminNote' : '/scheduled_services/{service_id}/admin_notes/{note_id}',

		/// Deletes an admin note object for the scheduled service object.
		'IScheduledServicesDeleteAdminNote' : '/scheduled_services/{service_id}/admin_notes/{note_id}',

		/// Calculates and gets a fee for for this service. This is a 'raw' service fee that does not take into account discounts and plan allowances.
		/// This will also be incomplete if some of the charges have not been added.
		'IScheduledServicesGetServiceFee' : '/scheduled_services/{service_id}/service_fee',

		/// Calculates and gets a fee for this service. This charge depends on account parameters, discounts and current allowances.
		/// This will also be incomplete if some of the charges have not been added.
		'IScheduledServicesGetEffectiveFee' : '/scheduled_services/{service_id}/effective_fee',

		/// Gets a Scheduled Service Invoice
		'IScheduledServicesGetScheduledServiceInvoice' : '/scheduled_services/{service_id}/invoice',

		/// Creates an invoice for this scheduled service. This call will fail if an Invoice already exists for this service.
		'IScheduledServicesCreateScheduledServiceInvoice' : '/scheduled_services/{service_id}/invoice',

		'IScheduledServicesIsServiceCustomerEditable' : '/scheduled_services/{service_id}/is_editable',

		'IScheduledServicesReviewService' : '/scheduled_services/{service_id}/review',

		'IScheduledServicesCancelReviewService' : '/scheduled_services/{service_id}/review',

		'IScheduledServicesIsServiceInReview' : '/scheduled_services/{service_id}/review',

		'IScheduledServicesApproveService' : '/scheduled_services/{service_id}/approve',

		'IScheduledServicesRejectService' : '/scheduled_services/{service_id}/reject',

		'IScheduledServicesHasServiceBeenApproved' : '/scheduled_services/{service_id}/is_approved',

		/// Gets a list of available service objects based on the passed in list of ID's
		'IServicesGetServices' : '/services/',

		/// Gets a service by ID
		'IServicesGetService' : '/services/{service_id}',

		'IServicesGetTaxRates' : '/services/{service_id}/tax_rates',

		/// Gets a list of ID's for available services
		'IServicesGetAvailableServiceIDs' : '/services/availability/ids',

		/// Gets a list of Service objects for available services
		'IServicesGetAvailableServices' : '/services/availability',

		/// Gets a list of Service objects for available services for a particular user, with subscription discounts applied
		'IServicesGetAvailableServicesForUser' : '/services/availability/{user_id}',

		/// Gets a list of dates of operation for the given service.
		'IServicesGetAvailableDatesForService' : '/services/{service_id}/dates',

		/// Gets a shopping list
		'IShoppingListsGetShoppingList' : '/shopping_lists/{shopping_list_id}',

		/// Returns 'true' if this list can be edited, as determined by the business logic
		'IShoppingListsIsListOpenToEdits' : '/shopping_lists/{shopping_list_id}/can_edit',

		/// Sets new data for an existing shopping list
		'IShoppingListsSetShoppingList' : '/shopping_lists/{shopping_list_id}',

		/// Deletes a shopping list
		'IShoppingListsDeleteShoppingList' : '/shopping_lists/{shopping_list_id}',

		/// Creates a pseudo-deep copy of an existing shopping list, potentially preserving Products. (pass in a boolean value)
		'IShoppingListsCloneShoppingList' : '/shopping_lists/{shopping_list_id}/clone/{clone_products}',

		/// Gets a List of Shopping list item ids for the shopping list.
		'IShoppingListsGetShoppingListItemsIds' : '/shopping_lists/{shopping_list_id}/items/ids',

		/// Gets a List of Shopping list items for the shopping list.
		'IShoppingListsGetShoppingListItems' : '/shopping_lists/{shopping_list_id}/items',

		/// Replaces the entire list of Shopping list items for the shopping list.
		'IShoppingListsSetShoppingListItems' : '/shopping_lists/{shopping_list_id}/items',

		/// Gets a Shopping list item for the shopping list.
		'IShoppingListsGetShoppingListItem' : '/shopping_lists/{shopping_list_id}/items/{item_id}',

		/// Adds a new item to the shopping list, returning the Id of the new item
		'IShoppingListsAddShoppingListItem' : '/shopping_lists/{shopping_list_id}/items',

		/// Updates an item in the shopping list, returning the updated item. NOTE: if you populate the 'Product' filed, a new product entry will be created.
		/// To re-use the previous Product, set the field to 'null'! You cannot alter 'Product' entries with this API, only create altered new ones.
		'IShoppingListsSetShoppingListItem' : '/shopping_lists/{shopping_list_id}/items/{item_id}',

		/// Adds a new item to the shopping list.
		'IShoppingListsDeleteShoppingListItem' : '/shopping_lists/{shopping_list_id}/items/{item_id}',

		/// Gets a list of stores servicing this zip code for shopping.
		'IShoppingListsGetStores' : '/shopping_lists/stores/by_zip/{zip_code}',

		/// Gets a list of stores servicing this zip code for shopping.
		'IShoppingListsGetStore' : '/shopping_lists/stores/{store_id}',

		/// Gets a list of subscription plans
		'ISubscriptionsGetPlans' : '/subscriptions/plans',

		/// Gets a list of subscription plan IDs
		'ISubscriptionsGetPlanIDs' : '/subscriptions/plans/ids',

		/// Gets a subscription plan
		'ISubscriptionsGetPlan' : '/subscriptions/plans/{plan_id}',

		/// Gets a list of descriptions for plan items
		'ISubscriptionsGetPlanItemDescriptions' : '/subscriptions/plans/{plan_id}/item_descriptions',

		/// Gets a user structure for the given user id (not username!)
		'IUsersGetUser' : '/users/{id}',

		/// Updates an existing user's data, returns 'true' if succeeded.
		'IUsersSetUser' : '/users/',

		/// Gets a user structure for the currently logged in user
		'IUsersGetCurrentUser' : '/users/current',

		/// Gets a list of user address structures
		'IUsersGetServiceAddresses' : '/users/{user_id}/service_addresses',

		/// Gets a customer user's role level. This will return 'Other' if called on a non-customer user.
		'IUsersGetCustomerLevel' : '/users/{user_id}/customer_level',

		/// Sets a customer user's role level. This will fail if the user is not already a customer user.
		'IUsersSetCustomerLevel' : '/users/{user_id}/customer_level',

		/// Enables the specified user, returning the prior enabled state
		'IUsersEnableUser' : '/users/{user_id}/is_enbled',

		/// Gets the 'enabled' state of a user. Note that the account must also be enabled for the user to log in
		'IUsersGetUserEnabled' : '/users/{user_id}/is_enbled',

		/// Enables the specified user, returning the enabled state
		'IUsersLockoutUser' : '/users/{user_id}/is_locked_out',

		/// Gets the 'enabled' state of a user. Note that the account must also be enabled for the user to log in
		'IUsersGetUserLockedOut' : '/users/{user_id}/is_locked_out',

		/// Gets a list of messages associated with the user, either sent or received.
		'IUsersGetMessages' : '/users/{user_id}/messages',

		/// Gets a specific message, either sent or received.
		'IUsersGetMessage' : '/users/{user_id}/messages/{msg_id}',

		/// Sends a new message on behalf of this user, with message structure in the post body
		'IUsersPostNewMessage' : '/users/{user_id}/messages/sent',

		/// Marks or unmarks a message as read
		'IUsersMarkMessageRead' : '/users/{user_id}/messages/{message_id}/is_read',

		/// Gets a list of received messages for this user., oldest first, unless reverse order is specified.
		'IUsersGetReceivedMessages' : '/users/{user_id}/message/received',

		/// Gets a count of unread received messages for this user.
		'IUsersGetUnreadCount' : '/users/{user_id}/message/received/count',

		/// Schedules a new service request, returns the ID of the request
		'IUsersAddScheduledService' : '/users/{user_id}/scheduled_services',

		/// Makes modifications to a scheduled request, returning 'true' if successful.
		'IUsersUpdateScheduledService' : '/users/{user_id}/scheduled_services/{service_id}',

		/// Gets a list of scheduled service IDs for this user
		'IUsersGetScheduledServices' : '/users/{user_id}/scheduled_services',

		/// Gets a list of scheduled service IDs for this user
		'IUsersGetScheduledServicesIds' : '/users/{user_id}/scheduled_services/ids',

		/// Gets a scheduled service by id
		'IUsersGetScheduledService' : '/users/{user_id}/scheduled_services/{service_id}',

		/// Cancels a scheduled service, this just sets it's status to "canceled". The service can only be canceled in certain service status states
		'IUsersCancelScheduledService' : '/users/{user_id}/scheduled_services/{service_id}/cancel',

		/// Adds a new phone number, returns the id
		'IUsersAddPhoneNumber' : '/users/{user_id}/phone_numbers',

		/// Gets a phone number by id
		'IUsersGetPhoneNumber' : '/users/{user_id}/phone_numbers/{phone_number_id}',

		/// Updates a phone number by id
		'IUsersSetPhoneNumber' : '/users/{user_id}/phone_numbers/{phone_number_id}',

		/// deletes a phone number by id
		'IUsersDeletePhoneNumber' : '/users/{user_id}/phone_numbers/{phone_number_id}',

		/// Gets a list of all phone numbers for the user
		'IUsersGetPhoneNumbers' : '/users/{user_id}/phone_numbers',

		/// Gets a list of all phone numbers ids for the user
		'IUsersGetPhoneNumberIDs' : '/users/{user_id}/phone_numbers/ids',

		/// Gets a list of all shopping list ids for the user
		'IUsersGetShoppingListsIds' : '/users/{user_id}/shopping_lists/ids',

		/// Adds a new shopping list for the user, and returns its ID
		'IUsersAddShoppingList' : '/users/{user_id}/shopping_lists',

		/// Adds a new shopping list for the user, and returns its ID
		'IUsersGetInvoicePrintableReceipt' : '/users/{user_id}/invoice/{invoice_id}/printable_recceipt',

		/// Adds a device token for a user
		'IUsersAddDeviceToken' : '/users/{user_id}/set_device_token/{device_type}/{token}'
};
var DataSources = {
'CC_API_IAccounts' : {},
'CC_API_IAdmin' : {},
'CC_API_IBatchedTasks' : {},
'CC_API_IContractor' : {},
'CC_API_ILogins' : {},
'CC_API_IMeals' : {},
'CC_API_INews' : {},
'CC_API_IRestaurant' : {},
'CC_API_IRestaurantAdmin' : {},
'CC_API_IServerInfo' : {},
'CC_API_IScheduledServices' : {},
'CC_API_IServices' : {},
'CC_API_IShoppingLists' : {},
'CC_API_ISubscriptions' : {},
'CC_API_IUsers' : {}
};
DataSources['CC_API_IAccounts'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IAccounts.prototype.GetAccount = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetUsers = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/users", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetUserIds = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/users/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPendingUsers = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/pending_users", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPendingUserIds = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/pending_users/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.RegisterNewAccount = function(on_result , registration )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/", "POST");
		rb.body(registration);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.ResendVerificationEmail = function(on_result , username_or_email )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/send_verification/{username_or_email}", "POST");
		rb.parameter("username_or_email",username_or_email);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.DeleteAccount = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}", "DELETE");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.RequestAccountCancelation = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/cancel_account", "POST");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetIsAccountCancelationPending = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/cancel_account", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.RequestPlanChange = function(on_result , account_id, plan_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/pending_plan_id", "POST");
		rb.parameter("account_id",account_id);
		rb.body(plan_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetIsPlanChangePending = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/pending_plan_id", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetInvoiceIds = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/invoices/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetInvoice = function(on_result , account_id, invoice_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/invoices/{invoice_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("invoice_id",invoice_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentIds = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPayments = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPayment = function(on_result , account_id, payment_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments/{payment_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_id",payment_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentNotes = function(on_result , account_id, payment_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments/{payment_id}/notes", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_id",payment_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentNoteIds = function(on_result , account_id, payment_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments/{payment_id}/notes/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_id",payment_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentNote = function(on_result , payment_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/notes/{note_id}", "GET");
		rb.parameter("payment_id",payment_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.AddPaymentNote = function(on_result , payment_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/notes", "POST");
		rb.parameter("payment_id",payment_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.SetPaymentNote = function(on_result , payment_id, note_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/notes/{note_id}", "PUT");
		rb.parameter("payment_id",payment_id);
		rb.parameter("note_id",note_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.DeletePaymentNote = function(on_result , payment_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/notes/{note_id}", "DELETE");
		rb.parameter("payment_id",payment_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentAdminNotes = function(on_result , account_id, payment_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments/{payment_id}/admin_notes", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_id",payment_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentAdminNoteIds = function(on_result , account_id, payment_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payments/{payment_id}/admin_notes/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_id",payment_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentAdminNote = function(on_result , payment_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/admin_notes/{note_id}", "GET");
		rb.parameter("payment_id",payment_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.AddPaymentAdminNote = function(on_result , payment_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/admin_notes", "POST");
		rb.parameter("payment_id",payment_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.SetPaymentAdminNote = function(on_result , payment_id, note_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/admin_notes/{note_id}", "PUT");
		rb.parameter("payment_id",payment_id);
		rb.parameter("note_id",note_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.DeletePaymentAdminNote = function(on_result , payment_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/payments/{payment_id}/admin_notes/{note_id}", "DELETE");
		rb.parameter("payment_id",payment_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetServiceAddressIDs = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/addresses/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetServiceAddresses = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/addresses", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetServiceAddress = function(on_result , account_id, address_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/addresses/{address_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("address_id",address_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.AddServiceAddress = function(on_result , account_id, address )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/addresses", "POST");
		rb.parameter("account_id",account_id);
		rb.body(address);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.SetServiceAddress = function(on_result , account_id, address_id, address )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/addresses/{address_id}", "PUT");
		rb.parameter("account_id",account_id);
		rb.parameter("address_id",address_id);
		rb.body(address);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.DeleteServiceAddress = function(on_result , account_id, address_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/addresses/{address_id}", "DELETE");
		rb.parameter("account_id",account_id);
		rb.parameter("address_id",address_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetShoppingPreference = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/shopping_preference", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.SetShoppingPreference = function(on_result , account_id, preference )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/shopping_preference", "PUT");
		rb.parameter("account_id",account_id);
		rb.body(preference);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentMethodIDs = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentMethods = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.AddPaymentMethod = function(on_result , account_id, paymentAccount )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods", "POST");
		rb.parameter("account_id",account_id);
		rb.body(paymentAccount);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentMethod = function(on_result , account_id, payment_method_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods/{payment_method_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_method_id",payment_method_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.GetPaymentMethodForEditing = function(on_result , account_id, payment_method_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_method_id",payment_method_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.UpdatePaymentMethod = function(on_result , account_id, payment_method_id, paymentAccount )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods/{payment_method_id}", "PUT");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_method_id",payment_method_id);
		rb.body(paymentAccount);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAccounts.prototype.DeletePaymentMethod = function(on_result , account_id, payment_method_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/payment_methods/{payment_method_id}", "DELETE");
		rb.parameter("account_id",account_id);
		rb.parameter("payment_method_id",payment_method_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("This functionality is going away, since monthly service credit is going away.", true)]
DataSources.CC_API_IAccounts.prototype.GetServiceCreditRemaining = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/accounts/{account_id}/service_credit", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IAdmin'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IAdmin.prototype.GetAccountIds = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/accounts", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetAccountHistoryIDs = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/accounts/{account_id}/history/ids", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetAccountHistory = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/accounts/{account_id}/history", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetAccountHistoryEntry = function(on_result , account_id, history_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/accounts/{account_id}/history/{history_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.parameter("history_id",history_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.CreateCustomInvoice = function(on_result , account_id, invoice )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/accounts/{account_id}/invoices", "POST");
		rb.parameter("account_id",account_id);
		rb.body(invoice);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.AddInvoiceLineItem = function(on_result , invoice_id, lineItem )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/invoices/{invoice_id}/items", "POST");
		rb.parameter("invoice_id",invoice_id);
		rb.body(lineItem);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.RemoveInvoiceLineItem = function(on_result , invoice_id, line_item_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/invoices/{invoice_id}/items/{line_item_id}", "DELETE");
		rb.parameter("invoice_id",invoice_id);
		rb.parameter("line_item_id",line_item_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.UpdateInvoiceLineItem = function(on_result , invoice_id, line_item_id, lineItem )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/invoices/{invoice_id}/items/{line_item_id}", "PUT");
		rb.parameter("invoice_id",invoice_id);
		rb.parameter("line_item_id",line_item_id);
		rb.body(lineItem);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetScheduledServices = function(on_result , user_id, account_id, zip, start, end, service_states, only_attention_needed, page_size, page_num, reverse_order )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/scheduled_services", "GET");
		rb.queryParameter("user_id",user_id);
		rb.queryParameter("account_id",account_id);
		rb.queryParameter("zip",zip);
		rb.queryParameter("start",start);
		rb.queryParameter("end",end);
		rb.queryParameter("service_states",service_states);
		rb.queryParameter("only_attention_needed",only_attention_needed);
		rb.queryParameter("page_size",page_size);
		rb.queryParameter("page_num",page_num);
		rb.queryParameter("reverse_order",reverse_order);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetScheduledServicesByIDs = function(on_result , scheduled_service_ids )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/scheduled_services/by_id", "POST");
		rb.body(scheduled_service_ids);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.GetScheduledServiceStatus = function(on_result , scheduled_service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/scheduled_services/{scheduled_service_id}/status", "GET");
		rb.parameter("scheduled_service_id",scheduled_service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.ComputeInvoice = function(on_result , scheduled_service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/scheduled_services/{scheduled_service_id}/compute_invoice", "POST");
		rb.parameter("scheduled_service_id",scheduled_service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetSchedueledServiceCharges = function(on_result , scheduled_service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/scheduled_services/{scheduled_service_id}/charges", "GET");
		rb.parameter("scheduled_service_id",scheduled_service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.SetSchedueledServiceCharges = function(on_result , scheduled_service_id, charges )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/scheduled_services/{scheduled_service_id}/charges", "POST");
		rb.parameter("scheduled_service_id",scheduled_service_id);
		rb.body(charges);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.ChargeInvoice = function(on_result , invoice_id, payment_method_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/invoices/{invoice_id}/payment/{payment_method_id}", "POST");
		rb.parameter("invoice_id",invoice_id);
		rb.parameter("payment_method_id",payment_method_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetUserIds = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/users/ids", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetUsers = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/users", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.CreateUser = function(on_result , entry )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/users", "POST");
		rb.body(entry);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetStores = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/stores/by_service/{service_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetRolls = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/roles", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.AddStore = function(on_result , service_id, store )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/stores/by_service/{service_id}", "POST");
		rb.parameter("service_id",service_id);
		rb.body(store);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.UpdateStore = function(on_result , service_id, store_id, store )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/stores/by_service/{service_id}/{store_id}", "PUT");
		rb.parameter("service_id",service_id);
		rb.parameter("store_id",store_id);
		rb.body(store);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IAdmin.prototype.GetStore = function(on_result , service_id, store_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/stores/by_service/{service_id}/{store_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.parameter("store_id",store_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.GetServiceCalendarWeeklyFilter = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/weekly_filter", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.SetServiceCalendarWeeklyFilter = function(on_result , service_id, days_of_week )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/weekly_filter", "PUT");
		rb.parameter("service_id",service_id);
		rb.body(days_of_week);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.GetServiceHolidayDates = function(on_result , service_id, start, end )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/holidays/search", "GET");
		rb.parameter("service_id",service_id);
		rb.queryParameter("start",start);
		rb.queryParameter("end",end);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.GetServiceHolidayByDate = function(on_result , service_id, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/holidays/on_date/{date}", "GET");
		rb.parameter("service_id",service_id);
		rb.parameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.GetServiceHoliday = function(on_result , service_id, holiday_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/holidays/{holiday_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.parameter("holiday_id",holiday_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.SetServiceHolidayDate = function(on_result , service_id, holidayDate )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/holidays", "POST");
		rb.parameter("service_id",service_id);
		rb.body(holidayDate);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.DeleteServiceHolidayDate = function(on_result , service_id, holiday_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/services/{service_id}/calendar/holidays/{holiday_id}", "DELETE");
		rb.parameter("service_id",service_id);
		rb.parameter("holiday_id",holiday_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.GetNewsItem = function(on_result , item_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/news/{item_id}", "GET");
		rb.parameter("item_id",item_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.AddNewsItem = function(on_result , newsItem )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/news", "POST");
		rb.body(newsItem);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.UpdateNewsItem = function(on_result , item_id, item )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/news/{item_id}", "PUT");
		rb.parameter("item_id",item_id);
		rb.body(item);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IAdmin.prototype.DeleteNewsItem = function(on_result , item_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/admin/news/{item_id}", "DELETE");
		rb.parameter("item_id",item_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IBatchedTasks'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IBatchedTasks.prototype.ProcessMonthyServiceModifications = function(on_result , year, month )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/batched_tasks/monthly_service_mods/{year}/{month}", "POST");
		rb.parameter("year",year);
		rb.parameter("month",month);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IBatchedTasks.prototype.ProcessMonthyServiceFees = function(on_result , year, month )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/batched_tasks/monthly_fees/{year}/{month}", "POST");
		rb.parameter("year",year);
		rb.parameter("month",month);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS NO LONGER SUPPORTED!!", true)]
DataSources.CC_API_IBatchedTasks.prototype.ApplyServiceCredits = function(on_result , year, month )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/batched_tasks/monthly_service_credits/{year}/{month}", "POST");
		rb.parameter("year",year);
		rb.parameter("month",month);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IContractor'] = function(connector) {
	this.connector = connector;
};
	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IContractor.prototype.GetOpenJobs = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/contractor/jobs/{user_id}/open_jobs/", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IContractor.prototype.DispatchService = function(on_result , service_id, contractor_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/contractor/scheduled_services/{service_id}/assign/{contractor_id}", "POST");
		rb.parameter("service_id",service_id);
		rb.parameter("contractor_id",contractor_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_ILogins'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_ILogins.prototype.GetLoginToken = function(on_result , username_or_email, password )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username_or_email}", "POST");
		rb.parameter("username_or_email",username_or_email);
		rb.body(password);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.SetPassword = function(on_result , username, password )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/password", "PUT");
		rb.parameter("username",username);
		rb.body(password);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.SetLostPassword = function(on_result , username, securityAnswer )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/new_password", "PUT");
		rb.parameter("username",username);
		rb.body(securityAnswer);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_ILogins.prototype.ResetPassword = function(on_result , username_or_email )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username_or_email}/reset", "POST");
		rb.parameter("username_or_email",username_or_email);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.GetQuestionIDs = function(on_result , username )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/questions", "GET");
		rb.parameter("username",username);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.GetQuestion = function(on_result , username, question_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/questions/{question_id}", "GET");
		rb.parameter("username",username);
		rb.parameter("question_id",question_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.IsAnswerCorrect = function(on_result , username, security_answer )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/answers", "POST");
		rb.parameter("username",username);
		rb.body(security_answer);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.EnableAccount = function(on_result , username, verification_key )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/verify/{verification_key}", "POST");
		rb.parameter("username",username);
		rb.parameter("verification_key",verification_key);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.GetUser = function(on_result , token )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{token}/user", "GET");
		rb.parameter("token",token);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.Logout = function(on_result , token )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{token}", "DELETE");
		rb.parameter("token",token);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.LogoutAllSessions = function(on_result , username )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/{username}/logins", "DELETE");
		rb.parameter("username",username);
		rb.run(function(result) {
			var data = result;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.IsUserEmailRegistered = function(on_result , email_address )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/validity/email_addresses/{email_address}/in_use", "GET");
		rb.parameter("email_address",email_address);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.IsUserNameRegistered = function(on_result , user_name )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/validity/usernames/{user_name}/in_use", "GET");
		rb.parameter("user_name",user_name);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.IsUserNameValid = function(on_result , user_name )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/validity/usernames/{user_name}/is_valid", "GET");
		rb.parameter("user_name",user_name);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ILogins.prototype.IsPasswordValid = function(on_result , password )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/logins/validity/passwords/is_valid", "POST");
		rb.body(password);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IMeals'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IMeals.prototype.FindMenuIDs = function(on_result , zip_code, start_date, end_date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/ID/search", "GET");
		rb.queryParameter("zip_code",zip_code);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.FindMenus = function(on_result , zip_code, start_date, end_date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/search/", "GET");
		rb.queryParameter("zip_code",zip_code);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenuForDay = function(on_result , menu_id, zip_code, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/by_day_and_zip/{zip_code}", "GET");
		rb.parameter("menu_id",menu_id);
		rb.parameter("zip_code",zip_code);
		rb.queryParameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.FindMenuDailySchedule = function(on_result , menu_id, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_schedules/by_date", "GET");
		rb.parameter("menu_id",menu_id);
		rb.queryParameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenuDailySchedule = function(on_result , menu_id, schedule_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_schedules/{schedule_id}", "GET");
		rb.parameter("menu_id",menu_id);
		rb.parameter("schedule_id",schedule_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenuDailyScheduleIDs = function(on_result , menu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_schedules/ids", "GET");
		rb.parameter("menu_id",menu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenuDailySchedules = function(on_result , menu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_schedules", "GET");
		rb.parameter("menu_id",menu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMealServiceDates = function(on_result , menu_id, start_date, end_date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/service_dates", "GET");
		rb.parameter("menu_id",menu_id);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMealsServiceDatesByZip = function(on_result , zip_code, start_date, end_date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/service_dates/by_zip/{zip_code}", "GET");
		rb.parameter("zip_code",zip_code);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetEntreeMenuItemAvailabilityRemaining = function(on_result , entree_id, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/{entree_id}/availability/remaining", "GET");
		rb.parameter("entree_id",entree_id);
		rb.queryParameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetSideDishMenuItemAvailabilityRemaining = function(on_result , side_id, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/{side_id}/availability/remaining", "GET");
		rb.parameter("side_id",side_id);
		rb.queryParameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetAllMenus = function(on_result , active_only )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu", "GET");
		rb.queryParameter("active_only",active_only);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenu = function(on_result , menu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}", "GET");
		rb.parameter("menu_id",menu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.AddMenu = function(on_result , menuEntry )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu", "POST");
		rb.body(menuEntry);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.UpdateMenu = function(on_result , menu_id, menu )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}", "PUT");
		rb.parameter("menu_id",menu_id);
		rb.body(menu);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenuServices = function(on_result , menu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/service", "GET");
		rb.parameter("menu_id",menu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetMenuServiceIds = function(on_result , menu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/service/ids", "GET");
		rb.parameter("menu_id",menu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.AssociateMenuWithService = function(on_result , menu_id, service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/service/ids/{service_id}", "POST");
		rb.parameter("menu_id",menu_id);
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.DisassociateMenuWithService = function(on_result , menu_id, service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/service/ids/{service_id}", "DELETE");
		rb.parameter("menu_id",menu_id);
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.AddMenuDailySchedule = function(on_result , menu_id, schedule )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_schedules", "POST");
		rb.parameter("menu_id",menu_id);
		rb.body(schedule);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.UpdateMenuDailySchedule = function(on_result , menu_id, schedule_id, schedule )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_scheduled/{schedule_id}", "PUT");
		rb.parameter("menu_id",menu_id);
		rb.parameter("schedule_id",schedule_id);
		rb.body(schedule);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.DeleteMenuDailySchedule = function(on_result , menu_id, schedule_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/menu/{menu_id}/daily_scheduled/{schedule_id}", "DELETE");
		rb.parameter("menu_id",menu_id);
		rb.parameter("schedule_id",schedule_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetEntrees = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetEntreeIDs = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/ids", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetEntree = function(on_result , entree_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/{entree_id}", "GET");
		rb.parameter("entree_id",entree_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.AddEntree = function(on_result , entree )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree", "POST");
		rb.body(entree);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.UpdateEntree = function(on_result , entree_id, mealEntree )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/{entree_id}", "PUT");
		rb.parameter("entree_id",entree_id);
		rb.body(mealEntree);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.DeleteEntree = function(on_result , entree_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/{entree_id}", "DELETE");
		rb.parameter("entree_id",entree_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetEntreeCategories = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree_categories", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetSideDishes = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetSideDishIDs = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/ids", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetSideDish = function(on_result , side_dish_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/{side_dish_id}", "GET");
		rb.parameter("side_dish_id",side_dish_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.AddSideDish = function(on_result , mealSideDish )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish", "POST");
		rb.body(mealSideDish);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.UpdateSideDish = function(on_result , side_dish_id, mealSideDish )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/{side_dish_id}", "PUT");
		rb.parameter("side_dish_id",side_dish_id);
		rb.body(mealSideDish);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.DeleteSideDish = function(on_result , side_dish_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/{side_dish_id}", "DELETE");
		rb.parameter("side_dish_id",side_dish_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetEntreeMenuItemAvailability = function(on_result , entree_id, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/{entree_id}/availability", "GET");
		rb.parameter("entree_id",entree_id);
		rb.queryParameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.SetEntreeMenuItemAvailability = function(on_result , entree_id, availability )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/entree/{entree_id}/availability", "POST");
		rb.parameter("entree_id",entree_id);
		rb.body(availability);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.GetSideDishMenuItemAvailability = function(on_result , side_id, date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/{side_id}/availability", "GET");
		rb.parameter("side_id",side_id);
		rb.queryParameter("date",date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IMeals.prototype.SetSideDishMenuItemAvailability = function(on_result , side_id, availability )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/meals/side_dish/{side_id}/availability", "POST");
		rb.parameter("side_id",side_id);
		rb.body(availability);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_INews'] = function(connector) {
	this.connector = connector;
};
	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_INews.prototype.GetNewsByZip = function(on_result , zip_code )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/news/by_zip/{zip_code}", "GET");
		rb.parameter("zip_code",zip_code);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_INews.prototype.GetNewsForAccount = function(on_result , account_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/news/for_account/{account_id}", "GET");
		rb.parameter("account_id",account_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IRestaurant'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IRestaurant.prototype.IngestMenu = function(on_result , menu_xml )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/menu/add", "POST");
		rb.body(menu_xml);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetAllRestaurants = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/all", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetAllLocations = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/all", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetRestaurant = function(on_result , rest_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/{rest_id}", "GET");
		rb.parameter("rest_id",rest_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetRestaurantByName = function(on_result , name )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/by_name/{name}", "GET");
		rb.parameter("name",name);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.FindLocations = function(on_result , address, for_delivery, filter_zip, pickup_radius_meters )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/by_address", "POST");
		rb.body(address);
		rb.queryParameter("for_delivery",for_delivery);
		rb.queryParameter("filter_zip",filter_zip);
		rb.queryParameter("pickup_radius_meters",pickup_radius_meters);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.FindLocationsByLocation = function(on_result , lat, lon, for_delivery, filter_zip, pickup_radius_meters )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/by_location/lat/{lat}/long/{lon}", "GET");
		rb.parameter("lat",lat);
		rb.parameter("lon",lon);
		rb.queryParameter("for_delivery",for_delivery);
		rb.queryParameter("filter_zip",filter_zip);
		rb.queryParameter("pickup_radius_meters",pickup_radius_meters);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetLocations = function(on_result , rest_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/{rest_id}/locations", "GET");
		rb.parameter("rest_id",rest_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetLocation = function(on_result , loc_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetLocationSearchMetadata = function(on_result , loc_id, address, pickup_radius_meters )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}", "POST");
		rb.parameter("loc_id",loc_id);
		rb.body(address);
		rb.parameter("pickup_radius_meters",pickup_radius_meters);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetLocationSearchMetadataByLocation = function(on_result , loc_id, lat, lon, pickup_radius_meters )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("lat",lat);
		rb.parameter("lon",lon);
		rb.parameter("pickup_radius_meters",pickup_radius_meters);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetCategories = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurantcategories", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetLocationHolidayDates = function(on_result , loc_id, start_date, end_date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/holiday_dates", "GET");
		rb.parameter("loc_id",loc_id);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuIDs = function(on_result , loc_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenus = function(on_result , loc_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus", "GET");
		rb.parameter("loc_id",loc_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenu = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetAvailableOrderTimes = function(on_result , loc_id, rmenu_id, start_date, end_date )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start_date}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifierGroupIDs = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifierGroups = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifierGroup = function(on_result , loc_id, rmenu_id, modifiergroup_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("modifiergroup_id",modifiergroup_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifierGroupsByIDList = function(on_result , loc_id, rmenu_id, modifiergroup_id_list )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("modifiergroup_id_list",modifiergroup_id_list);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifierIds = function(on_result , loc_id, rmenu_id, modifiergroup_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("modifiergroup_id",modifiergroup_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifiers = function(on_result , loc_id, rmenu_id, modifiergroup_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("modifiergroup_id",modifiergroup_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifier = function(on_result , loc_id, rmenu_id, modifier_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("modifier_id",modifier_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuModifiersByIDList = function(on_result , loc_id, rmenu_id, modifier_id_list )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("modifier_id_list",modifier_id_list);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuTagIDs = function(on_result , loc_id, rmenu_id, category_only )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.queryParameter("category_only",category_only);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuTags = function(on_result , loc_id, rmenu_id, category_only )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.queryParameter("category_only",category_only);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuTag = function(on_result , loc_id, rmenu_id, rmenu_tag_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("rmenu_tag_id",rmenu_tag_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuTagsByIDList = function(on_result , loc_id, rmenu_id, tag_id_list )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("tag_id_list",tag_id_list);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuGroupIds = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuGroups = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetChildMenuGroupIds = function(on_result , loc_id, rmenu_id, parent_group_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("parent_group_id",parent_group_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetChildMenuGroups = function(on_result , loc_id, rmenu_id, parent_group_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("parent_group_id",parent_group_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuGroup = function(on_result , loc_id, rmenu_id, rmenugroup_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("rmenugroup_id",rmenugroup_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuItemIds = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuItems = function(on_result , loc_id, rmenu_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetChildMenuItemIds = function(on_result , loc_id, rmenu_id, parent_group_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("parent_group_id",parent_group_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetChildMenuItems = function(on_result , loc_id, rmenu_id, parent_group_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("parent_group_id",parent_group_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuItemIdsByTagIdList = function(on_result , loc_id, rmenu_id, tag_id_list )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("tag_id_list",tag_id_list);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuItemsByTagIdList = function(on_result , loc_id, rmenu_id, tag_id_list )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("tag_id_list",tag_id_list);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetMenuItem = function(on_result , loc_id, rmenu_id, rmenuitem_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("rmenuitem_id",rmenuitem_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetModifierPrice = function(on_result , loc_id, rmenu_id, rmenuitem_id, modifier_price_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("rmenuitem_id",rmenuitem_id);
		rb.parameter("modifier_price_id",modifier_price_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.GetModifierPricesByIDList = function(on_result , loc_id, rmenu_id, rmenuitem_id, modifier_price_id_list )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.parameter("rmenuitem_id",rmenuitem_id);
		rb.parameter("modifier_price_id_list",modifier_price_id_list);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurant.prototype.CheckPrice = function(on_result , loc_id, rmenu_id, menu_item )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price", "POST");
		rb.parameter("loc_id",loc_id);
		rb.parameter("rmenu_id",rmenu_id);
		rb.body(menu_item);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IRestaurantAdmin'] = function(connector) {
	this.connector = connector;
};
	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IRestaurantAdmin.prototype.AddRestaurant = function(on_result , newRestaurant )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants", "POST");
		rb.body(newRestaurant);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetGeoFence = function(on_result , loc_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geofence", "GET");
		rb.parameter("loc_id",loc_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetGeoShapeIds = function(on_result , loc_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetGeoShapes = function(on_result , loc_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes", "GET");
		rb.parameter("loc_id",loc_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetGeoShape = function(on_result , loc_id, shape_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("shape_id",shape_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.AddGeoShape = function(on_result , loc_id, shape )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes", "POST");
		rb.parameter("loc_id",loc_id);
		rb.body(shape);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.DeleteGeoShape = function(on_result , loc_id, shape_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}", "DELETE");
		rb.parameter("loc_id",loc_id);
		rb.parameter("shape_id",shape_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetConvexShapeIDs = function(on_result , loc_id, shape_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("shape_id",shape_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetConvexShapes = function(on_result , loc_id, shape_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}/optimized_shapes", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("shape_id",shape_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IRestaurantAdmin.prototype.GetConvexShape = function(on_result , loc_id, shape_id, convex_shape_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/restaurant_admin/restaurants/location/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}", "GET");
		rb.parameter("loc_id",loc_id);
		rb.parameter("shape_id",shape_id);
		rb.parameter("convex_shape_id",convex_shape_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IServerInfo'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IServerInfo.prototype.GetHello = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GetDatabaseOk = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/dbok", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GetCodeVersion = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/version", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GetBuildDate = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/builddate", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GetBuildSourceControlCommit = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/build_sc_commit", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GetBuildConfig = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/build_config", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.SetTimeDebugMode = function(on_result , enable_debug, debug_time )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/time_debug/{enable_debug}", "POST");
		rb.parameter("enable_debug",enable_debug);
		rb.body(debug_time);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GetServerTime = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/time_debug/server_time", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.GtServerLocalTime = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/time_debug/server_local_time", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServerInfo.prototype.DoPlivoCallback = function(on_result , data )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/server_info/plivo_callback", "GET");
		rb.queryParameter("data",data);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IScheduledServices'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IScheduledServices.prototype.GetServices = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetScheduledService = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("This method has been renamed to 'IsServiceCustomerEditable'. Please use that version!", true)]
DataSources.CC_API_IScheduledServices.prototype.IsServiceOpenToEdits = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/can_edit", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetHistoryEntries = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/history", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetHistoryEntryIDs = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/history/ids", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetHistoryEntry = function(on_result , service_id, history_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/history/{history_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.parameter("history_id",history_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetNotes = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/notes", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetNoteIds = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/notes/ids", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetNote = function(on_result , service_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/notes/{note_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.AddNote = function(on_result , service_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/notes", "POST");
		rb.parameter("service_id",service_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.SetNote = function(on_result , service_id, note_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/notes/{note_id}", "PUT");
		rb.parameter("service_id",service_id);
		rb.parameter("note_id",note_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.DeleteNote = function(on_result , service_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/notes/{note_id}", "DELETE");
		rb.parameter("service_id",service_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetAdminNotes = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/admin_notes", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetAdminNoteIds = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/admin_notes/ids", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetAdminNote = function(on_result , service_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/admin_notes/{note_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.AddAdminNote = function(on_result , service_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/admin_notes", "POST");
		rb.parameter("service_id",service_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.SetAdminNote = function(on_result , service_id, note_id, note )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/admin_notes/{note_id}", "PUT");
		rb.parameter("service_id",service_id);
		rb.parameter("note_id",note_id);
		rb.body(note);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.DeleteAdminNote = function(on_result , service_id, note_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/admin_notes/{note_id}", "DELETE");
		rb.parameter("service_id",service_id);
		rb.parameter("note_id",note_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetServiceFee = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/service_fee", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.GetEffectiveFee = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/effective_fee", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IScheduledServices.prototype.GetScheduledServiceInvoice = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/invoice", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.CreateScheduledServiceInvoice = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/invoice", "POST");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.IsServiceCustomerEditable = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/is_editable", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.ReviewService = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/review", "POST");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.CancelReviewService = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/review", "DELETE");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.IsServiceInReview = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/review", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.ApproveService = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/approve", "POST");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.RejectService = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/reject", "POST");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IScheduledServices.prototype.HasServiceBeenApproved = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/scheduled_services/{service_id}/is_approved", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IServices'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IServices.prototype.GetServices = function(on_result , idList )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/", "POST");
		rb.body(idList);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServices.prototype.GetService = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/{service_id}", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServices.prototype.GetTaxRates = function(on_result , service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/{service_id}/tax_rates", "GET");
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServices.prototype.GetAvailableServiceIDs = function(on_result , zip, start, end )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/availability/ids", "GET");
		rb.queryParameter("zip",zip);
		rb.queryParameter("start",start);
		rb.queryParameter("end",end);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServices.prototype.GetAvailableServices = function(on_result , zip, start, end )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/availability", "GET");
		rb.queryParameter("zip",zip);
		rb.queryParameter("start",start);
		rb.queryParameter("end",end);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IServices.prototype.GetAvailableServicesForUser = function(on_result , user_id, start, end, zip )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/availability/{user_id}", "GET");
		rb.parameter("user_id",user_id);
		rb.queryParameter("start",start);
		rb.queryParameter("end",end);
		rb.queryParameter("zip",zip);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IServices.prototype.GetAvailableDatesForService = function(on_result , service_id, start, end )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/services/{service_id}/dates", "GET");
		rb.parameter("service_id",service_id);
		rb.queryParameter("start",start);
		rb.queryParameter("end",end);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IShoppingLists'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IShoppingLists.prototype.GetShoppingList = function(on_result , shopping_list_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}", "GET");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.IsListOpenToEdits = function(on_result , shopping_list_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/can_edit", "GET");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.SetShoppingList = function(on_result , shopping_list_id, shoppingList )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}", "PUT");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.body(shoppingList);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.DeleteShoppingList = function(on_result , shopping_list_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}", "DELETE");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.CloneShoppingList = function(on_result , shopping_list_id, clone_products )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/clone/{clone_products}", "POST");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.parameter("clone_products",clone_products);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.GetShoppingListItemsIds = function(on_result , shopping_list_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items/ids", "GET");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.GetShoppingListItems = function(on_result , shopping_list_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items", "GET");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

	//[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
DataSources.CC_API_IShoppingLists.prototype.SetShoppingListItems = function(on_result , shopping_list_id, itemsList )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items", "PUT");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.body(itemsList);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.GetShoppingListItem = function(on_result , shopping_list_id, item_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items/{item_id}", "GET");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.parameter("item_id",item_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.AddShoppingListItem = function(on_result , shopping_list_id, item )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items", "POST");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.body(item);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.SetShoppingListItem = function(on_result , shopping_list_id, item_id, item )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items/{item_id}", "PUT");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.parameter("item_id",item_id);
		rb.body(item);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.DeleteShoppingListItem = function(on_result , shopping_list_id, item_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/{shopping_list_id}/items/{item_id}", "DELETE");
		rb.parameter("shopping_list_id",shopping_list_id);
		rb.parameter("item_id",item_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.GetStores = function(on_result , zip_code )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/stores/by_zip/{zip_code}", "GET");
		rb.parameter("zip_code",zip_code);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IShoppingLists.prototype.GetStore = function(on_result , store_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/shopping_lists/stores/{store_id}", "GET");
		rb.parameter("store_id",store_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_ISubscriptions'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_ISubscriptions.prototype.GetPlans = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/subscriptions/plans", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ISubscriptions.prototype.GetPlanIDs = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/subscriptions/plans/ids", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ISubscriptions.prototype.GetPlan = function(on_result , plan_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/subscriptions/plans/{plan_id}", "GET");
		rb.parameter("plan_id",plan_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_ISubscriptions.prototype.GetPlanItemDescriptions = function(on_result , plan_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/subscriptions/plans/{plan_id}/item_descriptions", "GET");
		rb.parameter("plan_id",plan_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources['CC_API_IUsers'] = function(connector) {
	this.connector = connector;
};
DataSources.CC_API_IUsers.prototype.GetUser = function(on_result , id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{id}", "GET");
		rb.parameter("id",id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.SetUser = function(on_result , user )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/", "PUT");
		rb.body(user);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetCurrentUser = function(on_result  )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/current", "GET");
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetServiceAddresses = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/service_addresses", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetCustomerLevel = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/customer_level", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.SetCustomerLevel = function(on_result , user_id, userLevel )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/customer_level", "PUT");
		rb.parameter("user_id",user_id);
		rb.body(userLevel);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.EnableUser = function(on_result , user_id, enable )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/is_enbled", "PUT");
		rb.parameter("user_id",user_id);
		rb.body(enable);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetUserEnabled = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/is_enbled", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.LockoutUser = function(on_result , user_id, lockout )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/is_locked_out", "PUT");
		rb.parameter("user_id",user_id);
		rb.body(lockout);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetUserLockedOut = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/is_locked_out", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetMessages = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/messages", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetMessage = function(on_result , user_id, msg_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/messages/{msg_id}", "GET");
		rb.parameter("user_id",user_id);
		rb.parameter("msg_id",msg_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.PostNewMessage = function(on_result , user_id, message )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/messages/sent", "POST");
		rb.parameter("user_id",user_id);
		rb.body(message);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.MarkMessageRead = function(on_result , user_id, message_id, read )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/messages/{message_id}/is_read", "PUT");
		rb.parameter("user_id",user_id);
		rb.parameter("message_id",message_id);
		rb.body(read);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetReceivedMessages = function(on_result , user_id, unread_only, page_size, page_num, reverse_order )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/message/received", "GET");
		rb.parameter("user_id",user_id);
		rb.queryParameter("unread_only",unread_only);
		rb.queryParameter("page_size",page_size);
		rb.queryParameter("page_num",page_num);
		rb.queryParameter("reverse_order",reverse_order);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetUnreadCount = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/message/received/count", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.AddScheduledService = function(on_result , user_id, service_request )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/scheduled_services", "POST");
		rb.parameter("user_id",user_id);
		rb.body(service_request);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.UpdateScheduledService = function(on_result , user_id, service_id, service_request )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/scheduled_services/{service_id}", "PUT");
		rb.parameter("user_id",user_id);
		rb.parameter("service_id",service_id);
		rb.body(service_request);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetScheduledServices = function(on_result , user_id, service_states, only_attention_needed, start_date, end_date, page_size, page_num, reverse_order )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/scheduled_services", "GET");
		rb.parameter("user_id",user_id);
		rb.queryParameter("service_states",service_states);
		rb.queryParameter("only_attention_needed",only_attention_needed);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.queryParameter("page_size",page_size);
		rb.queryParameter("page_num",page_num);
		rb.queryParameter("reverse_order",reverse_order);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetScheduledServicesIds = function(on_result , user_id, service_states, only_attention_needed, start_date, end_date, page_size, page_num, reverse_order )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/scheduled_services/ids", "GET");
		rb.parameter("user_id",user_id);
		rb.queryParameter("service_states",service_states);
		rb.queryParameter("only_attention_needed",only_attention_needed);
		rb.queryParameter("start_date",start_date);
		rb.queryParameter("end_date",end_date);
		rb.queryParameter("page_size",page_size);
		rb.queryParameter("page_num",page_num);
		rb.queryParameter("reverse_order",reverse_order);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetScheduledService = function(on_result , user_id, service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/scheduled_services/{service_id}", "GET");
		rb.parameter("user_id",user_id);
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.CancelScheduledService = function(on_result , user_id, service_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/scheduled_services/{service_id}/cancel", "POST");
		rb.parameter("user_id",user_id);
		rb.parameter("service_id",service_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.AddPhoneNumber = function(on_result , user_id, phone_number )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/phone_numbers", "POST");
		rb.parameter("user_id",user_id);
		rb.body(phone_number);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetPhoneNumber = function(on_result , user_id, phone_number_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/phone_numbers/{phone_number_id}", "GET");
		rb.parameter("user_id",user_id);
		rb.parameter("phone_number_id",phone_number_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.SetPhoneNumber = function(on_result , user_id, phone_number_id, phoneNumber )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/phone_numbers/{phone_number_id}", "PUT");
		rb.parameter("user_id",user_id);
		rb.parameter("phone_number_id",phone_number_id);
		rb.body(phoneNumber);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.DeletePhoneNumber = function(on_result , user_id, phone_number_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/phone_numbers/{phone_number_id}", "DELETE");
		rb.parameter("user_id",user_id);
		rb.parameter("phone_number_id",phone_number_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetPhoneNumbers = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/phone_numbers", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetPhoneNumberIDs = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/phone_numbers/ids", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetShoppingListsIds = function(on_result , user_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/shopping_lists/ids", "GET");
		rb.parameter("user_id",user_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.AddShoppingList = function(on_result , user_id, shoppingList )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/shopping_lists", "POST");
		rb.parameter("user_id",user_id);
		rb.body(shoppingList);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.GetInvoicePrintableReceipt = function(on_result , user_id, invoice_id )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/invoice/{invoice_id}/printable_recceipt", "GET");
		rb.parameter("user_id",user_id);
		rb.parameter("invoice_id",invoice_id);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

DataSources.CC_API_IUsers.prototype.AddDeviceToken = function(on_result , user_id, device_type, token )
{
		//TODO implement
		//EnsureLogin();
		var rb = new RequestBuilder(this.connector, "/users/{user_id}/set_device_token/{device_type}/{token}", "PUT");
		rb.parameter("user_id",user_id);
		rb.parameter("device_type",device_type);
		rb.parameter("token",token);
		rb.run(function(result) {
			var data = result.Data;
			on_result(data);
		});

};

