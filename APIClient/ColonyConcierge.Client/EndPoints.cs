//Autogenerated content, DO EDIT EDIT!
//Generated on: 9/4/2017 3:28:30 PM
//Generated from assembly ColonyConcierge.API.dll
//Assembly version: 1.0.6456.27761
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using ColonyConcierge.Client.Metrics;
using System.Threading.Tasks;

namespace ColonyConcierge.Client
{
	public static class EndPoints
	{
		 public static string APIVersion = "1.0.6456.27761";
		 public static DateTime APIDate = DateTime.Parse("9/4/2017 3:25:24 PM");
		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Account]' object.
		/// Gets an account structure for the given account id
		/// string format: "/accounts/{account_id}" 
		///</summary>
		public static string IAccountsGetAccount = "/accounts/{account_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an existing account with Account new account data
		/// string format: "/accounts/" 
		///</summary>
		public static string IAccountsSetAccount = "/accounts/";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.User]]' object.
		/// Gets a list of all users for this account
		/// string format: "/accounts/{account_id}/users" 
		///</summary>
		public static string IAccountsGetUsers = "/accounts/{account_id}/users";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of all users for this account
		/// string format: "/accounts/{account_id}/users/ids" 
		///</summary>
		public static string IAccountsGetUserIds = "/accounts/{account_id}/users/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.User]]' object.
		/// Get
		/// string format: "/accounts/{account_id}/pending_users" 
		///</summary>
		public static string IAccountsGetPendingUsers = "/accounts/{account_id}/pending_users";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Get
		/// string format: "/accounts/{account_id}/pending_users/ids" 
		///</summary>
		public static string IAccountsGetPendingUserIds = "/accounts/{account_id}/pending_users/ids";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.LoginResult' object.
		/// Adds a new user *with* a new main account to go along with it.
		/// string format: "/accounts/" 
		///</summary>
		public static string IAccountsRegisterNewAccount = "/accounts/";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Causes a new verification email to be sent to the specified username or email address
		/// string format: "/accounts/send_verification/{username_or_email}" 
		///</summary>
		public static string IAccountsResendVerificationEmail = "/accounts/send_verification/{username_or_email}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes the account with the test user ID. Note this function is not for production, it will only work on test accounts invoked form a logged in test account
		/// string format: "/accounts/{account_id}" 
		///</summary>
		public static string IAccountsDeleteAccount = "/accounts/{account_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Requests Account cancelation. This does not take effect until the current subscription has expired.
		/// string format: "/accounts/{account_id}/cancel_account" 
		///</summary>
		public static string IAccountsRequestAccountCancelation = "/accounts/{account_id}/cancel_account";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Queries if this account has been marked for cancelation as the end of the billing cycle
		/// string format: "/accounts/{account_id}/cancel_account" 
		///</summary>
		public static string IAccountsGetIsAccountCancelationPending = "/accounts/{account_id}/cancel_account";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Requests Account  plan change. If transitioning from an unpaid to a paid subscription, the effect is immediate. Otherwise, the change will take effect when the currentl plan expires. If there are any existing pending changes they will be superseded
		/// string format: "/accounts/{account_id}/pending_plan_id" 
		///</summary>
		public static string IAccountsRequestPlanChange = "/accounts/{account_id}/pending_plan_id";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Queries if this account has been marked for plan change at the end of the plan expiration
		/// string format: "/accounts/{account_id}/pending_plan_id" 
		///</summary>
		public static string IAccountsGetIsPlanChangePending = "/accounts/{account_id}/pending_plan_id";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of invoice IDs for this account
		/// string format: "/accounts/{account_id}/invoices/ids" 
		///</summary>
		public static string IAccountsGetInvoiceIds = "/accounts/{account_id}/invoices/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Invoice]' object.
		/// Gets a invoice by ID for this account
		/// string format: "/accounts/{account_id}/invoices/{invoice_id}" 
		///</summary>
		public static string IAccountsGetInvoice = "/accounts/{account_id}/invoices/{invoice_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/accounts/{account_id}/payments/ids" 
		///</summary>
		public static string IAccountsGetPaymentIds = "/accounts/{account_id}/payments/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Payment]]' object.
		/// string format: "/accounts/{account_id}/payments" 
		///</summary>
		public static string IAccountsGetPayments = "/accounts/{account_id}/payments";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Payment]' object.
		/// string format: "/accounts/{account_id}/payments/{payment_id}" 
		///</summary>
		public static string IAccountsGetPayment = "/accounts/{account_id}/payments/{payment_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Note]]' object.
		/// string format: "/accounts/{account_id}/payments/{payment_id}/notes" 
		///</summary>
		public static string IAccountsGetPaymentNotes = "/accounts/{account_id}/payments/{payment_id}/notes";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/accounts/{account_id}/payments/{payment_id}/notes/ids" 
		///</summary>
		public static string IAccountsGetPaymentNoteIds = "/accounts/{account_id}/payments/{payment_id}/notes/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Note]' object.
		/// string format: "/accounts/payments/{payment_id}/notes/{note_id}" 
		///</summary>
		public static string IAccountsGetPaymentNote = "/accounts/payments/{payment_id}/notes/{note_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/accounts/payments/{payment_id}/notes" 
		///</summary>
		public static string IAccountsAddPaymentNote = "/accounts/payments/{payment_id}/notes";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/accounts/payments/{payment_id}/notes/{note_id}" 
		///</summary>
		public static string IAccountsSetPaymentNote = "/accounts/payments/{payment_id}/notes/{note_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/accounts/payments/{payment_id}/notes/{note_id}" 
		///</summary>
		public static string IAccountsDeletePaymentNote = "/accounts/payments/{payment_id}/notes/{note_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Note]]' object.
		/// string format: "/accounts/{account_id}/payments/{payment_id}/admin_notes" 
		///</summary>
		public static string IAccountsGetPaymentAdminNotes = "/accounts/{account_id}/payments/{payment_id}/admin_notes";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/accounts/{account_id}/payments/{payment_id}/admin_notes/ids" 
		///</summary>
		public static string IAccountsGetPaymentAdminNoteIds = "/accounts/{account_id}/payments/{payment_id}/admin_notes/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Note]' object.
		/// string format: "/accounts/payments/{payment_id}/admin_notes/{note_id}" 
		///</summary>
		public static string IAccountsGetPaymentAdminNote = "/accounts/payments/{payment_id}/admin_notes/{note_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/accounts/payments/{payment_id}/admin_notes" 
		///</summary>
		public static string IAccountsAddPaymentAdminNote = "/accounts/payments/{payment_id}/admin_notes";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/accounts/payments/{payment_id}/admin_notes/{note_id}" 
		///</summary>
		public static string IAccountsSetPaymentAdminNote = "/accounts/payments/{payment_id}/admin_notes/{note_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/accounts/payments/{payment_id}/admin_notes/{note_id}" 
		///</summary>
		public static string IAccountsDeletePaymentAdminNote = "/accounts/payments/{payment_id}/admin_notes/{note_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of service address IDs for this account
		/// string format: "/accounts/{account_id}/addresses/ids" 
		///</summary>
		public static string IAccountsGetServiceAddressIDs = "/accounts/{account_id}/addresses/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ExtendedAddress]]' object.
		/// Gets a list of service addresses for this account
		/// string format: "/accounts/{account_id}/addresses" 
		///</summary>
		public static string IAccountsGetServiceAddresses = "/accounts/{account_id}/addresses";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ExtendedAddress]' object.
		/// Gets a service address by ID for this account
		/// string format: "/accounts/{account_id}/addresses/{address_id}" 
		///</summary>
		public static string IAccountsGetServiceAddress = "/accounts/{account_id}/addresses/{address_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a service address, returns an ID
		/// string format: "/accounts/{account_id}/addresses" 
		///</summary>
		public static string IAccountsAddServiceAddress = "/accounts/{account_id}/addresses";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ExtendedAddress]' object.
		/// Updates a service address by ID for this account
		/// string format: "/accounts/{account_id}/addresses/{address_id}" 
		///</summary>
		public static string IAccountsSetServiceAddress = "/accounts/{account_id}/addresses/{address_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes a service address by ID for this account (will fail if this is the only service address for the account)
		/// string format: "/accounts/{account_id}/addresses/{address_id}" 
		///</summary>
		public static string IAccountsDeleteServiceAddress = "/accounts/{account_id}/addresses/{address_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ShoppingPreference]' object.
		/// Gets the default shopping preferences for this account
		/// string format: "/accounts/{account_id}/shopping_preference" 
		///</summary>
		public static string IAccountsGetShoppingPreference = "/accounts/{account_id}/shopping_preference";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Sets the default shopping preferences for this account
		/// string format: "/accounts/{account_id}/shopping_preference" 
		///</summary>
		public static string IAccountsSetShoppingPreference = "/accounts/{account_id}/shopping_preference";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of payment method IDs this account
		/// string format: "/accounts/{account_id}/payment_methods/ids" 
		///</summary>
		public static string IAccountsGetPaymentMethodIDs = "/accounts/{account_id}/payment_methods/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.PaymentAccountData]]' object.
		/// string format: "/accounts/{account_id}/payment_methods" 
		///</summary>
		public static string IAccountsGetPaymentMethods = "/accounts/{account_id}/payment_methods";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.CreditCardData]]' object.
		/// string format: "/accounts/bt/{account_id}/payment_methods" 
		///</summary>
		public static string IAccountsBtGetPaymentMethods = "/accounts/bt/{account_id}/payment_methods";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new payment method to this account, and returns the ID
		/// string format: "/accounts/{account_id}/payment_methods" 
		///</summary>
		public static string IAccountsAddPaymentMethod = "/accounts/{account_id}/payment_methods";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new payment method to this account, and returns the ID
		/// string format: "/accounts/bt/{account_id}/payment_methods" 
		///</summary>
		public static string IAccountsBtAddPaymentMethod = "/accounts/bt/{account_id}/payment_methods";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PaymentAccountData]' object.
		/// Gets a payment method object by ID
		/// string format: "/accounts/{account_id}/payment_methods/{payment_method_id}" 
		///</summary>
		public static string IAccountsGetPaymentMethod = "/accounts/{account_id}/payment_methods/{payment_method_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PaymentAccountData]' object.
		/// Gets a payment method object by ID, providing a more detailed version.
		/// This API must delegate data lookup to the Credit Card Gateways, so only use this API when you really need the extra data. It will be much slower.
		/// string format: "/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit" 
		///</summary>
		public static string IAccountsGetPaymentMethodForEditing = "/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an existing payment method.
		/// Only certain operations are permitted. You cannot alter the payment method to a completely new type of payment method, you cannot change
		/// account numbers.
		/// string format: "/accounts/{account_id}/payment_methods/{payment_method_id}" 
		///</summary>
		public static string IAccountsUpdatePaymentMethod = "/accounts/{account_id}/payment_methods/{payment_method_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an existing payment method.
		/// Only certain operations are permitted. You cannot alter the payment method to a completely new type of payment method, you cannot change
		/// account numbers.
		/// string format: "/accounts/bt/{account_id}/payment_methods/{payment_method_id}" 
		///</summary>
		public static string IAccountsBtUpdatePaymentMethod = "/accounts/bt/{account_id}/payment_methods/{payment_method_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// 'Deletes' a payment method. The payment data is not actually deleted, but marked a inactive.
		/// string format: "/accounts/{account_id}/payment_methods/{payment_method_id}" 
		///</summary>
		public static string IAccountsDeletePaymentMethod = "/accounts/{account_id}/payment_methods/{payment_method_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// 'Deletes' a payment method. The payment data is not actually deleted, but marked a inactive.
		/// string format: "/accounts/bt/{account_id}/payment_methods/{payment_method_id}" 
		///</summary>
		public static string IAccountsBtDeletePaymentMethod = "/accounts/bt/{account_id}/payment_methods/{payment_method_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Decimal]' object.
		/// Gets the amount of service fee credit remaining
		/// string format: "/accounts/{account_id}/service_credit" 
		///</summary>
		public static string IAccountsGetServiceCreditRemaining = "/accounts/{account_id}/service_credit";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Get
		/// string format: "/accounts/bt/{account_id}/get_token" 
		///</summary>
		public static string IAccountsGetToken = "/accounts/bt/{account_id}/get_token";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Get
		/// string format: "/accounts/payment/get_token" 
		///</summary>
		public static string IAccountsGetPaymentGatewayToken = "/accounts/payment/get_token";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of account IDs
		/// string format: "/admin/accounts" 
		///</summary>
		public static string IAdminGetAccountIds = "/admin/accounts";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of account history IDs associated with the account
		/// string format: "/admin/accounts/{account_id}/history/ids" 
		///</summary>
		public static string IAdminGetAccountHistoryIDs = "/admin/accounts/{account_id}/history/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.AccountHistoryEntry]]' object.
		/// Gets a list of account history items associated with the account
		/// string format: "/admin/accounts/{account_id}/history" 
		///</summary>
		public static string IAdminGetAccountHistory = "/admin/accounts/{account_id}/history";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.AccountHistoryEntry]' object.
		/// Gets an account history item associated with the account
		/// string format: "/admin/accounts/{account_id}/history/{history_id}" 
		///</summary>
		public static string IAdminGetAccountHistoryEntry = "/admin/accounts/{account_id}/history/{history_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Creates a custom invoice on this account
		/// string format: "/admin/accounts/{account_id}/invoices" 
		///</summary>
		public static string IAdminCreateCustomInvoice = "/admin/accounts/{account_id}/invoices";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new invoice line item entry to this invoice
		/// string format: "/admin/invoices/{invoice_id}/items" 
		///</summary>
		public static string IAdminAddInvoiceLineItem = "/admin/invoices/{invoice_id}/items";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Removes an invoice line item entry from this invoice
		/// string format: "/admin/invoices/{invoice_id}/items/{line_item_id}" 
		///</summary>
		public static string IAdminRemoveInvoiceLineItem = "/admin/invoices/{invoice_id}/items/{line_item_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an existing invoice line item entry from in this invoice
		/// string format: "/admin/invoices/{invoice_id}/items/{line_item_id}" 
		///</summary>
		public static string IAdminUpdateInvoiceLineItem = "/admin/invoices/{invoice_id}/items/{line_item_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ScheduledService]]' object.
		/// Gets a list of scheduled Services matching the criteria
		/// string format: "/admin/scheduled_services?user_id={user_id}&account_id={account_id}&zip={zip}&start={start}&end={end}&service_states={service_states}&only_attention_needed={only_attention_needed}&page_size={page_size}&page_num={page_num}&reverse_order={reverse_order}" 
		///</summary>
		public static string IAdminGetScheduledServices = "/admin/scheduled_services";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ScheduledService]]' object.
		/// Gets a list of scheduled service objects for a given list of IDs
		/// string format: "/admin/scheduled_services/by_id" 
		///</summary>
		public static string IAdminGetScheduledServicesByIDs = "/admin/scheduled_services/by_id";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Gets the status of the scheduled service.
		/// string format: "/admin/scheduled_services/{scheduled_service_id}/status" 
		///</summary>
		public static string IAdminGetScheduledServiceStatus = "/admin/scheduled_services/{scheduled_service_id}/status";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Causes an invoice to be computed for the specified Scheduled Service. Returns an invoice ID
		/// string format: "/admin/scheduled_services/{scheduled_service_id}/compute_invoice" 
		///</summary>
		public static string IAdminComputeInvoice = "/admin/scheduled_services/{scheduled_service_id}/compute_invoice";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledServiceCharges]' object.
		/// Gets the charges for the scheduled service.
		/// string format: "/admin/scheduled_services/{scheduled_service_id}/charges" 
		///</summary>
		public static string IAdminGetSchedueledServiceCharges = "/admin/scheduled_services/{scheduled_service_id}/charges";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Sets the charge for the scheduled service.
		/// string format: "/admin/scheduled_services/{scheduled_service_id}/charges" 
		///</summary>
		public static string IAdminSetSchedueledServiceCharges = "/admin/scheduled_services/{scheduled_service_id}/charges";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Causes a charge for the invoice, and returns a payment id
		/// string format: "/admin/invoices/{invoice_id}/payment/{payment_method_id}" 
		///</summary>
		public static string IAdminChargeInvoice = "/admin/invoices/{invoice_id}/payment/{payment_method_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Causes a charge for the invoice, and returns a payment id
		/// string format: "/admin/bt/invoices/{invoice_id}/payment/{payment_method_id}" 
		///</summary>
		public static string IAdminBtChargeInvoice = "/admin/bt/invoices/{invoice_id}/payment/{payment_method_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of all users ids in the system.
		/// string format: "/admin/users/ids" 
		///</summary>
		public static string IAdminGetUserIds = "/admin/users/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.User]]' object.
		/// Gets a list of all users in the system.
		/// string format: "/admin/users" 
		///</summary>
		public static string IAdminGetUsers = "/admin/users";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.User]]' object.
		/// string format: "/admin/users/find?name_contains={name_contains}&workers_only={workers_only}" 
		///</summary>
		public static string IAdminFindUsers = "/admin/users/find";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Creates a new user with an account, typically for non-consumer purposes, such as for managers, employees, or contractors
		/// string format: "/admin/users" 
		///</summary>
		public static string IAdminCreateUser = "/admin/users";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.UserQuickInfo]]' object.
		/// string format: "/admin/quick_user_info/find?name_contains={name_contains}&workers_only={workers_only}" 
		///</summary>
		public static string IAdminQuickFindUsers = "/admin/quick_user_info/find";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/admin/quick_user_info/find/result_count?name_contains={name_contains}&workers_only={workers_only}" 
		///</summary>
		public static string IAdminQuickFindResultCount = "/admin/quick_user_info/find/result_count";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.UserRole]]' object.
		/// Gets a list of all user roles in the system.
		/// string format: "/admin/roles" 
		///</summary>
		public static string IAdminGetRolls = "/admin/roles";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ShoppingStore]]' object.
		/// Gets a list of stores associated with a service definition. Only shopping services can have stores associated with them.
		/// string format: "/admin/stores/by_service/{service_id}" 
		///</summary>
		public static string IAdminGetStores = "/admin/stores/by_service/{service_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new store to the specified service, returning the ID of the new store. The service must be a shopping service.
		/// string format: "/admin/stores/by_service/{service_id}" 
		///</summary>
		public static string IAdminAddStore = "/admin/stores/by_service/{service_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Adds a new store to the specified service, returning the ID of the new store
		/// string format: "/admin/stores/by_service/{service_id}/{store_id}" 
		///</summary>
		public static string IAdminUpdateStore = "/admin/stores/by_service/{service_id}/{store_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ShoppingStore]' object.
		/// Gets a shopping store associated with the specified service.
		/// string format: "/admin/stores/by_service/{service_id}/{store_id}" 
		///</summary>
		public static string IAdminGetStore = "/admin/stores/by_service/{service_id}/{store_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ServiceDaysOfWeek]' object.
		/// Gets a service's weekly filter setting
		/// string format: "/admin/services/{service_id}/calendar/weekly_filter" 
		///</summary>
		public static string IAdminGetServiceCalendarWeeklyFilter = "/admin/services/{service_id}/calendar/weekly_filter";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Sets a service's weekly filter setting
		/// string format: "/admin/services/{service_id}/calendar/weekly_filter" 
		///</summary>
		public static string IAdminSetServiceCalendarWeeklyFilter = "/admin/services/{service_id}/calendar/weekly_filter";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ServiceHolidayDate]]' object.
		/// Gets a list of ServiceHolidayDateObjects for the specified range.
		/// string format: "/admin/services/{service_id}/calendar/holidays/search?start={start}&end={end}" 
		///</summary>
		public static string IAdminGetServiceHolidayDates = "/admin/services/{service_id}/calendar/holidays/search";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ServiceHolidayDate]' object.
		/// Gets a ServiceHolidayDateObjects for the specified date, or null if none exist for the service on that day.
		/// string format: "/admin/services/{service_id}/calendar/holidays/on_date/{date}" 
		///</summary>
		public static string IAdminGetServiceHolidayByDate = "/admin/services/{service_id}/calendar/holidays/on_date/{date}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ServiceHolidayDate]' object.
		/// Gets a ServiceHolidayDateObjects by id
		/// string format: "/admin/services/{service_id}/calendar/holidays/{holiday_id}" 
		///</summary>
		public static string IAdminGetServiceHoliday = "/admin/services/{service_id}/calendar/holidays/{holiday_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Sets a service holiday for a given date on a service. If there is already a holiday for that date, it will be overridden.
		/// string format: "/admin/services/{service_id}/calendar/holidays" 
		///</summary>
		public static string IAdminSetServiceHolidayDate = "/admin/services/{service_id}/calendar/holidays";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes a service holiday.
		/// string format: "/admin/services/{service_id}/calendar/holidays/{holiday_id}" 
		///</summary>
		public static string IAdminDeleteServiceHolidayDate = "/admin/services/{service_id}/calendar/holidays/{holiday_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.NewsItem]' object.
		/// Gets a news item
		/// string format: "/admin/news/{item_id}" 
		///</summary>
		public static string IAdminGetNewsItem = "/admin/news/{item_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new news item
		/// string format: "/admin/news" 
		///</summary>
		public static string IAdminAddNewsItem = "/admin/news";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an existing news item
		/// string format: "/admin/news/{item_id}" 
		///</summary>
		public static string IAdminUpdateNewsItem = "/admin/news/{item_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes a news item
		/// string format: "/admin/news/{item_id}" 
		///</summary>
		public static string IAdminDeleteNewsItem = "/admin/news/{item_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Service]]' object.
		/// string format: "/admin/services" 
		///</summary>
		public static string IAdminGetServices = "/admin/services";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/admin/services/ids" 
		///</summary>
		public static string IAdminGetServiceIDs = "/admin/services/ids";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/admin/services/by_ids" 
		///</summary>
		public static string IAdminGetServicesByIDs = "/admin/services/by_ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]]' object.
		/// string format: "/admin/destinations" 
		///</summary>
		public static string IAdminGetDestinations = "/admin/destinations";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/admin/destinations/ids" 
		///</summary>
		public static string IAdminGetDestinationIDs = "/admin/destinations/ids";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]]' object.
		/// string format: "/admin/destinations/by_ids" 
		///</summary>
		public static string IAdminGetDestinationsByID = "/admin/destinations/by_ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantServiceSummary]]' object.
		/// string format: "/admin_reports/restaurant/by_service/{service_id}/history/ids?start={start}&end={end}" 
		///</summary>
		public static string IAdminReportsGetRestaurantServicesSummary = "/admin_reports/restaurant/by_service/{service_id}/history/ids";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Computes and processes monthly service changes and cancelations for all active accounts. It returns the number of modifications processed.
		/// string format: "/batched_tasks/monthly_service_mods/{year}/{month}" 
		///</summary>
		public static string IBatchedTasksProcessMonthyServiceModifications = "/batched_tasks/monthly_service_mods/{year}/{month}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Computes and processes monthly service fees for all active accounts
		/// string format: "/batched_tasks/monthly_fees/{year}/{month}" 
		///</summary>
		public static string IBatchedTasksProcessMonthyServiceFees = "/batched_tasks/monthly_fees/{year}/{month}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Allocates service credits for all accounts for the given year and month. Can be called multiple times. Returns the number of accounts that had credits applied.
		/// string format: "/batched_tasks/monthly_service_credits/{year}/{month}" 
		///</summary>
		public static string IBatchedTasksApplyServiceCredits = "/batched_tasks/monthly_service_credits/{year}/{month}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/contractor_admin/workers/{user_id}/convert" 
		///</summary>
		public static string IContractorAdminConvertUserToWorker = "/contractor_admin/workers/{user_id}/convert";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of all users ids for users that are 'workers' in the system.
		/// string format: "/contractor_admin/workers/ids" 
		///</summary>
		public static string IContractorAdminGetWorkerUserIds = "/contractor_admin/workers/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.User]]' object.
		/// Gets a list of all users that are 'workers'  in the system.
		/// string format: "/contractor_admin/workers" 
		///</summary>
		public static string IContractorAdminGetWorkerUsers = "/contractor_admin/workers";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}" 
		///</summary>
		public static string IContractorAdminAuthorizeWorkerForScheduleGroup = "/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}" 
		///</summary>
		public static string IContractorAdminUnAuthorizeWorkerForScheduleGroup = "/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroup]]' object.
		/// string format: "/contractor_admin/workers/{user_id}/sg_authorization" 
		///</summary>
		public static string IContractorAdminGetAuthorizedScheduleGroups = "/contractor_admin/workers/{user_id}/sg_authorization";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PendingDiscount]' object.
		/// string format: "/coupons/pending_discount/by_code/{discount_code}" 
		///</summary>
		public static string ICouponsGetDiscount = "/coupons/pending_discount/by_code/{discount_code}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PendingDiscount]' object.
		/// string format: "/coupons/pending_discount/by_code/{discount_code}/check_if_valid/{user_id}?service_id={service_id}&destination_id={destination_id}" 
		///</summary>
		public static string ICouponsGetAvailableDiscount = "/coupons/pending_discount/by_code/{discount_code}/check_if_valid/{user_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Coupon]' object.
		/// string format: "/coupons/coupons/by_code/{coupon_code}" 
		///</summary>
		public static string ICouponsGetCoupon = "/coupons/coupons/by_code/{coupon_code}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// string format: "/coupons_admin/coupons/create?flat_amount={flat_amount}&percent_amount={percent_amount}" 
		///</summary>
		public static string ICouponsAdminCreateCoupon = "/coupons_admin/coupons/create";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/coupons_admin/promotions" 
		///</summary>
		public static string ICouponsAdminCreatePromotion = "/coupons_admin/promotions";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Promotion]]' object.
		/// string format: "/coupons_admin/promotions?start={start}&end={end}" 
		///</summary>
		public static string ICouponsAdminGetPromotions = "/coupons_admin/promotions";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/coupons_admin/promotions/ids?start={start}&end={end}" 
		///</summary>
		public static string ICouponsAdminGetPromotionIDs = "/coupons_admin/promotions/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Promotion]' object.
		/// string format: "/coupons_admin/promotions/{promo_id}" 
		///</summary>
		public static string ICouponsAdminGetPromotion = "/coupons_admin/promotions/{promo_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/coupons_admin/promotions/{promo_id}" 
		///</summary>
		public static string ICouponsAdminUpdatePromotion = "/coupons_admin/promotions/{promo_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/coupons_admin/promotions/{promo_id}" 
		///</summary>
		public static string ICouponsAdminDeletePromotion = "/coupons_admin/promotions/{promo_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/coupons_admin/promotions/{promo_id}/use_count" 
		///</summary>
		public static string ICouponsAdminGetPromotionUsageCount = "/coupons_admin/promotions/{promo_id}/use_count";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Decimal]' object.
		/// string format: "/coupons_admin/promotions/{promo_id}/usage_sum" 
		///</summary>
		public static string ICouponsAdminGetPromotionUsageSum = "/coupons_admin/promotions/{promo_id}/usage_sum";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/coupons_admin/promotions/{promo_id}/related_orders" 
		///</summary>
		public static string ICouponsAdminGetRelatedOrderIds = "/coupons_admin/promotions/{promo_id}/related_orders";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.LoginResult' object.
		/// Log's in a user, and returns a hashed login token
		/// string format: "/logins/{username_or_email}" 
		///</summary>
		public static string ILoginsGetLoginToken = "/logins/{username_or_email}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.LoginResult' object.
		/// Log's in a user, and returns a hashed login token. This version also checks that the user is a worker, and will fail the login if not.
		/// string format: "/logins/{username_or_email}/for_worker" 
		///</summary>
		public static string ILoginsGetLoginTokenForWorker = "/logins/{username_or_email}/for_worker";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.LoginResult' object.
		/// string format: "/logins/{username_or_email}/for_role/{role_name}?for_worker={for_worker}" 
		///</summary>
		public static string ILoginsGetLoginTokenForRole = "/logins/{username_or_email}/for_role/{role_name}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.LoginResult' object.
		/// Sets a new password for a user, and returns a new login token
		/// string format: "/logins/{username}/password" 
		///</summary>
		public static string ILoginsSetPassword = "/logins/{username}/password";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.LoginResult' object.
		/// Sets a new password for a user, and requires a secret answer, and returns a new login token
		/// string format: "/logins/{username_or_email}/new_password" 
		///</summary>
		public static string ILoginsSetLostPassword = "/logins/{username_or_email}/new_password";

		///<summary>
		/// 'POST' operation.
		/// returns a 'System.Boolean' object.
		/// Causes a 'reset password' email to get generated for specified username or email address'
		/// string format: "/logins/{username_or_email}/reset" 
		///</summary>
		public static string ILoginsResetPassword = "/logins/{username_or_email}/reset";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of question ID's for this user
		/// string format: "/logins/{username_or_email}/questions" 
		///</summary>
		public static string ILoginsGetQuestionIDs = "/logins/{username_or_email}/questions";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.SecurityQuestion]' object.
		/// Gets the text of a question for a given question ID
		/// string format: "/logins/{username_or_email}/questions/{question_id}" 
		///</summary>
		public static string ILoginsGetQuestion = "/logins/{username_or_email}/questions/{question_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.SecurityAnswerCheckResult' object.
		/// Tests that a security question is correct. The 'password' parameter is ignored. Be careful, too many wrong answers will trigger an account lockout.
		/// string format: "/logins/{username_or_email}/answers" 
		///</summary>
		public static string ILoginsIsAnswerCorrect = "/logins/{username_or_email}/answers";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Enables a new account, based on a key send in a verification email.
		/// string format: "/logins/{username}/verify/{verification_key}" 
		///</summary>
		public static string ILoginsEnableAccount = "/logins/{username}/verify/{verification_key}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.User]' object.
		/// Gets a user structure for a logged in user
		/// string format: "/logins/{token}/user" 
		///</summary>
		public static string ILoginsGetUser = "/logins/{token}/user";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.Result' object.
		/// Logs out the referenced session
		/// string format: "/logins/{token}" 
		///</summary>
		public static string ILoginsLogout = "/logins/{token}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.Result' object.
		/// Logs out all login sessions related to s specific user
		/// string format: "/logins/{username}/logins" 
		///</summary>
		public static string ILoginsLogoutAllSessions = "/logins/{username}/logins";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Checks to see if the email address is registered
		/// string format: "/logins/validity/email_addresses/{email_address}/in_use" 
		///</summary>
		public static string ILoginsIsUserEmailRegistered = "/logins/validity/email_addresses/{email_address}/in_use";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Checks if the given username is already registered
		/// string format: "/logins/validity/usernames/{user_name}/in_use" 
		///</summary>
		public static string ILoginsIsUserNameRegistered = "/logins/validity/usernames/{user_name}/in_use";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Checks if the given username is valid according to system rules
		/// string format: "/logins/validity/usernames/{user_name}/is_valid" 
		///</summary>
		public static string ILoginsIsUserNameValid = "/logins/validity/usernames/{user_name}/is_valid";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Checks if the given password is valid according to system rules
		/// string format: "/logins/validity/passwords/is_valid" 
		///</summary>
		public static string ILoginsIsPasswordValid = "/logins/validity/passwords/is_valid";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Assigns a scheduled service to a user
		/// string format: "/logistics/scheduled_services/{service_id}/assign/{contractor_id}" 
		///</summary>
		public static string ILogisticsDispatchService = "/logistics/scheduled_services/{service_id}/assign/{contractor_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/schedule_groups/ids" 
		///</summary>
		public static string ILogisticsGetScheduleGroupIds = "/logistics/schedule_groups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroup]]' object.
		/// string format: "/logistics/schedule_groups" 
		///</summary>
		public static string ILogisticsGetScheduleGroups = "/logistics/schedule_groups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroup]' object.
		/// string format: "/logistics/schedule_groups/{schedule_group_id}" 
		///</summary>
		public static string ILogisticsGetScheduleGroup = "/logistics/schedule_groups/{schedule_group_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/allocatedschedules/for_user/{user_id}/ids?start={start}&end={end}" 
		///</summary>
		public static string ILogisticsGetAllocatedScheduleIDs = "/logistics/allocatedschedules/for_user/{user_id}/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot]]' object.
		/// string format: "/logistics/allocatedschedules/for_user/{user_id}?start={start}&end={end}" 
		///</summary>
		public static string ILogisticsGetAllocatedSchedules = "/logistics/allocatedschedules/for_user/{user_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot]' object.
		/// string format: "/logistics/allocatedschedules/for_user/{user_id}/{schedule_id}" 
		///</summary>
		public static string ILogisticsGetAllocatedSchedule = "/logistics/allocatedschedules/for_user/{user_id}/{schedule_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot]]' object.
		/// string format: "/logistics/allocatedschedules/for_user/{user_id}/by_list_ids/{schedule_id_list}" 
		///</summary>
		public static string ILogisticsGetAllocatedSchedulesByIdList = "/logistics/allocatedschedules/for_user/{user_id}/by_list_ids/{schedule_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot]]' object.
		/// string format: "/logistics/{user_id}/allocatedschedules/signed_up?start_date={start}&end_date={end}" 
		///</summary>
		public static string ILogisticsGetUserSignedUpAllocatedSchedules = "/logistics/{user_id}/allocatedschedules/signed_up";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup?is_standby={is_standby}" 
		///</summary>
		public static string ILogisticsSignUpForAllocatedSchedule = "/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup" 
		///</summary>
		public static string ILogisticsCancelSignupForAllocatedSchedule = "/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/clocked_in" 
		///</summary>
		public static string ILogisticsIsUserClockedIn = "/logistics/{user_id}/clocked_in";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.WorkerClockInInfo]' object.
		/// string format: "/logistics/{user_id}/clockin_info" 
		///</summary>
		public static string ILogisticsGetUserClockInInfo = "/logistics/{user_id}/clockin_info";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/clock_in" 
		///</summary>
		public static string ILogisticsClockIn = "/logistics/{user_id}/clock_in";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/clock_out" 
		///</summary>
		public static string ILogisticsClockOut = "/logistics/{user_id}/clock_out";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.Job]' object.
		/// string format: "/logistics/user/{user_id}/jobs/{job_id}" 
		///</summary>
		public static string ILogisticsGetJob = "/logistics/user/{user_id}/jobs/{job_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.JobDetails]' object.
		/// string format: "/logistics/user/{user_id}/jobs/{job_id}/details" 
		///</summary>
		public static string ILogisticsGetJobDetails = "/logistics/user/{user_id}/jobs/{job_id}/details";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/by_id_list/{job_id_list}" 
		///</summary>
		public static string ILogisticsGetJobsByIdList = "/logistics/user/{user_id}/jobs/by_id_list/{job_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/{job_id}/history" 
		///</summary>
		public static string ILogisticsGetJobHistory = "/logistics/user/{user_id}/jobs/{job_id}/history";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/available/ids" 
		///</summary>
		public static string ILogisticsGetAvailableJobIds = "/logistics/user/{user_id}/jobs/available/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/available" 
		///</summary>
		public static string ILogisticsGetAvailableJobs = "/logistics/user/{user_id}/jobs/available";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/open/ids" 
		///</summary>
		public static string ILogisticsGetOpenJobIds = "/logistics/user/{user_id}/jobs/open/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/open" 
		///</summary>
		public static string ILogisticsGetOpenJobs = "/logistics/user/{user_id}/jobs/open";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/offered/ids" 
		///</summary>
		public static string ILogisticsGetOfferedJobIds = "/logistics/user/{user_id}/jobs/offered/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/offered" 
		///</summary>
		public static string ILogisticsGetOfferedJobs = "/logistics/user/{user_id}/jobs/offered";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/claimed/ids" 
		///</summary>
		public static string ILogisticsGetClaimedJobIds = "/logistics/user/{user_id}/jobs/claimed/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/claimed" 
		///</summary>
		public static string ILogisticsGetClaimedJobs = "/logistics/user/{user_id}/jobs/claimed";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/active/assigned/ids" 
		///</summary>
		public static string ILogisticsGetAssignedActiveJobIds = "/logistics/user/{user_id}/jobs/active/assigned/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/active/assigned" 
		///</summary>
		public static string ILogisticsGetAssignedActiveJobs = "/logistics/user/{user_id}/jobs/active/assigned";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/active/in_progress/ids" 
		///</summary>
		public static string ILogisticsGetInProgressJobIds = "/logistics/user/{user_id}/jobs/active/in_progress/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/active/in_progress" 
		///</summary>
		public static string ILogisticsGetInProgressJobs = "/logistics/user/{user_id}/jobs/active/in_progress";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/completed/ids?start_date={start}&end_date={end}" 
		///</summary>
		public static string ILogisticsGetCompletedJobIds = "/logistics/user/{user_id}/jobs/completed/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics/user/{user_id}/jobs/completed?start={start}&end={end}" 
		///</summary>
		public static string ILogisticsGetCompleteJobs = "/logistics/user/{user_id}/jobs/completed";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/logistics/{user_id}/jobs/{job_id}/accept" 
		///</summary>
		public static string ILogisticsAcceptJob = "/logistics/{user_id}/jobs/{job_id}/accept";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/jobs/{job_id}/reject" 
		///</summary>
		public static string ILogisticsRejectJob = "/logistics/{user_id}/jobs/{job_id}/reject";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/jobs/{job_id}/claim" 
		///</summary>
		public static string ILogisticsClaimOpenJob = "/logistics/{user_id}/jobs/{job_id}/claim";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/jobs/{job_id}/start" 
		///</summary>
		public static string ILogisticsStartJob = "/logistics/{user_id}/jobs/{job_id}/start";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/jobs/close" 
		///</summary>
		public static string ILogisticsCloseJob = "/logistics/{user_id}/jobs/close";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/jobs/close_by_list" 
		///</summary>
		public static string ILogisticsCloseJobList = "/logistics/{user_id}/jobs/close_by_list";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics/{user_id}/jobs/{job_id}/message/{send_to_manager}/{send_to_customer}" 
		///</summary>
		public static string ILogisticsSendJobMessage = "/logistics/{user_id}/jobs/{job_id}/message/{send_to_manager}/{send_to_customer}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledService]' object.
		/// string format: "/logistics/user/{user_id}/jobs/{job_id}/scheduled_service/{scheduled_service_id}" 
		///</summary>
		public static string ILogisticsGetJobScheduledService = "/logistics/user/{user_id}/jobs/{job_id}/scheduled_service/{scheduled_service_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics_admin/schedule_groups/ids" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroupIds = "/logistics_admin/schedule_groups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroup]]' object.
		/// string format: "/logistics_admin/schedule_groups" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroups = "/logistics_admin/schedule_groups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroup]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroup = "/logistics_admin/schedule_groups/{schedule_group_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/logistics_admin/schedule_groups" 
		///</summary>
		public static string ILogisticsAdminAddScheduleGroup = "/logistics_admin/schedule_groups";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}" 
		///</summary>
		public static string ILogisticsAdminUpdateScheduleGroup = "/logistics_admin/schedule_groups/{schedule_group_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}" 
		///</summary>
		public static string ILogisticsAdminDeleteScheduleGroup = "/logistics_admin/schedule_groups/{schedule_group_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.User]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assignee" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroupEmergencyAssignee = "/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assignee";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assigne/{user_id}" 
		///</summary>
		public static string ILogisticsAdminSetScheduleGroupEmergencyAssignee = "/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assigne/{user_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/ids" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroupHolidayIDs = "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday]]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/holidays" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroupHolidays = "/logistics_admin/schedule_groups/{schedule_group_id}/holidays";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}" 
		///</summary>
		public static string ILogisticsAdminGetScheduleGroupHoliday = "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/holidays" 
		///</summary>
		public static string ILogisticsAdminAddScheduleGroupHoliday = "/logistics_admin/schedule_groups/{schedule_group_id}/holidays";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}" 
		///</summary>
		public static string ILogisticsAdminUpdateScheduleGroupHoliday = "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}" 
		///</summary>
		public static string ILogisticsAdminDeleteScheduleGroupHoliday = "/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/slots/ids" 
		///</summary>
		public static string ILogisticsAdminGetScheduleSlotIDs = "/logistics_admin/schedule_groups/{schedule_group_id}/slots/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.ScheduleSlot]]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/slots" 
		///</summary>
		public static string ILogisticsAdminGetScheduleSlots = "/logistics_admin/schedule_groups/{schedule_group_id}/slots";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.ScheduleSlot]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}" 
		///</summary>
		public static string ILogisticsAdminGetScheduleSlot = "/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/slots" 
		///</summary>
		public static string ILogisticsAdminAddScheduleSlot = "/logistics_admin/schedule_groups/{schedule_group_id}/slots";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}" 
		///</summary>
		public static string ILogisticsAdminUpdateScheduleSlot = "/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}" 
		///</summary>
		public static string ILogisticsAdminDeleteScheduleSlot = "/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.JobManagementData]]' object.
		/// string format: "/logistics_admin/jobs/active" 
		///</summary>
		public static string ILogisticsAdminGetActiveJobs = "/logistics_admin/jobs/active";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.Job]' object.
		/// string format: "/logistics_admin/jobs/{job_id}" 
		///</summary>
		public static string ILogisticsAdminGetJob = "/logistics_admin/jobs/{job_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics_admin/jobs/by_id_list" 
		///</summary>
		public static string ILogisticsAdminGetJobsByIdList = "/logistics_admin/jobs/by_id_list";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/logistics_admin/jobs/related_to/user/{user_id}" 
		///</summary>
		public static string ILogisticsAdminGetJobsRelatedToUser = "/logistics_admin/jobs/related_to/user/{user_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Logistics.JobDetails]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/details" 
		///</summary>
		public static string ILogisticsAdminGetJobDetails = "/logistics_admin/jobs/{job_id}/details";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.JobDetails]]' object.
		/// string format: "/logistics_admin/jobs/details/by_job_id_list" 
		///</summary>
		public static string ILogisticsAdminGetJobDetailsByIdList = "/logistics_admin/jobs/details/by_job_id_list";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry]]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/history" 
		///</summary>
		public static string ILogisticsAdminGetJobHistory = "/logistics_admin/jobs/{job_id}/history";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/autoassignment_enable/{enable}" 
		///</summary>
		public static string ILogisticsAdminEnableJobAutomaticAssignment = "/logistics_admin/jobs/{job_id}/autoassignment_enable/{enable}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/offer/user/{user_id}" 
		///</summary>
		public static string ILogisticsAdminOfferJobToUser = "/logistics_admin/jobs/{job_id}/offer/user/{user_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/claim/user/{user_id}" 
		///</summary>
		public static string ILogisticsAdminClaimJobForUser = "/logistics_admin/jobs/{job_id}/claim/user/{user_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/reassign/user/{user_id}" 
		///</summary>
		public static string ILogisticsAdminReassignJobToUser = "/logistics_admin/jobs/{job_id}/reassign/user/{user_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/cancel_assignment" 
		///</summary>
		public static string ILogisticsAdminCancelJobAssignment = "/logistics_admin/jobs/{job_id}/cancel_assignment";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/cancel" 
		///</summary>
		public static string ILogisticsAdminCancelJob = "/logistics_admin/jobs/{job_id}/cancel";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.WorkerManagementInfo]]' object.
		/// string format: "/logistics_admin/jobs/{job_id}/pontential_workers" 
		///</summary>
		public static string ILogisticsAdminGetPotentialWorkers = "/logistics_admin/jobs/{job_id}/pontential_workers";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/logistics_admin/workers/{user_id}/send_message" 
		///</summary>
		public static string ILogisticsAdminSendWorkerMessage = "/logistics_admin/workers/{user_id}/send_message";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.NewsItem]]' object.
		/// string format: "/news/by_zip/{zip_code}" 
		///</summary>
		public static string INewsGetNewsByZip = "/news/by_zip/{zip_code}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.NewsItem]]' object.
		/// string format: "/news/for_account/{account_id}" 
		///</summary>
		public static string INewsGetNewsForAccount = "/news/for_account/{account_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant/menu/add" 
		///</summary>
		public static string IRestaurantIngestMenu = "/restaurant/menu/add";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// string format: "/restaurant/menu/export/by_restaruant_id/{restaurant_id}" 
		///</summary>
		public static string IRestaurantExportMenu = "/restaurant/menu/export/by_restaruant_id/{restaurant_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Restaurant]]' object.
		/// string format: "/restaurant/all" 
		///</summary>
		public static string IRestaurantGetAllRestaurants = "/restaurant/all";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocation]]' object.
		/// string format: "/restaurant/locations/all" 
		///</summary>
		public static string IRestaurantGetAllLocations = "/restaurant/locations/all";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Restaurant]' object.
		/// string format: "/restaurant/{rest_id}" 
		///</summary>
		public static string IRestaurantGetRestaurant = "/restaurant/{rest_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Restaurant]' object.
		/// string format: "/restaurant/by_name/{name}" 
		///</summary>
		public static string IRestaurantGetRestaurantByName = "/restaurant/by_name/{name}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocation]]' object.
		/// string format: "/restaurant/locations/by_address?for_delivery={for_delivery}&filter_zip={filter_zip}&pickup_radius_meters={pickup_radius_meters}&destination_id={destination_id}" 
		///</summary>
		public static string IRestaurantFindLocations = "/restaurant/locations/by_address";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocation]]' object.
		/// string format: "/restaurant/locations/by_location/lat/{lat}/long/{lon}?for_delivery={for_delivery}&filter_zip={filter_zip}&pickup_radius_meters={pickup_radius_meters}&destination_id={destination_id}" 
		///</summary>
		public static string IRestaurantFindLocationsByLocation = "/restaurant/locations/by_location/lat/{lat}/long/{lon}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocation]]' object.
		/// string format: "/restaurant/{rest_id}/locations" 
		///</summary>
		public static string IRestaurantGetLocations = "/restaurant/{rest_id}/locations";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RestaurantLocation]' object.
		/// string format: "/restaurant/locations/{loc_id}" 
		///</summary>
		public static string IRestaurantGetLocation = "/restaurant/locations/{loc_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RestaurantSearchResultData]' object.
		/// string format: "/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}?destination_id={destination_id}" 
		///</summary>
		public static string IRestaurantGetLocationSearchMetadata = "/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RestaurantSearchResultData]' object.
		/// string format: "/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}?destination_id={destination_id}" 
		///</summary>
		public static string IRestaurantGetLocationSearchMetadataByLocation = "/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantCategory]]' object.
		/// string format: "/restaurantcategories" 
		///</summary>
		public static string IRestaurantGetCategories = "/restaurantcategories";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ServiceHolidayDate]]' object.
		/// string format: "/restaurant/locations/{loc_id}/holiday_dates?start_date={start_date}&end_date={end_date}" 
		///</summary>
		public static string IRestaurantGetLocationHolidayDates = "/restaurant/locations/{loc_id}/holiday_dates";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocationHoliday]]' object.
		/// string format: "/restaurant/locations/{loc_id}/holidays?start={start}&end={end}" 
		///</summary>
		public static string IRestaurantGetLocationHolidays = "/restaurant/locations/{loc_id}/holidays";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot]]' object.
		/// string format: "/restaurant/locations/{loc_id}/available_order_times/{start}?end={end}&destination_id={destination_id}" 
		///</summary>
		public static string IRestaurantGetLocationAvailableOrderTimes = "/restaurant/locations/{loc_id}/available_order_times/{start}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/ids" 
		///</summary>
		public static string IRestaurantGetMenuIDs = "/restaurant/locations/{loc_id}/menus/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenu]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus" 
		///</summary>
		public static string IRestaurantGetMenus = "/restaurant/locations/{loc_id}/menus";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenu]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}" 
		///</summary>
		public static string IRestaurantGetMenu = "/restaurant/locations/{loc_id}/menus/{rmenu_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start}?end={end}&destination_id={destination_id}" 
		///</summary>
		public static string IRestaurantGetAvailableOrderTimes = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids" 
		///</summary>
		public static string IRestaurantGetMenuModifierGroupIDs = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifierGroup]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups" 
		///</summary>
		public static string IRestaurantGetMenuModifierGroups = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifierGroup]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}" 
		///</summary>
		public static string IRestaurantGetMenuModifierGroup = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifierGroup]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}" 
		///</summary>
		public static string IRestaurantGetMenuModifierGroupsByIDList = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids" 
		///</summary>
		public static string IRestaurantGetMenuModifierIds = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifier]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers" 
		///</summary>
		public static string IRestaurantGetMenuModifiers = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifier]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}" 
		///</summary>
		public static string IRestaurantGetMenuModifier = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifier]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}" 
		///</summary>
		public static string IRestaurantGetMenuModifiersByIDList = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids?category_only={category_only}" 
		///</summary>
		public static string IRestaurantGetMenuTagIDs = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuTag]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags?category_only={category_only}" 
		///</summary>
		public static string IRestaurantGetMenuTags = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuTag]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}" 
		///</summary>
		public static string IRestaurantGetMenuTag = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuTag]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}" 
		///</summary>
		public static string IRestaurantGetMenuTagsByIDList = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids" 
		///</summary>
		public static string IRestaurantGetMenuGroupIds = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuGroup]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups" 
		///</summary>
		public static string IRestaurantGetMenuGroups = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids" 
		///</summary>
		public static string IRestaurantGetChildMenuGroupIds = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuGroup]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups" 
		///</summary>
		public static string IRestaurantGetChildMenuGroups = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuGroup]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}" 
		///</summary>
		public static string IRestaurantGetMenuGroup = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids" 
		///</summary>
		public static string IRestaurantGetMenuItemIds = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuItem]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems" 
		///</summary>
		public static string IRestaurantGetMenuItems = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids" 
		///</summary>
		public static string IRestaurantGetChildMenuItemIds = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuItem]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}" 
		///</summary>
		public static string IRestaurantGetChildMenuItems = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids" 
		///</summary>
		public static string IRestaurantGetMenuItemIdsByTagIdList = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuItem]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}" 
		///</summary>
		public static string IRestaurantGetMenuItemsByTagIdList = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuItem]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}" 
		///</summary>
		public static string IRestaurantGetMenuItem = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifierPrice]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}" 
		///</summary>
		public static string IRestaurantGetModifierPrice = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifierPrice]]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}" 
		///</summary>
		public static string IRestaurantGetModifierPricesByIDList = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Decimal]' object.
		/// string format: "/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price" 
		///</summary>
		public static string IRestaurantCheckPrice = "/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}" 
		///</summary>
		public static string IRestaurantAdminDeactivateMenuItem = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifierPrice]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}" 
		///</summary>
		public static string IRestaurantAdminGetModifierPrice = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifierPrice]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifiergroups/{mod_group_id}/modifiers/{modifier_id}" 
		///</summary>
		public static string IRestaurantAdminGetModifierPriceByModID = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifiergroups/{mod_group_id}/modifiers/{modifier_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices" 
		///</summary>
		public static string IRestaurantAdminAddModifierPrice = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}/modifierprices" 
		///</summary>
		public static string IRestaurantAdminUpdateModifierPrice = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}/modifierprices";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}" 
		///</summary>
		public static string IRestaurantAdminDeleteModifierPrice = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/make_combination" 
		///</summary>
		public static string IRestaurantAdminMakeMenuItemCombination = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/make_combination";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots" 
		///</summary>
		public static string IRestaurantAdminAddMenuItemCombinationSlot = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateMenuItemCombinationSlot = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}" 
		///</summary>
		public static string IRestaurantAdminDeleteMenuItemCombinationSlot = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/publish" 
		///</summary>
		public static string IRestaurantAdminPublishMenu = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/publish";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Restaurant]]' object.
		/// string format: "/restaurant_admin/restaurants" 
		///</summary>
		public static string IRestaurantAdminGetRestaurants = "/restaurant_admin/restaurants";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Restaurant]' object.
		/// string format: "/restaurant_admin/restaurants/{rest_id}" 
		///</summary>
		public static string IRestaurantAdminGetRestaurant = "/restaurant_admin/restaurants/{rest_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/restaurants" 
		///</summary>
		public static string IRestaurantAdminAddRestaurant = "/restaurant_admin/restaurants";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/restaurants/{rest_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateRestaurant = "/restaurant_admin/restaurants/{rest_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantCategory]]' object.
		/// string format: "/restaurant_admin/categories" 
		///</summary>
		public static string IRestaurantAdminGetCategories = "/restaurant_admin/categories";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/restaurants/{rest_id}/categories" 
		///</summary>
		public static string IRestaurantAdminAddRestaurantCategory = "/restaurant_admin/restaurants/{rest_id}/categories";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/ids" 
		///</summary>
		public static string IRestaurantAdminGetLocationIds = "/restaurant_admin/locations/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocation_Admin]]' object.
		/// string format: "/restaurant_admin/locations" 
		///</summary>
		public static string IRestaurantAdminGetLocations = "/restaurant_admin/locations";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RestaurantLocation_Admin]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}" 
		///</summary>
		public static string IRestaurantAdminGetLocationByID = "/restaurant_admin/locations/{loc_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocation_Admin]]' object.
		/// string format: "/restaurant_admin/restaurants/{rest_id}/locations/" 
		///</summary>
		public static string IRestaurantAdminGetLocationsByRestID = "/restaurant_admin/restaurants/{rest_id}/locations/";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/restaurant/{rest_id}/locations" 
		///</summary>
		public static string IRestaurantAdminAddLocation = "/restaurant_admin/restaurant/{rest_id}/locations";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/restaurant/{rest_id}/locations/{loc_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateLocation = "/restaurant_admin/restaurant/{rest_id}/locations/{loc_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PlaceHolderDummy]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/notification_info" 
		///</summary>
		public static string IRestaurantAdminGetLocationNotificationData = "/restaurant_admin/locations/{loc_id}/notification_info";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/notification_info" 
		///</summary>
		public static string IRestaurantAdminSetLocationNotificationData = "/restaurant_admin/locations/{loc_id}/notification_info";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PlaceHolderDummy]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/open_days_of_week" 
		///</summary>
		public static string IRestaurantAdminGetLocationDaysOfWeekOpen = "/restaurant_admin/locations/{loc_id}/open_days_of_week";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/open_days_of_week" 
		///</summary>
		public static string IRestaurantAdminSetLocationDaysOfWeekOpen = "/restaurant_admin/locations/{loc_id}/open_days_of_week";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RestaurantLocationHoliday]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/holidays" 
		///</summary>
		public static string IRestaurantAdminGetLocationHolidays = "/restaurant_admin/locations/{loc_id}/holidays";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/holidays" 
		///</summary>
		public static string IRestaurantAdminAddLocationHoliday = "/restaurant_admin/locations/{loc_id}/holidays";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/holidays/{holiday_id}" 
		///</summary>
		public static string IRestaurantAdminRemoveLocationHoliday = "/restaurant_admin/locations/{loc_id}/holidays/{holiday_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/schedule_slots/ids" 
		///</summary>
		public static string IRestaurantAdminGetLocationScheduleSlotIds = "/restaurant_admin/locations/{loc_id}/schedule_slots/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.PlaceHolderDummy]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/schedule_slots" 
		///</summary>
		public static string IRestaurantAdminGetLocationScheduleSlots = "/restaurant_admin/locations/{loc_id}/schedule_slots";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/schedule_slots" 
		///</summary>
		public static string IRestaurantAdminAddLocationScheduleSlot = "/restaurant_admin/locations/{loc_id}/schedule_slots";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateLocationSchduleSlot = "/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}" 
		///</summary>
		public static string IRestaurantAdminDeleteLocationScheduleSlot = "/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/available_schedule_slots/ids" 
		///</summary>
		public static string IRestaurantAdminGetLocationAvailableSlotIds = "/restaurant_admin/locations/{loc_id}/available_schedule_slots/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/available_schedule_slots" 
		///</summary>
		public static string IRestaurantAdminGetLocationAvailableSlots = "/restaurant_admin/locations/{loc_id}/available_schedule_slots";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}" 
		///</summary>
		public static string IRestaurantAdminGetLocationAvailableSlot = "/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}/is_active/{is_active}" 
		///</summary>
		public static string IRestaurantAdminSetLocationAvailableSlotActive = "/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}/is_active/{is_active}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.GeoFence]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geofence" 
		///</summary>
		public static string IRestaurantAdminGetGeoFence = "/restaurant_admin/locations/{loc_id}/geofence";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes/ids" 
		///</summary>
		public static string IRestaurantAdminGetGeoShapeIds = "/restaurant_admin/locations/{loc_id}/geoshapes/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GeoShape]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes" 
		///</summary>
		public static string IRestaurantAdminGetGeoShapes = "/restaurant_admin/locations/{loc_id}/geoshapes";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.GeoShape]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}" 
		///</summary>
		public static string IRestaurantAdminGetGeoShape = "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes" 
		///</summary>
		public static string IRestaurantAdminAddGeoShape = "/restaurant_admin/locations/{loc_id}/geoshapes";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}" 
		///</summary>
		public static string IRestaurantAdminDeleteGeoShape = "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids" 
		///</summary>
		public static string IRestaurantAdminGetConvexShapeIDs = "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GeoConvexShape]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes" 
		///</summary>
		public static string IRestaurantAdminGetConvexShapes = "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.GeoConvexShape]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}" 
		///</summary>
		public static string IRestaurantAdminGetConvexShape = "/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/ids" 
		///</summary>
		public static string IRestaurantAdminGetMenuIDs = "/restaurant_admin/locations/{loc_id}/menus/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenu_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus" 
		///</summary>
		public static string IRestaurantAdminGetMenus = "/restaurant_admin/locations/{loc_id}/menus";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenu_Admin]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}" 
		///</summary>
		public static string IRestaurantAdminGetMenu = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus" 
		///</summary>
		public static string IRestaurantAdminAddMenu = "/restaurant_admin/locations/{loc_id}/menus";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateMenu = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/menus/{rmenu_id}/is_active/{is_active}" 
		///</summary>
		public static string IRestaurantAdminSetMenuActive = "/restaurant_admin/locations/menus/{rmenu_id}/is_active/{is_active}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/ids?category_only={category_only}" 
		///</summary>
		public static string IRestaurantAdminGetMenuTagIDs = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuTag]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags?category_only={category_only}" 
		///</summary>
		public static string IRestaurantAdminGetMenuTags = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuTag]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}" 
		///</summary>
		public static string IRestaurantAdminGetMenuTag = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags" 
		///</summary>
		public static string IRestaurantAdminAddMenuTag = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateTag = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}/is_active/{is_active}" 
		///</summary>
		public static string IRestaurantAdminSetTagActive = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}/is_active/{is_active}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifierGroupIDs = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifierGroups = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/menuitems/{rmenuitem_id}/modifiergroups" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifierGroupsByItem = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/menuitems/{rmenuitem_id}/modifiergroups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifierGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups" 
		///</summary>
		public static string IRestaurantAdminAddMenuModifierGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateMenuModifierGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{group_id}/menuitems/{rmenuitem_id}/modifiergroups" 
		///</summary>
		public static string IRestaurantAdminSetMenuItemModifierGroups = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{group_id}/menuitems/{rmenuitem_id}/modifiergroups";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}" 
		///</summary>
		public static string IRestaurantAdminDeactivateMenuModifierGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}/group/{modifiergroup_id}" 
		///</summary>
		public static string IRestaurantAdminDeactivateMenuSubModifierGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}/group/{modifiergroup_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifierIds = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuModifier_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifiers = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuModifier_Admin]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}" 
		///</summary>
		public static string IRestaurantAdminGetMenuModifier = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifier_group_id}/modifiers" 
		///</summary>
		public static string IRestaurantAdminAddMenuModifier = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifier_group_id}/modifiers";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateMenuModifier = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}/submodifiers/submodGroupids" 
		///</summary>
		public static string IRestaurantAdminSetMenuSubmodifiers = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}/submodifiers/submodGroupids";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}" 
		///</summary>
		public static string IRestaurantAdminDeactivateMenuModifier = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids" 
		///</summary>
		public static string IRestaurantAdminGetMenuGroupIds = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuGroup_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups" 
		///</summary>
		public static string IRestaurantAdminGetMenuGroups = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids" 
		///</summary>
		public static string IRestaurantAdminGetChildMenuGroupIds = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuGroup_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups" 
		///</summary>
		public static string IRestaurantAdminGetChildMenuGroups = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuGroup_Admin]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}" 
		///</summary>
		public static string IRestaurantAdminGetMenuGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups" 
		///</summary>
		public static string IRestaurantAdminAddMenuGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/parent/{parent_rmenugroup_id}" 
		///</summary>
		public static string IRestaurantAdminSetMenuGroupParent = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/parent/{parent_rmenugroup_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateMenuGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}" 
		///</summary>
		public static string IRestaurantAdminDeleteMenuGroup = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids" 
		///</summary>
		public static string IRestaurantAdminGetMenuItemIds = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuItem_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems" 
		///</summary>
		public static string IRestaurantAdminGetMenuItems = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids" 
		///</summary>
		public static string IRestaurantAdminGetChildMenuItemIds = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuItem_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}" 
		///</summary>
		public static string IRestaurantAdminGetChildMenuItems = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids" 
		///</summary>
		public static string IRestaurantAdminGetMenuItemIdsByTagIdList = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.RMenuItem_Admin]]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}" 
		///</summary>
		public static string IRestaurantAdminGetMenuItemsByTagIdList = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.RMenuItem_Admin]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}" 
		///</summary>
		public static string IRestaurantAdminGetMenuItem = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems" 
		///</summary>
		public static string IRestaurantAdminAddMenuItem = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}" 
		///</summary>
		public static string IRestaurantAdminUpdateMenuItem = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/parent/{rmenu_group_id}" 
		///</summary>
		public static string IRestaurantAdminSetMenuItemParent = "/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/parent/{rmenu_group_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/restaurant_business/locations/ids" 
		///</summary>
		public static string IRestaurantBusinessGetLocationIds = "/restaurant_business/locations/ids";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// string format: "/restaurant_business/orders/{loc_id}" 
		///</summary>
		public static string IRestaurantBusinessPlaceCustomOrder = "/restaurant_business/orders/{loc_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.BusinessScheduledService]]' object.
		/// string format: "/restaurant_business/orders/{loc_id}?for_delivery={for_delivery}&for_pickup={for_pickup}&open={open}&closed={closed}&start={start}&end={end}" 
		///</summary>
		public static string IRestaurantBusinessGetOrders = "/restaurant_business/orders/{loc_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.Job]]' object.
		/// string format: "/restaurant_business/orders/{loc_id}/related_jobs/by_id_list/{job_id_list}" 
		///</summary>
		public static string IRestaurantBusinessGetJobs = "/restaurant_business/orders/{loc_id}/related_jobs/by_id_list/{job_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Logistics.JobDetails]]' object.
		/// string format: "/restaurant_business/orders/{loc_id}/related_job_details/by_id_list/{job_id_list}" 
		///</summary>
		public static string IRestaurantBusinessGetJobDetails = "/restaurant_business/orders/{loc_id}/related_job_details/by_id_list/{job_id_list}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/restaurant_business/delivery/{loc_id}/availability/{zip}" 
		///</summary>
		public static string IRestaurantBusinessGetDeliveryAvailability = "/restaurant_business/delivery/{loc_id}/availability/{zip}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Decimal]' object.
		/// string format: "/restaurant_business/delivery/{loc_id}/extended_fee/lat/{lat}/long/{lon}" 
		///</summary>
		public static string IRestaurantBusinessGetExtendedFee = "/restaurant_business/delivery/{loc_id}/extended_fee/lat/{lat}/long/{lon}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.BusinessRevenueReportData]' object.
		/// string format: "/restaurant_business/revenue_report/{loc_id}?start={start}&end={end}" 
		///</summary>
		public static string IRestaurantBusinessGetRevenueReport = "/restaurant_business/revenue_report/{loc_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Get basic 'hello' from this server.
		/// string format: "/server_info/" 
		///</summary>
		public static string IServerInfoGetHello = "/server_info/";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Checks DB connectivity
		/// string format: "/server_info/dbok" 
		///</summary>
		public static string IServerInfoGetDatabaseOk = "/server_info/dbok";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Gets the code version running on this server
		/// string format: "/server_info/version" 
		///</summary>
		public static string IServerInfoGetCodeVersion = "/server_info/version";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Gets the codebase date running on this server
		/// string format: "/server_info/builddate" 
		///</summary>
		public static string IServerInfoGetBuildDate = "/server_info/builddate";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Gets the SHA-1 of the git commit used to build the code.
		/// string format: "/server_info/build_sc_commit" 
		///</summary>
		public static string IServerInfoGetBuildSourceControlCommit = "/server_info/build_sc_commit";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// Gets the build configuration used to build this code.
		/// string format: "/server_info/build_config" 
		///</summary>
		public static string IServerInfoGetBuildConfig = "/server_info/build_config";

		///<summary>
		/// 'GET' operation.
		/// returns a 'System.IO.Stream' object.
		/// Retrieves the automatic migration script after a code update.
		/// string format: "/server_info/migration_script" 
		///</summary>
		public static string IServerInfoGetMigrationCode = "/server_info/migration_script";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Places the server in 'time debug' mode, where the logic acts as though the date and time is as specified in the timestamp parameter.
		/// string format: "/server_info/time_debug/{enable_debug}" 
		///</summary>
		public static string IServerInfoSetTimeDebugMode = "/server_info/time_debug/{enable_debug}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.TimeStamp]' object.
		/// Gets the server's current time.
		/// string format: "/server_info/time_debug/server_time" 
		///</summary>
		public static string IServerInfoGetServerTime = "/server_info/time_debug/server_time";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.DateTime]' object.
		/// Gets the server's current local time .
		/// string format: "/server_info/time_debug/server_local_time" 
		///</summary>
		public static string IServerInfoGtServerLocalTime = "/server_info/time_debug/server_local_time";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ClientVersioningInfo]' object.
		/// string format: "/server_info/versioning/client?platform={platform}" 
		///</summary>
		public static string IServerInfoGetClientVersionMinimums = "/server_info/versioning/client";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.String]' object.
		/// string format: "/server_info/plivo_callback?data={data}" 
		///</summary>
		public static string IServerInfoDoPlivoCallback = "/server_info/plivo_callback";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ScheduledService]]' object.
		/// string format: "/scheduled_services/" 
		///</summary>
		public static string IScheduledServicesGetServices = "/scheduled_services/";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledService]' object.
		/// Gets a Scheduled Service Object
		/// string format: "/scheduled_services/{service_id}" 
		///</summary>
		public static string IScheduledServicesGetScheduledService = "/scheduled_services/{service_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledServiceMutability]' object.
		/// Returns 'true' if this scheduled service can be edited, as determined by the business logic
		/// string format: "/scheduled_services/{service_id}/can_edit" 
		///</summary>
		public static string IScheduledServicesIsServiceOpenToEdits = "/scheduled_services/{service_id}/can_edit";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ServiceHistoryEntry]]' object.
		/// string format: "/scheduled_services/{service_id}/history" 
		///</summary>
		public static string IScheduledServicesGetHistoryEntries = "/scheduled_services/{service_id}/history";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// string format: "/scheduled_services/{service_id}/history/ids" 
		///</summary>
		public static string IScheduledServicesGetHistoryEntryIDs = "/scheduled_services/{service_id}/history/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ServiceHistoryEntry]' object.
		/// string format: "/scheduled_services/{service_id}/history/{history_id}" 
		///</summary>
		public static string IScheduledServicesGetHistoryEntry = "/scheduled_services/{service_id}/history/{history_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Note]]' object.
		/// Gets a list of user notes for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/notes" 
		///</summary>
		public static string IScheduledServicesGetNotes = "/scheduled_services/{service_id}/notes";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of user note ids for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/notes/ids" 
		///</summary>
		public static string IScheduledServicesGetNoteIds = "/scheduled_services/{service_id}/notes/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Note]' object.
		/// Gets a user note object for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/notes/{note_id}" 
		///</summary>
		public static string IScheduledServicesGetNote = "/scheduled_services/{service_id}/notes/{note_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a user note for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/notes" 
		///</summary>
		public static string IScheduledServicesAddNote = "/scheduled_services/{service_id}/notes";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates a user note object for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/notes/{note_id}" 
		///</summary>
		public static string IScheduledServicesSetNote = "/scheduled_services/{service_id}/notes/{note_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes a user note object for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/notes/{note_id}" 
		///</summary>
		public static string IScheduledServicesDeleteNote = "/scheduled_services/{service_id}/notes/{note_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Note]]' object.
		/// Gets a list of admin notes for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/admin_notes" 
		///</summary>
		public static string IScheduledServicesGetAdminNotes = "/scheduled_services/{service_id}/admin_notes";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of admin note ids for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/admin_notes/ids" 
		///</summary>
		public static string IScheduledServicesGetAdminNoteIds = "/scheduled_services/{service_id}/admin_notes/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Note]' object.
		/// Gets an admin note object for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/admin_notes/{note_id}" 
		///</summary>
		public static string IScheduledServicesGetAdminNote = "/scheduled_services/{service_id}/admin_notes/{note_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds an admin note for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/admin_notes" 
		///</summary>
		public static string IScheduledServicesAddAdminNote = "/scheduled_services/{service_id}/admin_notes";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an admin note object for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/admin_notes/{note_id}" 
		///</summary>
		public static string IScheduledServicesSetAdminNote = "/scheduled_services/{service_id}/admin_notes/{note_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes an admin note object for the scheduled service object.
		/// string format: "/scheduled_services/{service_id}/admin_notes/{note_id}" 
		///</summary>
		public static string IScheduledServicesDeleteAdminNote = "/scheduled_services/{service_id}/admin_notes/{note_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.CalculatedServiceFee]' object.
		/// Calculates and gets a fee for for this service. This is a 'raw' service fee that does not take into account discounts and plan allowances.
		/// This will also be incomplete if some of the charges have not been added.
		/// string format: "/scheduled_services/{service_id}/service_fee" 
		///</summary>
		public static string IScheduledServicesGetServiceFee = "/scheduled_services/{service_id}/service_fee";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.CalculatedServiceFee]' object.
		/// Calculates and gets a fee for this service. This charge depends on account parameters, discounts and current allowances.
		/// This will also be incomplete if some of the charges have not been added.
		/// string format: "/scheduled_services/{service_id}/effective_fee" 
		///</summary>
		public static string IScheduledServicesGetEffectiveFee = "/scheduled_services/{service_id}/effective_fee";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Invoice]' object.
		/// Gets a Scheduled Service Invoice
		/// string format: "/scheduled_services/{service_id}/invoice" 
		///</summary>
		public static string IScheduledServicesGetScheduledServiceInvoice = "/scheduled_services/{service_id}/invoice";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Creates an invoice for this scheduled service. This call will fail if an Invoice already exists for this service.
		/// string format: "/scheduled_services/{service_id}/invoice" 
		///</summary>
		public static string IScheduledServicesCreateScheduledServiceInvoice = "/scheduled_services/{service_id}/invoice";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledServiceMutability]' object.
		/// string format: "/scheduled_services/{service_id}/is_editable" 
		///</summary>
		public static string IScheduledServicesIsServiceCustomerEditable = "/scheduled_services/{service_id}/is_editable";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/scheduled_services/{service_id}/review" 
		///</summary>
		public static string IScheduledServicesReviewService = "/scheduled_services/{service_id}/review";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/scheduled_services/{service_id}/review" 
		///</summary>
		public static string IScheduledServicesCancelReviewService = "/scheduled_services/{service_id}/review";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/scheduled_services/{service_id}/review" 
		///</summary>
		public static string IScheduledServicesIsServiceInReview = "/scheduled_services/{service_id}/review";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/scheduled_services/{service_id}/approve" 
		///</summary>
		public static string IScheduledServicesApproveService = "/scheduled_services/{service_id}/approve";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// string format: "/scheduled_services/{service_id}/reject" 
		///</summary>
		public static string IScheduledServicesRejectService = "/scheduled_services/{service_id}/reject";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Nullable`1[System.Boolean]]' object.
		/// string format: "/scheduled_services/{service_id}/is_approved" 
		///</summary>
		public static string IScheduledServicesHasServiceBeenApproved = "/scheduled_services/{service_id}/is_approved";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Service]]' object.
		/// Gets a list of available service objects based on the passed in list of ID's
		/// string format: "/services/" 
		///</summary>
		public static string IServicesGetServices = "/services/";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Service]' object.
		/// Gets a service by ID
		/// string format: "/services/{service_id}" 
		///</summary>
		public static string IServicesGetService = "/services/{service_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.TaxRate]]' object.
		/// string format: "/services/{service_id}/tax_rates" 
		///</summary>
		public static string IServicesGetTaxRates = "/services/{service_id}/tax_rates";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of ID's for available services
		/// string format: "/services/availability/ids?zip={zip}&start={start}&end={end}" 
		///</summary>
		public static string IServicesGetAvailableServiceIDs = "/services/availability/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Service]]' object.
		/// Gets a list of Service objects for available services
		/// string format: "/services/availability?zip={zip}&start={start}&end={end}" 
		///</summary>
		public static string IServicesGetAvailableServices = "/services/availability";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Service]]' object.
		/// Gets a list of Service objects for available services for a particular user, with subscription discounts applied
		/// string format: "/services/availability/{user_id}?start={start}&end={end}&zip={zip}" 
		///</summary>
		public static string IServicesGetAvailableServicesForUser = "/services/availability/{user_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.SimpleDate]]' object.
		/// Gets a list of dates of operation for the given service.
		/// string format: "/services/{service_id}/dates?start={start}&end={end}" 
		///</summary>
		public static string IServicesGetAvailableDatesForService = "/services/{service_id}/dates";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.State]]' object.
		/// string format: "/services/cityservices" 
		///</summary>
		public static string IServicesGetCityServices = "/services/cityservices";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]]' object.
		/// string format: "/services/grouped_destinations/by_zip/{zip}" 
		///</summary>
		public static string IServicesFindDestinationsByZip = "/services/grouped_destinations/by_zip/{zip}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]]' object.
		/// string format: "/services/grouped_destinations/by_service_id/{service_id}" 
		///</summary>
		public static string IServicesFindDestinationsByService = "/services/grouped_destinations/by_service_id/{service_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]]' object.
		/// string format: "/services/grouped_destinations/by_location/{lat}/long/{lon}" 
		///</summary>
		public static string IServicesFindDestinationsByLocation = "/services/grouped_destinations/by_location/{lat}/long/{lon}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]' object.
		/// string format: "/services/grouped_destinations/by_name/{name}" 
		///</summary>
		public static string IServicesGetDestinationByName = "/services/grouped_destinations/by_name/{name}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]' object.
		/// string format: "/services/grouped_destinations/{dest_id}" 
		///</summary>
		public static string IServicesGetDestinationByID = "/services/grouped_destinations/{dest_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.GroupedDeliveryDestination]]' object.
		/// Gets a list of available destination objects based on the passed in list of ID's
		/// string format: "/services/grouped_destinations/by_id_list" 
		///</summary>
		public static string IServicesGetDestinations = "/services/grouped_destinations/by_id_list";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Decimal]' object.
		/// string format: "/services/fees/by_location/{lat}/{lon}/{service_id}/{loc_id}/{user_id}/{zip_code}" 
		///</summary>
		public static string IServicesGetExtendedRestaurantDeliveryFee = "/services/fees/by_location/{lat}/{lon}/{service_id}/{loc_id}/{user_id}/{zip_code}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ShoppingList]' object.
		/// Gets a shopping list
		/// string format: "/shopping_lists/{shopping_list_id}" 
		///</summary>
		public static string IShoppingListsGetShoppingList = "/shopping_lists/{shopping_list_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledServiceMutability]' object.
		/// Returns 'true' if this list can be edited, as determined by the business logic
		/// string format: "/shopping_lists/{shopping_list_id}/can_edit" 
		///</summary>
		public static string IShoppingListsIsListOpenToEdits = "/shopping_lists/{shopping_list_id}/can_edit";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Sets new data for an existing shopping list
		/// string format: "/shopping_lists/{shopping_list_id}" 
		///</summary>
		public static string IShoppingListsSetShoppingList = "/shopping_lists/{shopping_list_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Deletes a shopping list
		/// string format: "/shopping_lists/{shopping_list_id}" 
		///</summary>
		public static string IShoppingListsDeleteShoppingList = "/shopping_lists/{shopping_list_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Creates a pseudo-deep copy of an existing shopping list, potentially preserving Products. (pass in a boolean value)
		/// string format: "/shopping_lists/{shopping_list_id}/clone/{clone_products}" 
		///</summary>
		public static string IShoppingListsCloneShoppingList = "/shopping_lists/{shopping_list_id}/clone/{clone_products}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a List of Shopping list item ids for the shopping list.
		/// string format: "/shopping_lists/{shopping_list_id}/items/ids" 
		///</summary>
		public static string IShoppingListsGetShoppingListItemsIds = "/shopping_lists/{shopping_list_id}/items/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ShoppingListItem]]' object.
		/// Gets a List of Shopping list items for the shopping list.
		/// string format: "/shopping_lists/{shopping_list_id}/items" 
		///</summary>
		public static string IShoppingListsGetShoppingListItems = "/shopping_lists/{shopping_list_id}/items";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Replaces the entire list of Shopping list items for the shopping list.
		/// string format: "/shopping_lists/{shopping_list_id}/items" 
		///</summary>
		public static string IShoppingListsSetShoppingListItems = "/shopping_lists/{shopping_list_id}/items";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ShoppingListItem]' object.
		/// Gets a Shopping list item for the shopping list.
		/// string format: "/shopping_lists/{shopping_list_id}/items/{item_id}" 
		///</summary>
		public static string IShoppingListsGetShoppingListItem = "/shopping_lists/{shopping_list_id}/items/{item_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new item to the shopping list, returning the Id of the new item
		/// string format: "/shopping_lists/{shopping_list_id}/items" 
		///</summary>
		public static string IShoppingListsAddShoppingListItem = "/shopping_lists/{shopping_list_id}/items";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ShoppingListItem]' object.
		/// Updates an item in the shopping list, returning the updated item. NOTE: if you populate the 'Product' filed, a new product entry will be created.
		/// To re-use the previous Product, set the field to 'null'! You cannot alter 'Product' entries with this API, only create altered new ones.
		/// string format: "/shopping_lists/{shopping_list_id}/items/{item_id}" 
		///</summary>
		public static string IShoppingListsSetShoppingListItem = "/shopping_lists/{shopping_list_id}/items/{item_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Adds a new item to the shopping list.
		/// string format: "/shopping_lists/{shopping_list_id}/items/{item_id}" 
		///</summary>
		public static string IShoppingListsDeleteShoppingListItem = "/shopping_lists/{shopping_list_id}/items/{item_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ShoppingStore]]' object.
		/// Gets a list of stores servicing this zip code for shopping.
		/// string format: "/shopping_lists/stores/by_zip/{zip_code}" 
		///</summary>
		public static string IShoppingListsGetStores = "/shopping_lists/stores/by_zip/{zip_code}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ShoppingStore]' object.
		/// Gets a list of stores servicing this zip code for shopping.
		/// string format: "/shopping_lists/stores/{store_id}" 
		///</summary>
		public static string IShoppingListsGetStore = "/shopping_lists/stores/{store_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.SubscriptionPlan]]' object.
		/// Gets a list of subscription plans
		/// string format: "/subscriptions/plans" 
		///</summary>
		public static string ISubscriptionsGetPlans = "/subscriptions/plans";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of subscription plan IDs
		/// string format: "/subscriptions/plans/ids" 
		///</summary>
		public static string ISubscriptionsGetPlanIDs = "/subscriptions/plans/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.SubscriptionPlan]' object.
		/// Gets a subscription plan
		/// string format: "/subscriptions/plans/{plan_id}" 
		///</summary>
		public static string ISubscriptionsGetPlan = "/subscriptions/plans/{plan_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.String]]' object.
		/// Gets a list of descriptions for plan items
		/// string format: "/subscriptions/plans/{plan_id}/item_descriptions" 
		///</summary>
		public static string ISubscriptionsGetPlanItemDescriptions = "/subscriptions/plans/{plan_id}/item_descriptions";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.User]' object.
		/// Gets a user structure for the given user id (not username!)
		/// string format: "/users/{id}" 
		///</summary>
		public static string IUsersGetUser = "/users/{id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Updates an existing user's data, returns 'true' if succeeded.
		/// string format: "/users/" 
		///</summary>
		public static string IUsersSetUser = "/users/";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.User]' object.
		/// Gets a user structure for the currently logged in user
		/// string format: "/users/current" 
		///</summary>
		public static string IUsersGetCurrentUser = "/users/current";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ExtendedAddress]]' object.
		/// Gets a list of user address structures
		/// string format: "/users/{user_id}/service_addresses" 
		///</summary>
		public static string IUsersGetServiceAddresses = "/users/{user_id}/service_addresses";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.CustomerUserLevel]' object.
		/// Gets a customer user's role level. This will return 'Other' if called on a non-customer user.
		/// string format: "/users/{user_id}/customer_level" 
		///</summary>
		public static string IUsersGetCustomerLevel = "/users/{user_id}/customer_level";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Sets a customer user's role level. This will fail if the user is not already a customer user.
		/// string format: "/users/{user_id}/customer_level" 
		///</summary>
		public static string IUsersSetCustomerLevel = "/users/{user_id}/customer_level";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Enables the specified user, returning the prior enabled state
		/// string format: "/users/{user_id}/is_enbled" 
		///</summary>
		public static string IUsersEnableUser = "/users/{user_id}/is_enbled";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Gets the 'enabled' state of a user. Note that the account must also be enabled for the user to log in
		/// string format: "/users/{user_id}/is_enbled" 
		///</summary>
		public static string IUsersGetUserEnabled = "/users/{user_id}/is_enbled";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Enables the specified user, returning the enabled state
		/// string format: "/users/{user_id}/is_locked_out" 
		///</summary>
		public static string IUsersLockoutUser = "/users/{user_id}/is_locked_out";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Gets the 'enabled' state of a user. Note that the account must also be enabled for the user to log in
		/// string format: "/users/{user_id}/is_locked_out" 
		///</summary>
		public static string IUsersGetUserLockedOut = "/users/{user_id}/is_locked_out";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.MessageIDList]' object.
		/// Gets a list of messages associated with the user, either sent or received.
		/// string format: "/users/{user_id}/messages" 
		///</summary>
		public static string IUsersGetMessages = "/users/{user_id}/messages";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.Message]' object.
		/// Gets a specific message, either sent or received.
		/// string format: "/users/{user_id}/messages/{msg_id}" 
		///</summary>
		public static string IUsersGetMessage = "/users/{user_id}/messages/{msg_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Sends a new message on behalf of this user, with message structure in the post body
		/// string format: "/users/{user_id}/messages/sent" 
		///</summary>
		public static string IUsersPostNewMessage = "/users/{user_id}/messages/sent";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Marks or unmarks a message as read
		/// string format: "/users/{user_id}/messages/{message_id}/is_read" 
		///</summary>
		public static string IUsersMarkMessageRead = "/users/{user_id}/messages/{message_id}/is_read";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.Message]]' object.
		/// Gets a list of received messages for this user., oldest first, unless reverse order is specified.
		/// string format: "/users/{user_id}/message/received?unread_only={unread_only}&page_size={page_size}&page_num={page_num}&reverse_order={reverse_order}" 
		///</summary>
		public static string IUsersGetReceivedMessages = "/users/{user_id}/message/received";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Gets a count of unread received messages for this user.
		/// string format: "/users/{user_id}/message/received/count" 
		///</summary>
		public static string IUsersGetUnreadCount = "/users/{user_id}/message/received/count";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Schedules a new service request, returns the ID of the request
		/// string format: "/users/{user_id}/scheduled_services" 
		///</summary>
		public static string IUsersAddScheduledService = "/users/{user_id}/scheduled_services";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Makes modifications to a scheduled request, returning 'true' if successful.
		/// string format: "/users/{user_id}/scheduled_services/{service_id}" 
		///</summary>
		public static string IUsersUpdateScheduledService = "/users/{user_id}/scheduled_services/{service_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.ScheduledService]]' object.
		/// Gets a list of scheduled service IDs for this user
		/// string format: "/users/{user_id}/scheduled_services?service_states={service_states}&only_attention_needed={only_attention_needed}&start_date={start_date}&end_date={end_date}&page_size={page_size}&page_num={page_num}&reverse_order={reverse_order}" 
		///</summary>
		public static string IUsersGetScheduledServices = "/users/{user_id}/scheduled_services";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of scheduled service IDs for this user
		/// string format: "/users/{user_id}/scheduled_services/ids?service_states={service_states}&only_attention_needed={only_attention_needed}&start_date={start_date}&end_date={end_date}&page_size={page_size}&page_num={page_num}&reverse_order={reverse_order}" 
		///</summary>
		public static string IUsersGetScheduledServicesIds = "/users/{user_id}/scheduled_services/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.ScheduledService]' object.
		/// Gets a scheduled service by id
		/// string format: "/users/{user_id}/scheduled_services/{service_id}" 
		///</summary>
		public static string IUsersGetScheduledService = "/users/{user_id}/scheduled_services/{service_id}";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Cancels a scheduled service, this just sets it's status to "canceled". The service can only be canceled in certain service status states
		/// string format: "/users/{user_id}/scheduled_services/{service_id}/cancel" 
		///</summary>
		public static string IUsersCancelScheduledService = "/users/{user_id}/scheduled_services/{service_id}/cancel";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new phone number, returns the id
		/// string format: "/users/{user_id}/phone_numbers" 
		///</summary>
		public static string IUsersAddPhoneNumber = "/users/{user_id}/phone_numbers";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PhoneNumber]' object.
		/// Gets a phone number by id
		/// string format: "/users/{user_id}/phone_numbers/{phone_number_id}" 
		///</summary>
		public static string IUsersGetPhoneNumber = "/users/{user_id}/phone_numbers/{phone_number_id}";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.PhoneNumber]' object.
		/// Updates a phone number by id
		/// string format: "/users/{user_id}/phone_numbers/{phone_number_id}" 
		///</summary>
		public static string IUsersSetPhoneNumber = "/users/{user_id}/phone_numbers/{phone_number_id}";

		///<summary>
		/// 'DELETE' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// deletes a phone number by id
		/// string format: "/users/{user_id}/phone_numbers/{phone_number_id}" 
		///</summary>
		public static string IUsersDeletePhoneNumber = "/users/{user_id}/phone_numbers/{phone_number_id}";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[ColonyConcierge.APIData.Data.PhoneNumber]]' object.
		/// Gets a list of all phone numbers for the user
		/// string format: "/users/{user_id}/phone_numbers" 
		///</summary>
		public static string IUsersGetPhoneNumbers = "/users/{user_id}/phone_numbers";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of all phone numbers ids for the user
		/// string format: "/users/{user_id}/phone_numbers/ids" 
		///</summary>
		public static string IUsersGetPhoneNumberIDs = "/users/{user_id}/phone_numbers/ids";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Collections.Generic.List`1[System.Int32]]' object.
		/// Gets a list of all shopping list ids for the user
		/// string format: "/users/{user_id}/shopping_lists/ids" 
		///</summary>
		public static string IUsersGetShoppingListsIds = "/users/{user_id}/shopping_lists/ids";

		///<summary>
		/// 'POST' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Int32]' object.
		/// Adds a new shopping list for the user, and returns its ID
		/// string format: "/users/{user_id}/shopping_lists" 
		///</summary>
		public static string IUsersAddShoppingList = "/users/{user_id}/shopping_lists";

		///<summary>
		/// 'GET' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[ColonyConcierge.APIData.Data.BinaryFile]' object.
		/// Adds a new shopping list for the user, and returns its ID
		/// string format: "/users/{user_id}/invoice/{invoice_id}/printable_recceipt" 
		///</summary>
		public static string IUsersGetInvoicePrintableReceipt = "/users/{user_id}/invoice/{invoice_id}/printable_recceipt";

		///<summary>
		/// 'PUT' operation.
		/// returns a 'ColonyConcierge.APIData.Data.DataResult`1[System.Boolean]' object.
		/// Adds a device token for a user
		/// string format: "/users/{user_id}/set_device_token/{device_type}/{token}?unique_device_id={unique_device_id}" 
		///</summary>
		public static string IUsersAddDeviceToken = "/users/{user_id}/set_device_token/{device_type}/{token}";

	}
}
namespace ColonyConcierge.Client
{
	public partial class APIs
	{
		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IAccounts">CC_API_IAccounts</see> object.
		///</summary>
		public DataSources.CC_API_IAccounts IAccounts
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IAccounts>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IAdmin">CC_API_IAdmin</see> object.
		///</summary>
		public DataSources.CC_API_IAdmin IAdmin
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IAdmin>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IAdminReports">CC_API_IAdminReports</see> object.
		///</summary>
		public DataSources.CC_API_IAdminReports IAdminReports
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IAdminReports>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IBatchedTasks">CC_API_IBatchedTasks</see> object.
		///</summary>
		public DataSources.CC_API_IBatchedTasks IBatchedTasks
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IBatchedTasks>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IContractorAdmin">CC_API_IContractorAdmin</see> object.
		///</summary>
		public DataSources.CC_API_IContractorAdmin IContractorAdmin
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IContractorAdmin>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_ICoupons">CC_API_ICoupons</see> object.
		///</summary>
		public DataSources.CC_API_ICoupons ICoupons
		{
			get
			{
				 return GetAPI<DataSources.CC_API_ICoupons>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_ICouponsAdmin">CC_API_ICouponsAdmin</see> object.
		///</summary>
		public DataSources.CC_API_ICouponsAdmin ICouponsAdmin
		{
			get
			{
				 return GetAPI<DataSources.CC_API_ICouponsAdmin>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_ILogins">CC_API_ILogins</see> object.
		///</summary>
		public DataSources.CC_API_ILogins ILogins
		{
			get
			{
				 return GetAPI<DataSources.CC_API_ILogins>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_ILogistics">CC_API_ILogistics</see> object.
		///</summary>
		public DataSources.CC_API_ILogistics ILogistics
		{
			get
			{
				 return GetAPI<DataSources.CC_API_ILogistics>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_ILogisticsAdmin">CC_API_ILogisticsAdmin</see> object.
		///</summary>
		public DataSources.CC_API_ILogisticsAdmin ILogisticsAdmin
		{
			get
			{
				 return GetAPI<DataSources.CC_API_ILogisticsAdmin>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_INews">CC_API_INews</see> object.
		///</summary>
		public DataSources.CC_API_INews INews
		{
			get
			{
				 return GetAPI<DataSources.CC_API_INews>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IRestaurant">CC_API_IRestaurant</see> object.
		///</summary>
		public DataSources.CC_API_IRestaurant IRestaurant
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IRestaurant>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IRestaurantAdmin">CC_API_IRestaurantAdmin</see> object.
		///</summary>
		public DataSources.CC_API_IRestaurantAdmin IRestaurantAdmin
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IRestaurantAdmin>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IRestaurantBusiness">CC_API_IRestaurantBusiness</see> object.
		///</summary>
		public DataSources.CC_API_IRestaurantBusiness IRestaurantBusiness
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IRestaurantBusiness>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IServerInfo">CC_API_IServerInfo</see> object.
		///</summary>
		public DataSources.CC_API_IServerInfo IServerInfo
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IServerInfo>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IScheduledServices">CC_API_IScheduledServices</see> object.
		///</summary>
		public DataSources.CC_API_IScheduledServices IScheduledServices
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IScheduledServices>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IServices">CC_API_IServices</see> object.
		///</summary>
		public DataSources.CC_API_IServices IServices
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IServices>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IShoppingLists">CC_API_IShoppingLists</see> object.
		///</summary>
		public DataSources.CC_API_IShoppingLists IShoppingLists
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IShoppingLists>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_ISubscriptions">CC_API_ISubscriptions</see> object.
		///</summary>
		public DataSources.CC_API_ISubscriptions ISubscriptions
		{
			get
			{
				 return GetAPI<DataSources.CC_API_ISubscriptions>();
			}
		}

		///<summary>
		/// 'Returns a cached <see cref="DataSources.CC_API_IUsers">CC_API_IUsers</see> object.
		///</summary>
		public DataSources.CC_API_IUsers IUsers
		{
			get
			{
				 return GetAPI<DataSources.CC_API_IUsers>();
			}
		}

	}
}
namespace ColonyConcierge.Client.DataSources
{
///<summary>
/// Wrapper data object for the 'IAccounts' API server interface
///</summary>
public class CC_API_IAccounts : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IAccounts() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IAccounts(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Gets an account structure for the given account id
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Account' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Account GetAccount (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetAccount"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Account>("/accounts/{account_id}")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAccount"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Account> GetAccount_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetAccount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Account>("/accounts/{account_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all users for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.User&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/users</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAccountUsers' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.User> GetUsers (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetUsers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/accounts/{account_id}/users")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUsers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>> GetUsers_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetUsers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/accounts/{account_id}/users",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all users for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/users/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAccountUsers' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetUserIds (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetUserIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/users/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUserIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetUserIds_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetUserIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/users/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Get
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.User&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/pending_users</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageAccounts' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.User> GetPendingUsers (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPendingUsers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/accounts/{account_id}/pending_users")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPendingUsers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>> GetPendingUsers_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPendingUsers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/accounts/{account_id}/pending_users",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Get
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/pending_users/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageAccounts' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPendingUserIds (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPendingUserIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/pending_users/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPendingUserIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPendingUserIds_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPendingUserIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/pending_users/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new user *with* a new main account to go along with it.
	///</summary>
	///<param name="registration"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.LoginResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.LoginResult RegisterNewAccount (ColonyConcierge.APIData.Data.RegistrationEntry registration )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.RegisterNewAccount"))
		{
			return _connector.Post<ColonyConcierge.APIData.Data.LoginResult>("/accounts/")
				.Parameter(registration).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="RegisterNewAccount"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.LoginResult> RegisterNewAccount_Async (ColonyConcierge.APIData.Data.RegistrationEntry registration )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.RegisterNewAccount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<ColonyConcierge.APIData.Data.LoginResult>("/accounts/",
				builder =>
				{
					builder
					.Parameter(registration);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Causes a new verification email to be sent to the specified username or email address
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/send_verification/{username_or_email}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ResendVerificationEmail (object username_or_email )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.ResendVerificationEmail"))
		{
			return _connector.Post<Boolean>("/accounts/send_verification/{username_or_email}")
				.Parameter("username_or_email", username_or_email);
		}
	}
	///<summary>
	///Async version of <see cref="ResendVerificationEmail"/>
	///</summary>
	public async Task<Boolean> ResendVerificationEmail_Async (object username_or_email )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.ResendVerificationEmail")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/accounts/send_verification/{username_or_email}",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes the account with the test user ID. Note this function is not for production, it will only work on test accounts invoked form a logged in test account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires root permissions for the caller</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteAccount (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeleteAccount"))
		{
			return _connector.Delete<Boolean>("/accounts/{account_id}")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteAccount"/>
	///</summary>
	public async Task<Boolean> DeleteAccount_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeleteAccount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/accounts/{account_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Requests Account cancelation. This does not take effect until the current subscription has expired.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/cancel_account</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the caller to be the primary account user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean RequestAccountCancelation (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.RequestAccountCancelation"))
		{
			return _connector.Post<Boolean>("/accounts/{account_id}/cancel_account")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="RequestAccountCancelation"/>
	///</summary>
	public async Task<Boolean> RequestAccountCancelation_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.RequestAccountCancelation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/accounts/{account_id}/cancel_account",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Queries if this account has been marked for cancelation as the end of the billing cycle
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/cancel_account</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the caller to be the primary account user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean GetIsAccountCancelationPending (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetIsAccountCancelationPending"))
		{
			return _connector.Get<Boolean>("/accounts/{account_id}/cancel_account")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetIsAccountCancelationPending"/>
	///</summary>
	public async Task<Boolean> GetIsAccountCancelationPending_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetIsAccountCancelationPending")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/accounts/{account_id}/cancel_account",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Requests Account  plan change. If transitioning from an unpaid to a paid subscription, the effect is immediate. Otherwise, the change will take effect when the currentl plan expires. If there are any existing pending changes they will be superseded
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="plan_id"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/pending_plan_id</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the caller to be the primary account user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean RequestPlanChange (object account_id, Int32 plan_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.RequestPlanChange"))
		{
			return _connector.Post<Boolean>("/accounts/{account_id}/pending_plan_id")
				.Parameter("account_id", account_id)
				.Parameter(plan_id);
		}
	}
	///<summary>
	///Async version of <see cref="RequestPlanChange"/>
	///</summary>
	public async Task<Boolean> RequestPlanChange_Async (object account_id, Int32 plan_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.RequestPlanChange")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/accounts/{account_id}/pending_plan_id",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter(plan_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Queries if this account has been marked for plan change at the end of the plan expiration
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/pending_plan_id</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the caller to be the primary account user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean GetIsPlanChangePending (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetIsPlanChangePending"))
		{
			return _connector.Get<Boolean>("/accounts/{account_id}/pending_plan_id")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetIsPlanChangePending"/>
	///</summary>
	public async Task<Boolean> GetIsPlanChangePending_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetIsPlanChangePending")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/accounts/{account_id}/pending_plan_id",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of invoice IDs for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/invoices/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetInvoiceIds (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetInvoiceIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/invoices/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetInvoiceIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetInvoiceIds_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetInvoiceIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/invoices/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a invoice by ID for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Invoice' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/invoices/{invoice_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'ChargeInvoice' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Invoice GetInvoice (object account_id, object invoice_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetInvoice"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Invoice>("/accounts/{account_id}/invoices/{invoice_id}")
				.Parameter("account_id", account_id)
				.Parameter("invoice_id", invoice_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetInvoice"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Invoice> GetInvoice_Async (object account_id, object invoice_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Invoice>("/accounts/{account_id}/invoices/{invoice_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("invoice_id", invoice_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of payment IDs for the specified account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPaymentIds (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payments/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPaymentIds_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payments/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of payment objects for the specified account.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Payment&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Payment> GetPayments (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPayments"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Payment>>("/accounts/{account_id}/payments")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPayments"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Payment>> GetPayments_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPayments")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Payment>>("/accounts/{account_id}/payments",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a payment object for the specified account and payment ID
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Payment' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments/{payment_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Payment GetPayment (object account_id, object payment_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPayment"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Payment>("/accounts/{account_id}/payments/{payment_id}")
				.Parameter("account_id", account_id)
				.Parameter("payment_id", payment_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPayment"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Payment> GetPayment_Async (object account_id, object payment_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPayment")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Payment>("/accounts/{account_id}/payments/{payment_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_id", payment_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of user <see cref="T:ColonyConcierge.APIData.Data.Note" /> objects representing user notes for the payment.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Note&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments/{payment_id}/notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note> GetPaymentNotes (object account_id, object payment_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentNotes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/accounts/{account_id}/payments/{payment_id}/notes")
				.Parameter("account_id", account_id)
				.Parameter("payment_id", payment_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentNotes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>> GetPaymentNotes_Async (object account_id, object payment_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentNotes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/accounts/{account_id}/payments/{payment_id}/notes",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_id", payment_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of user <see cref="T:ColonyConcierge.APIData.Data.Note" /> object ids for the specified account and payment.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments/{payment_id}/notes/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPaymentNoteIds (object account_id, object payment_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentNoteIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payments/{payment_id}/notes/ids")
				.Parameter("account_id", account_id)
				.Parameter("payment_id", payment_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentNoteIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPaymentNoteIds_Async (object account_id, object payment_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentNoteIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payments/{payment_id}/notes/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_id", payment_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a user <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment and note id.
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Note' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Note GetPaymentNote (object payment_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentNote"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Note>("/accounts/payments/{payment_id}/notes/{note_id}")
				.Parameter("payment_id", payment_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentNote"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Note> GetPaymentNote_Async (object payment_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Note>("/accounts/payments/{payment_id}/notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	///Adds a user <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment.
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///The ID of the new note.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddPaymentNote (object payment_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddPaymentNote"))
		{
			return _connector.Post<Int32>("/accounts/payments/{payment_id}/notes")
				.Parameter("payment_id", payment_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="AddPaymentNote"/>
	///</summary>
	public async Task<Int32> AddPaymentNote_Async (object payment_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddPaymentNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/accounts/payments/{payment_id}/notes",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	///Updates a user <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment ID and note ID
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///true, if successful
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetPaymentNote (object payment_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetPaymentNote"))
		{
			return _connector.Put<Boolean>("/accounts/payments/{payment_id}/notes/{note_id}")
				.Parameter("payment_id", payment_id)
				.Parameter("note_id", note_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="SetPaymentNote"/>
	///</summary>
	public async Task<Boolean> SetPaymentNote_Async (object payment_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetPaymentNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/accounts/payments/{payment_id}/notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter("note_id", note_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	///Deletes a user <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment ID and note ID
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeletePaymentNote (object payment_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeletePaymentNote"))
		{
			return _connector.Delete<Boolean>("/accounts/payments/{payment_id}/notes/{note_id}")
				.Parameter("payment_id", payment_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeletePaymentNote"/>
	///</summary>
	public async Task<Boolean> DeletePaymentNote_Async (object payment_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeletePaymentNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/accounts/payments/{payment_id}/notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of admin <see cref="T:ColonyConcierge.APIData.Data.Note" /> objects representing user notes for the payment.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Note&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments/{payment_id}/admin_notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note> GetPaymentAdminNotes (object account_id, object payment_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentAdminNotes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/accounts/{account_id}/payments/{payment_id}/admin_notes")
				.Parameter("account_id", account_id)
				.Parameter("payment_id", payment_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentAdminNotes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>> GetPaymentAdminNotes_Async (object account_id, object payment_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentAdminNotes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/accounts/{account_id}/payments/{payment_id}/admin_notes",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_id", payment_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of admin <see cref="T:ColonyConcierge.APIData.Data.Note" /> object ids for the specified account and payment.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payments/{payment_id}/admin_notes/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPaymentAdminNoteIds (object account_id, object payment_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentAdminNoteIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payments/{payment_id}/admin_notes/ids")
				.Parameter("account_id", account_id)
				.Parameter("payment_id", payment_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentAdminNoteIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPaymentAdminNoteIds_Async (object account_id, object payment_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentAdminNoteIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payments/{payment_id}/admin_notes/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_id", payment_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets an admin <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment and note id.
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Note' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/admin_notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Note GetPaymentAdminNote (object payment_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentAdminNote"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Note>("/accounts/payments/{payment_id}/admin_notes/{note_id}")
				.Parameter("payment_id", payment_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentAdminNote"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Note> GetPaymentAdminNote_Async (object payment_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Note>("/accounts/payments/{payment_id}/admin_notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	///Adds an admin <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment.
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///The ID of the new note.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/admin_notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddPaymentAdminNote (object payment_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddPaymentAdminNote"))
		{
			return _connector.Post<Int32>("/accounts/payments/{payment_id}/admin_notes")
				.Parameter("payment_id", payment_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="AddPaymentAdminNote"/>
	///</summary>
	public async Task<Int32> AddPaymentAdminNote_Async (object payment_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddPaymentAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/accounts/payments/{payment_id}/admin_notes",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	///Updates an admin <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment ID and note ID
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///true, if successful
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/admin_notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetPaymentAdminNote (object payment_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetPaymentAdminNote"))
		{
			return _connector.Put<Boolean>("/accounts/payments/{payment_id}/admin_notes/{note_id}")
				.Parameter("payment_id", payment_id)
				.Parameter("note_id", note_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="SetPaymentAdminNote"/>
	///</summary>
	public async Task<Boolean> SetPaymentAdminNote_Async (object payment_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetPaymentAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/accounts/payments/{payment_id}/admin_notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter("note_id", note_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	///Deletes an admin <see cref="T:ColonyConcierge.APIData.Data.Note" /> object for the specified payment ID and note ID
	///</summary>
	///<param name="payment_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payments/{payment_id}/admin_notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeletePaymentAdminNote (object payment_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeletePaymentAdminNote"))
		{
			return _connector.Delete<Boolean>("/accounts/payments/{payment_id}/admin_notes/{note_id}")
				.Parameter("payment_id", payment_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeletePaymentAdminNote"/>
	///</summary>
	public async Task<Boolean> DeletePaymentAdminNote_Async (object payment_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeletePaymentAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/accounts/payments/{payment_id}/admin_notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("payment_id", payment_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of service address IDs for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/addresses/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetServiceAddressIDs (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceAddressIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/addresses/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceAddressIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetServiceAddressIDs_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceAddressIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/addresses/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of service addresses for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ExtendedAddress&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/addresses</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress> GetServiceAddresses (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceAddresses"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress>>("/accounts/{account_id}/addresses")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceAddresses"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress>> GetServiceAddresses_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceAddresses")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress>>("/accounts/{account_id}/addresses",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a service address by ID for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="address_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ExtendedAddress' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/addresses/{address_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ExtendedAddress GetServiceAddress (object account_id, object address_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceAddress"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ExtendedAddress>("/accounts/{account_id}/addresses/{address_id}")
				.Parameter("account_id", account_id)
				.Parameter("address_id", address_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceAddress"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ExtendedAddress> GetServiceAddress_Async (object account_id, object address_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceAddress")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ExtendedAddress>("/accounts/{account_id}/addresses/{address_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("address_id", address_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a service address, returns an ID
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="address"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/addresses</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageAccounts' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddServiceAddress (object account_id, ColonyConcierge.APIData.Data.ExtendedAddress address )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddServiceAddress"))
		{
			return _connector.Post<Int32>("/accounts/{account_id}/addresses")
				.Parameter("account_id", account_id)
				.Parameter(address);
		}
	}
	///<summary>
	///Async version of <see cref="AddServiceAddress"/>
	///</summary>
	public async Task<Int32> AddServiceAddress_Async (object account_id, ColonyConcierge.APIData.Data.ExtendedAddress address )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddServiceAddress")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/accounts/{account_id}/addresses",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter(address);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates a service address by ID for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="address_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="address"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ExtendedAddress' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/addresses/{address_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageAccounts' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ExtendedAddress SetServiceAddress (object account_id, object address_id, ColonyConcierge.APIData.Data.ExtendedAddress address )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetServiceAddress"))
		{
			return _connector.Put<ColonyConcierge.APIData.Data.ExtendedAddress>("/accounts/{account_id}/addresses/{address_id}")
				.Parameter("account_id", account_id)
				.Parameter("address_id", address_id)
				.Parameter(address);
		}
	}
	///<summary>
	///Async version of <see cref="SetServiceAddress"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ExtendedAddress> SetServiceAddress_Async (object account_id, object address_id, ColonyConcierge.APIData.Data.ExtendedAddress address )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetServiceAddress")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<ColonyConcierge.APIData.Data.ExtendedAddress>("/accounts/{account_id}/addresses/{address_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("address_id", address_id)
					.Parameter(address);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes a service address by ID for this account (will fail if this is the only service address for the account)
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="address_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/addresses/{address_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageAccounts' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteServiceAddress (object account_id, object address_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeleteServiceAddress"))
		{
			return _connector.Delete<Boolean>("/accounts/{account_id}/addresses/{address_id}")
				.Parameter("account_id", account_id)
				.Parameter("address_id", address_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteServiceAddress"/>
	///</summary>
	public async Task<Boolean> DeleteServiceAddress_Async (object account_id, object address_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeleteServiceAddress")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/accounts/{account_id}/addresses/{address_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("address_id", address_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the default shopping preferences for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ShoppingPreference' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/shopping_preference</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ShoppingPreference GetShoppingPreference (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetShoppingPreference"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ShoppingPreference>("/accounts/{account_id}/shopping_preference")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetShoppingPreference"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ShoppingPreference> GetShoppingPreference_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetShoppingPreference")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ShoppingPreference>("/accounts/{account_id}/shopping_preference",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sets the default shopping preferences for this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="preference"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/shopping_preference</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageAccounts' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 SetShoppingPreference (object account_id, ColonyConcierge.APIData.Data.ShoppingPreference preference )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetShoppingPreference"))
		{
			return _connector.Put<Int32>("/accounts/{account_id}/shopping_preference")
				.Parameter("account_id", account_id)
				.Parameter(preference);
		}
	}
	///<summary>
	///Async version of <see cref="SetShoppingPreference"/>
	///</summary>
	public async Task<Int32> SetShoppingPreference_Async (object account_id, ColonyConcierge.APIData.Data.ShoppingPreference preference )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.SetShoppingPreference")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Int32>("/accounts/{account_id}/shopping_preference",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter(preference);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of payment method IDs this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPaymentMethodIDs (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethodIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payment_methods/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentMethodIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPaymentMethodIDs_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethodIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/accounts/{account_id}/payment_methods/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.PaymentAccountData&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.PaymentAccountData> GetPaymentMethods (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethods"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PaymentAccountData>>("/accounts/{account_id}/payment_methods")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentMethods"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PaymentAccountData>> GetPaymentMethods_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethods")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PaymentAccountData>>("/accounts/{account_id}/payment_methods",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.CreditCardData&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/bt/{account_id}/payment_methods</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.CreditCardData> BtGetPaymentMethods (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtGetPaymentMethods"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.CreditCardData>>("/accounts/bt/{account_id}/payment_methods")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="BtGetPaymentMethods"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.CreditCardData>> BtGetPaymentMethods_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtGetPaymentMethods")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.CreditCardData>>("/accounts/bt/{account_id}/payment_methods",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new payment method to this account, and returns the ID
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="paymentAccount"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddPaymentMethod (object account_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddPaymentMethod"))
		{
			return _connector.Post<Int32>("/accounts/{account_id}/payment_methods")
				.Parameter("account_id", account_id)
				.Parameter(paymentAccount);
		}
	}
	///<summary>
	///Async version of <see cref="AddPaymentMethod"/>
	///</summary>
	public async Task<Int32> AddPaymentMethod_Async (object account_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.AddPaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/accounts/{account_id}/payment_methods",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter(paymentAccount);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new payment method to this account, and returns the ID
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="paymentAccount"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/bt/{account_id}/payment_methods</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 BtAddPaymentMethod (object account_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtAddPaymentMethod"))
		{
			return _connector.Post<Int32>("/accounts/bt/{account_id}/payment_methods")
				.Parameter("account_id", account_id)
				.Parameter(paymentAccount);
		}
	}
	///<summary>
	///Async version of <see cref="BtAddPaymentMethod"/>
	///</summary>
	public async Task<Int32> BtAddPaymentMethod_Async (object account_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtAddPaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/accounts/bt/{account_id}/payment_methods",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter(paymentAccount);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a payment method object by ID
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PaymentAccountData' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.PaymentAccountData GetPaymentMethod (object account_id, object payment_method_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethod"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PaymentAccountData>("/accounts/{account_id}/payment_methods/{payment_method_id}")
				.Parameter("account_id", account_id)
				.Parameter("payment_method_id", payment_method_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentMethod"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.PaymentAccountData> GetPaymentMethod_Async (object account_id, object payment_method_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PaymentAccountData>("/accounts/{account_id}/payment_methods/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_method_id", payment_method_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a payment method object by ID, providing a more detailed version.
	/// This API must delegate data lookup to the Credit Card Gateways, so only use this API when you really need the extra data. It will be much slower.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PaymentAccountData' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.PaymentAccountData GetPaymentMethodForEditing (object account_id, object payment_method_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethodForEditing"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PaymentAccountData>("/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit")
				.Parameter("account_id", account_id)
				.Parameter("payment_method_id", payment_method_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentMethodForEditing"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.PaymentAccountData> GetPaymentMethodForEditing_Async (object account_id, object payment_method_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentMethodForEditing")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PaymentAccountData>("/accounts/{account_id}/payment_methods/{payment_method_id}/for_edit",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_method_id", payment_method_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an existing payment method.
	/// Only certain operations are permitted. You cannot alter the payment method to a completely new type of payment method, you cannot change
	/// account numbers.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="paymentAccount"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdatePaymentMethod (object account_id, object payment_method_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.UpdatePaymentMethod"))
		{
			return _connector.Put<Boolean>("/accounts/{account_id}/payment_methods/{payment_method_id}")
				.Parameter("account_id", account_id)
				.Parameter("payment_method_id", payment_method_id)
				.Parameter(paymentAccount);
		}
	}
	///<summary>
	///Async version of <see cref="UpdatePaymentMethod"/>
	///</summary>
	public async Task<Boolean> UpdatePaymentMethod_Async (object account_id, object payment_method_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.UpdatePaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/accounts/{account_id}/payment_methods/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_method_id", payment_method_id)
					.Parameter(paymentAccount);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an existing payment method.
	/// Only certain operations are permitted. You cannot alter the payment method to a completely new type of payment method, you cannot change
	/// account numbers.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="paymentAccount"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/bt/{account_id}/payment_methods/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean BtUpdatePaymentMethod (object account_id, object payment_method_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtUpdatePaymentMethod"))
		{
			return _connector.Put<Boolean>("/accounts/bt/{account_id}/payment_methods/{payment_method_id}")
				.Parameter("account_id", account_id)
				.Parameter("payment_method_id", payment_method_id)
				.Parameter(paymentAccount);
		}
	}
	///<summary>
	///Async version of <see cref="BtUpdatePaymentMethod"/>
	///</summary>
	public async Task<Boolean> BtUpdatePaymentMethod_Async (object account_id, object payment_method_id, ColonyConcierge.APIData.Data.PaymentAccountData paymentAccount )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtUpdatePaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/accounts/bt/{account_id}/payment_methods/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_method_id", payment_method_id)
					.Parameter(paymentAccount);
				});
			return await result;
		}
	}

	///<summary>
	/// 'Deletes' a payment method. The payment data is not actually deleted, but marked a inactive.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/payment_methods/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeletePaymentMethod (object account_id, object payment_method_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeletePaymentMethod"))
		{
			return _connector.Delete<Boolean>("/accounts/{account_id}/payment_methods/{payment_method_id}")
				.Parameter("account_id", account_id)
				.Parameter("payment_method_id", payment_method_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeletePaymentMethod"/>
	///</summary>
	public async Task<Boolean> DeletePaymentMethod_Async (object account_id, object payment_method_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.DeletePaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/accounts/{account_id}/payment_methods/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_method_id", payment_method_id);
				});
			return await result;
		}
	}

	///<summary>
	/// 'Deletes' a payment method. The payment data is not actually deleted, but marked a inactive.
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/bt/{account_id}/payment_methods/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean BtDeletePaymentMethod (object account_id, object payment_method_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtDeletePaymentMethod"))
		{
			return _connector.Delete<Boolean>("/accounts/bt/{account_id}/payment_methods/{payment_method_id}")
				.Parameter("account_id", account_id)
				.Parameter("payment_method_id", payment_method_id);
		}
	}
	///<summary>
	///Async version of <see cref="BtDeletePaymentMethod"/>
	///</summary>
	public async Task<Boolean> BtDeletePaymentMethod_Async (object account_id, object payment_method_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.BtDeletePaymentMethod")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/accounts/bt/{account_id}/payment_methods/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("payment_method_id", payment_method_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the amount of service fee credit remaining
	/// <note>This functionality is going away, since monthly service credit is going away.</note>
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Decimal' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/{account_id}/service_credit</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("This functionality is going away, since monthly service credit is going away.", true)]
	public System.Decimal GetServiceCreditRemaining (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceCreditRemaining"))
		{
			return _connector.Get<System.Decimal>("/accounts/{account_id}/service_credit")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceCreditRemaining"/>
	///</summary>
	[Obsolete("This functionality is going away, since monthly service credit is going away.", true)]
	public async Task<System.Decimal> GetServiceCreditRemaining_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetServiceCreditRemaining")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Decimal>("/accounts/{account_id}/service_credit",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Get
	/// <note>This functionality is going away, Please use GetPaymentGatewayToken instead.</note>
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/bt/{account_id}/get_token</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("This functionality is going away, Please use GetPaymentGatewayToken instead.", true)]
	public System.String GetToken (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetToken"))
		{
			return _connector.Get("/accounts/bt/{account_id}/get_token")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetToken"/>
	///</summary>
	[Obsolete("This functionality is going away, Please use GetPaymentGatewayToken instead.", true)]
	public async Task<System.String> GetToken_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetToken")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/accounts/bt/{account_id}/get_token",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Get
	///</summary>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/accounts/payment/get_token</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String GetPaymentGatewayToken ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentGatewayToken"))
		{
			return _connector.Get("/accounts/payment/get_token");
		}
	}
	///<summary>
	///Async version of <see cref="GetPaymentGatewayToken"/>
	///</summary>
	public async Task<System.String> GetPaymentGatewayToken_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAccounts.GetPaymentGatewayToken")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/accounts/payment/get_token");
			return await result;
		}
	}

}

///<summary>
///Contains methods used for managerial and administrative purposes
///</summary>
///<summary>
/// Wrapper data object for the 'IAdmin' API server interface
///</summary>
public class CC_API_IAdmin : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IAdmin() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IAdmin(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Gets a list of account IDs
	///Retrieves a list of all account IDs.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///A list of ID's
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/accounts</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetAccountIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/admin/accounts");
		}
	}
	///<summary>
	///Async version of <see cref="GetAccountIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetAccountIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/admin/accounts");
			return await result;
		}
	}

	///<summary>
	/// Gets a list of account history IDs associated with the account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/accounts/{account_id}/history/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetAccountHistoryIDs (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountHistoryIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/admin/accounts/{account_id}/history/ids")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAccountHistoryIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetAccountHistoryIDs_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountHistoryIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/admin/accounts/{account_id}/history/ids",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of account history items associated with the account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.AccountHistoryEntry&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/accounts/{account_id}/history</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.AccountHistoryEntry> GetAccountHistory (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountHistory"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.AccountHistoryEntry>>("/admin/accounts/{account_id}/history")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAccountHistory"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.AccountHistoryEntry>> GetAccountHistory_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountHistory")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.AccountHistoryEntry>>("/admin/accounts/{account_id}/history",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets an account history item associated with the account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="history_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.AccountHistoryEntry' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/accounts/{account_id}/history/{history_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.AccountHistoryEntry GetAccountHistoryEntry (object account_id, object history_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountHistoryEntry"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.AccountHistoryEntry>("/admin/accounts/{account_id}/history/{history_id}")
				.Parameter("account_id", account_id)
				.Parameter("history_id", history_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAccountHistoryEntry"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.AccountHistoryEntry> GetAccountHistoryEntry_Async (object account_id, object history_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetAccountHistoryEntry")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.AccountHistoryEntry>("/admin/accounts/{account_id}/history/{history_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter("history_id", history_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Creates a custom invoice on this account
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="invoice"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/accounts/{account_id}/invoices</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 CreateCustomInvoice (object account_id, ColonyConcierge.APIData.Data.Invoice invoice )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.CreateCustomInvoice"))
		{
			return _connector.Post<Int32>("/admin/accounts/{account_id}/invoices")
				.Parameter("account_id", account_id)
				.Parameter(invoice);
		}
	}
	///<summary>
	///Async version of <see cref="CreateCustomInvoice"/>
	///</summary>
	public async Task<Int32> CreateCustomInvoice_Async (object account_id, ColonyConcierge.APIData.Data.Invoice invoice )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.CreateCustomInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/accounts/{account_id}/invoices",
				builder =>
				{
					builder
					.Parameter("account_id", account_id)
					.Parameter(invoice);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new invoice line item entry to this invoice
	///</summary>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="lineItem"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/invoices/{invoice_id}/items</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddInvoiceLineItem (object invoice_id, ColonyConcierge.APIData.Data.InvoiceLineItem lineItem )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.AddInvoiceLineItem"))
		{
			return _connector.Post<Int32>("/admin/invoices/{invoice_id}/items")
				.Parameter("invoice_id", invoice_id)
				.Parameter(lineItem);
		}
	}
	///<summary>
	///Async version of <see cref="AddInvoiceLineItem"/>
	///</summary>
	public async Task<Int32> AddInvoiceLineItem_Async (object invoice_id, ColonyConcierge.APIData.Data.InvoiceLineItem lineItem )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.AddInvoiceLineItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/invoices/{invoice_id}/items",
				builder =>
				{
					builder
					.Parameter("invoice_id", invoice_id)
					.Parameter(lineItem);
				});
			return await result;
		}
	}

	///<summary>
	/// Removes an invoice line item entry from this invoice
	///</summary>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="line_item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/invoices/{invoice_id}/items/{line_item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean RemoveInvoiceLineItem (object invoice_id, object line_item_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.RemoveInvoiceLineItem"))
		{
			return _connector.Delete<Boolean>("/admin/invoices/{invoice_id}/items/{line_item_id}")
				.Parameter("invoice_id", invoice_id)
				.Parameter("line_item_id", line_item_id);
		}
	}
	///<summary>
	///Async version of <see cref="RemoveInvoiceLineItem"/>
	///</summary>
	public async Task<Boolean> RemoveInvoiceLineItem_Async (object invoice_id, object line_item_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.RemoveInvoiceLineItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/admin/invoices/{invoice_id}/items/{line_item_id}",
				builder =>
				{
					builder
					.Parameter("invoice_id", invoice_id)
					.Parameter("line_item_id", line_item_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an existing invoice line item entry from in this invoice
	///</summary>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="line_item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="lineItem"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/invoices/{invoice_id}/items/{line_item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateInvoiceLineItem (object invoice_id, object line_item_id, ColonyConcierge.APIData.Data.InvoiceLineItem lineItem )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.UpdateInvoiceLineItem"))
		{
			return _connector.Put<Boolean>("/admin/invoices/{invoice_id}/items/{line_item_id}")
				.Parameter("invoice_id", invoice_id)
				.Parameter("line_item_id", line_item_id)
				.Parameter(lineItem);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateInvoiceLineItem"/>
	///</summary>
	public async Task<Boolean> UpdateInvoiceLineItem_Async (object invoice_id, object line_item_id, ColonyConcierge.APIData.Data.InvoiceLineItem lineItem )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.UpdateInvoiceLineItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/admin/invoices/{invoice_id}/items/{line_item_id}",
				builder =>
				{
					builder
					.Parameter("invoice_id", invoice_id)
					.Parameter("line_item_id", line_item_id)
					.Parameter(lineItem);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of scheduled Services matching the criteria
	///Returns a list of scheduled services, with many filtering options.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional user ID to filter services for.
	///</param>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional Account ID to filter services for. This takes priority over the <paramref name="user_id" /> parameter, if both are specified.
	///</param>
	///<param name="zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional zipcode to use for filtering the result set. If not specified, all zipcodes within the callers service group are returnd. <note type="note">
	///It does not make a lot of sense to use this filter at the same timme as the user or account parameters, since those filters imply futer by the user's service zip</note>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional start time for a query
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional end time for a query
	///</param>
	///<param name="service_states"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Service state filter. Supply a comma-separated list of service states for an inclusive filter, or prefix the
	///list for an exclusive filter.
	///</param>
	///<param name="only_attention_needed"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Is this is set to 'true', then only services that need attention (human intervention) will be returned.
	///This is better than filtering on service state, because there is not a 100% correlation between service state and needing attention.
	///</param>
	///<param name="page_size"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Support for pagination. Optionally supply the number of results that should be returned per-page
	///</param>
	///<param name="page_num"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Support for pagination. Optionally supply the page number for the results.
	///</param>
	///<param name="reverse_order"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional to specify that the results should be in reverse order. specify 'true' or 'false'
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ScheduledService&gt;' object.</em>
	///A List of <see cref="T:ColonyConcierge.APIData.Data.ScheduledService" /> objects matching the filter criteria
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/scheduled_services?user_id={user_id}&amp;account_id={account_id}&amp;zip={zip}&amp;start={start}&amp;end={end}&amp;service_states={service_states}&amp;only_attention_needed={only_attention_needed}&amp;page_size={page_size}&amp;page_num={page_num}&amp;reverse_order={reverse_order}</b>
	///This is the primary administrative API for querying existing scheduled services.
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'ViewScheduledServices' permission on the calling account</li>
	///<li>If the owner is specified, can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService> GetScheduledServices (object user_id = null, object account_id = null, object zip = null, object start = null, object end = null, object service_states = null, object only_attention_needed = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetScheduledServices"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/admin/scheduled_services")
				.Query("user_id", user_id)
				.Query("account_id", account_id)
				.Query("zip", zip)
				.Query("start", start)
				.Query("end", end)
				.Query("service_states", service_states)
				.Query("only_attention_needed", only_attention_needed)
				.Query("page_size", page_size)
				.Query("page_num", page_num)
				.Query("reverse_order", reverse_order);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>> GetScheduledServices_Async (object user_id = null, object account_id = null, object zip = null, object start = null, object end = null, object service_states = null, object only_attention_needed = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetScheduledServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/admin/scheduled_services",
				builder =>
				{
					builder
					.Query("user_id", user_id)
					.Query("account_id", account_id)
					.Query("zip", zip)
					.Query("start", start)
					.Query("end", end)
					.Query("service_states", service_states)
					.Query("only_attention_needed", only_attention_needed)
					.Query("page_size", page_size)
					.Query("page_num", page_num)
					.Query("reverse_order", reverse_order);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of scheduled service objects for a given list of IDs
	///</summary>
	///<param name="scheduled_service_ids"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ScheduledService&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/scheduled_services/by_id</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'ViewScheduledServices' permission on the calling account</li>
	///<li>If the owner is specified, can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService> GetScheduledServicesByIDs (System.Collections.Generic.List<Int32> scheduled_service_ids )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetScheduledServicesByIDs"))
		{
			return _connector.Post<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/admin/scheduled_services/by_id")
				.Parameter(scheduled_service_ids);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledServicesByIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>> GetScheduledServicesByIDs_Async (System.Collections.Generic.List<Int32> scheduled_service_ids )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetScheduledServicesByIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/admin/scheduled_services/by_id",
				builder =>
				{
					builder
					.Parameter(scheduled_service_ids);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the status of the scheduled service.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="scheduled_service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/scheduled_services/{scheduled_service_id}/status</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires root permissions for the caller</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.String GetScheduledServiceStatus (object scheduled_service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetScheduledServiceStatus"))
		{
			return _connector.Get("/admin/scheduled_services/{scheduled_service_id}/status")
				.Parameter("scheduled_service_id", scheduled_service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledServiceStatus"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.String> GetScheduledServiceStatus_Async (object scheduled_service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetScheduledServiceStatus")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/admin/scheduled_services/{scheduled_service_id}/status",
				builder =>
				{
					builder
					.Parameter("scheduled_service_id", scheduled_service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Causes an invoice to be computed for the specified Scheduled Service. Returns an invoice ID
	///</summary>
	///<param name="scheduled_service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/scheduled_services/{scheduled_service_id}/compute_invoice</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 ComputeInvoice (object scheduled_service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.ComputeInvoice"))
		{
			return _connector.Post<Int32>("/admin/scheduled_services/{scheduled_service_id}/compute_invoice")
				.Parameter("scheduled_service_id", scheduled_service_id);
		}
	}
	///<summary>
	///Async version of <see cref="ComputeInvoice"/>
	///</summary>
	public async Task<Int32> ComputeInvoice_Async (object scheduled_service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.ComputeInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/scheduled_services/{scheduled_service_id}/compute_invoice",
				builder =>
				{
					builder
					.Parameter("scheduled_service_id", scheduled_service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the charges for the scheduled service.
	///</summary>
	///<param name="scheduled_service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledServiceCharges' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/scheduled_services/{scheduled_service_id}/charges</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ScheduledServiceCharges GetSchedueledServiceCharges (object scheduled_service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetSchedueledServiceCharges"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledServiceCharges>("/admin/scheduled_services/{scheduled_service_id}/charges")
				.Parameter("scheduled_service_id", scheduled_service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetSchedueledServiceCharges"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ScheduledServiceCharges> GetSchedueledServiceCharges_Async (object scheduled_service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetSchedueledServiceCharges")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledServiceCharges>("/admin/scheduled_services/{scheduled_service_id}/charges",
				builder =>
				{
					builder
					.Parameter("scheduled_service_id", scheduled_service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sets the charge for the scheduled service.
	///</summary>
	///<param name="scheduled_service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="charges"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/scheduled_services/{scheduled_service_id}/charges</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 SetSchedueledServiceCharges (object scheduled_service_id, ColonyConcierge.APIData.Data.ScheduledServiceCharges charges )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.SetSchedueledServiceCharges"))
		{
			return _connector.Post<Int32>("/admin/scheduled_services/{scheduled_service_id}/charges")
				.Parameter("scheduled_service_id", scheduled_service_id)
				.Parameter(charges);
		}
	}
	///<summary>
	///Async version of <see cref="SetSchedueledServiceCharges"/>
	///</summary>
	public async Task<Int32> SetSchedueledServiceCharges_Async (object scheduled_service_id, ColonyConcierge.APIData.Data.ScheduledServiceCharges charges )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.SetSchedueledServiceCharges")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/scheduled_services/{scheduled_service_id}/charges",
				builder =>
				{
					builder
					.Parameter("scheduled_service_id", scheduled_service_id)
					.Parameter(charges);
				});
			return await result;
		}
	}

	///<summary>
	/// Causes a charge for the invoice, and returns a payment id
	///</summary>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/invoices/{invoice_id}/payment/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ChargeInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 ChargeInvoice (object invoice_id, object payment_method_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.ChargeInvoice"))
		{
			return _connector.Post<Int32>("/admin/invoices/{invoice_id}/payment/{payment_method_id}")
				.Parameter("invoice_id", invoice_id)
				.Parameter("payment_method_id", payment_method_id);
		}
	}
	///<summary>
	///Async version of <see cref="ChargeInvoice"/>
	///</summary>
	public async Task<Int32> ChargeInvoice_Async (object invoice_id, object payment_method_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.ChargeInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/invoices/{invoice_id}/payment/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("invoice_id", invoice_id)
					.Parameter("payment_method_id", payment_method_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Causes a charge for the invoice, and returns a payment id
	///</summary>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="payment_method_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/bt/invoices/{invoice_id}/payment/{payment_method_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ChargeInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 BtChargeInvoice (object invoice_id, object payment_method_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.BtChargeInvoice"))
		{
			return _connector.Post<Int32>("/admin/bt/invoices/{invoice_id}/payment/{payment_method_id}")
				.Parameter("invoice_id", invoice_id)
				.Parameter("payment_method_id", payment_method_id);
		}
	}
	///<summary>
	///Async version of <see cref="BtChargeInvoice"/>
	///</summary>
	public async Task<Int32> BtChargeInvoice_Async (object invoice_id, object payment_method_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.BtChargeInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/bt/invoices/{invoice_id}/payment/{payment_method_id}",
				builder =>
				{
					builder
					.Parameter("invoice_id", invoice_id)
					.Parameter("payment_method_id", payment_method_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all users ids in the system.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/users/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetUserIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetUserIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/admin/users/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetUserIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetUserIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetUserIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/admin/users/ids");
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all users in the system.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.User&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/users</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.User> GetUsers ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetUsers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/admin/users");
		}
	}
	///<summary>
	///Async version of <see cref="GetUsers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>> GetUsers_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetUsers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/admin/users");
			return await result;
		}
	}

	///<summary>
	///Finds users, based on search criteria
	///</summary>
	///<param name="name_contains"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///This will search for the provided text in the user first/middle/last name, or their username.
	///Use the special value 'all' to not
	///</param>
	///<param name="workers_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Include only worker accounts, defaults to 'false' if not specified.
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.User&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/users/find?name_contains={name_contains}&amp;workers_only={workers_only}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.User> FindUsers (object name_contains = null, object workers_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.FindUsers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/admin/users/find")
				.Query("name_contains", name_contains)
				.Query("workers_only", workers_only);
		}
	}
	///<summary>
	///Async version of <see cref="FindUsers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>> FindUsers_Async (object name_contains = null, object workers_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.FindUsers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/admin/users/find",
				builder =>
				{
					builder
					.Query("name_contains", name_contains)
					.Query("workers_only", workers_only);
				});
			return await result;
		}
	}

	///<summary>
	/// Creates a new user with an account, typically for non-consumer purposes, such as for managers, employees, or contractors
	///</summary>
	///<param name="entry"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/users</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 CreateUser (ColonyConcierge.APIData.Data.RegistrationEntry entry )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.CreateUser"))
		{
			return _connector.Post<Int32>("/admin/users")
				.Parameter(entry);
		}
	}
	///<summary>
	///Async version of <see cref="CreateUser"/>
	///</summary>
	public async Task<Int32> CreateUser_Async (ColonyConcierge.APIData.Data.RegistrationEntry entry )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.CreateUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/users",
				builder =>
				{
					builder
					.Parameter(entry);
				});
			return await result;
		}
	}

	///<summary>
	///Function to quickly get a list of users.
	///</summary>
	///<param name="name_contains"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///a case-insensitive, optional string used as a search parameter for find names.
	///this substring is used to search for any part of the name, email, or username fields.
	///leave blank to not filter by name.
	///</param>
	///<param name="workers_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///set this to 'true' to limit the results to only accounts/users that are considered 'workers' by the system.
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.UserQuickInfo&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/quick_user_info/find?name_contains={name_contains}&amp;workers_only={workers_only}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserQuickInfo> QuickFindUsers (object name_contains = null, object workers_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.QuickFindUsers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserQuickInfo>>("/admin/quick_user_info/find")
				.Query("name_contains", name_contains)
				.Query("workers_only", workers_only);
		}
	}
	///<summary>
	///Async version of <see cref="QuickFindUsers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserQuickInfo>> QuickFindUsers_Async (object name_contains = null, object workers_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.QuickFindUsers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserQuickInfo>>("/admin/quick_user_info/find",
				builder =>
				{
					builder
					.Query("name_contains", name_contains)
					.Query("workers_only", workers_only);
				});
			return await result;
		}
	}

	///<summary>
	///Returns the count of the number of entries that would be returned for the supplied user query.
	///<seealso cref="M:ColonyConcierge.API.EndPoints.IAdmin.QuickFindUsers(System.String,System.String)" />
	///</summary>
	///<param name="name_contains"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="workers_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/quick_user_info/find/result_count?name_contains={name_contains}&amp;workers_only={workers_only}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 QuickFindResultCount (object name_contains = null, object workers_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.QuickFindResultCount"))
		{
			return _connector.Get<Int32>("/admin/quick_user_info/find/result_count")
				.Query("name_contains", name_contains)
				.Query("workers_only", workers_only);
		}
	}
	///<summary>
	///Async version of <see cref="QuickFindResultCount"/>
	///</summary>
	public async Task<Int32> QuickFindResultCount_Async (object name_contains = null, object workers_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.QuickFindResultCount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Int32>("/admin/quick_user_info/find/result_count",
				builder =>
				{
					builder
					.Query("name_contains", name_contains)
					.Query("workers_only", workers_only);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all user roles in the system.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.UserRole&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/roles</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserRole> GetRolls ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetRolls"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserRole>>("/admin/roles");
		}
	}
	///<summary>
	///Async version of <see cref="GetRolls"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserRole>> GetRolls_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetRolls")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.UserRole>>("/admin/roles");
			return await result;
		}
	}

	///<summary>
	/// Gets a list of stores associated with a service definition. Only shopping services can have stores associated with them.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ShoppingStore&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/stores/by_service/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageShoppingStores' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore> GetStores (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetStores"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore>>("/admin/stores/by_service/{service_id}")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetStores"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore>> GetStores_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetStores")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore>>("/admin/stores/by_service/{service_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new store to the specified service, returning the ID of the new store. The service must be a shopping service.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="store"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/stores/by_service/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageShoppingStores' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddStore (object service_id, ColonyConcierge.APIData.Data.ShoppingStore store )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.AddStore"))
		{
			return _connector.Post<Int32>("/admin/stores/by_service/{service_id}")
				.Parameter("service_id", service_id)
				.Parameter(store);
		}
	}
	///<summary>
	///Async version of <see cref="AddStore"/>
	///</summary>
	public async Task<Int32> AddStore_Async (object service_id, ColonyConcierge.APIData.Data.ShoppingStore store )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.AddStore")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/stores/by_service/{service_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter(store);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new store to the specified service, returning the ID of the new store
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="store_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="store"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/stores/by_service/{service_id}/{store_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageShoppingStores' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateStore (object service_id, object store_id, ColonyConcierge.APIData.Data.ShoppingStore store )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.UpdateStore"))
		{
			return _connector.Put<Boolean>("/admin/stores/by_service/{service_id}/{store_id}")
				.Parameter("service_id", service_id)
				.Parameter("store_id", store_id)
				.Parameter(store);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateStore"/>
	///</summary>
	public async Task<Boolean> UpdateStore_Async (object service_id, object store_id, ColonyConcierge.APIData.Data.ShoppingStore store )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.UpdateStore")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/admin/stores/by_service/{service_id}/{store_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("store_id", store_id)
					.Parameter(store);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a shopping store associated with the specified service.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="store_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ShoppingStore' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/stores/by_service/{service_id}/{store_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageShoppingStores' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ShoppingStore GetStore (object service_id, object store_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetStore"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ShoppingStore>("/admin/stores/by_service/{service_id}/{store_id}")
				.Parameter("service_id", service_id)
				.Parameter("store_id", store_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetStore"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ShoppingStore> GetStore_Async (object service_id, object store_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetStore")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ShoppingStore>("/admin/stores/by_service/{service_id}/{store_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("store_id", store_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a service's weekly filter setting
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ServiceDaysOfWeek' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/weekly_filter</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.ServiceDaysOfWeek GetServiceCalendarWeeklyFilter (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceCalendarWeeklyFilter"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ServiceDaysOfWeek>("/admin/services/{service_id}/calendar/weekly_filter")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceCalendarWeeklyFilter"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.ServiceDaysOfWeek> GetServiceCalendarWeeklyFilter_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceCalendarWeeklyFilter")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ServiceDaysOfWeek>("/admin/services/{service_id}/calendar/weekly_filter",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sets a service's weekly filter setting
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="days_of_week"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/weekly_filter</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetServiceCalendarWeeklyFilter (object service_id, System.String days_of_week )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.SetServiceCalendarWeeklyFilter"))
		{
			return _connector.Put<Boolean>("/admin/services/{service_id}/calendar/weekly_filter")
				.Parameter("service_id", service_id)
				.Parameter(days_of_week);
		}
	}
	///<summary>
	///Async version of <see cref="SetServiceCalendarWeeklyFilter"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetServiceCalendarWeeklyFilter_Async (object service_id, System.String days_of_week )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.SetServiceCalendarWeeklyFilter")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/admin/services/{service_id}/calendar/weekly_filter",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter(days_of_week);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of ServiceHolidayDateObjects for the specified range.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ServiceHolidayDate&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/holidays/search?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate> GetServiceHolidayDates (object service_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceHolidayDates"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate>>("/admin/services/{service_id}/calendar/holidays/search")
				.Parameter("service_id", service_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceHolidayDates"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate>> GetServiceHolidayDates_Async (object service_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceHolidayDates")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate>>("/admin/services/{service_id}/calendar/holidays/search",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a ServiceHolidayDateObjects for the specified date, or null if none exist for the service on that day.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ServiceHolidayDate' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/holidays/on_date/{date}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.ServiceHolidayDate GetServiceHolidayByDate (object service_id, object date )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceHolidayByDate"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ServiceHolidayDate>("/admin/services/{service_id}/calendar/holidays/on_date/{date}")
				.Parameter("service_id", service_id)
				.Parameter("date", date);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceHolidayByDate"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.ServiceHolidayDate> GetServiceHolidayByDate_Async (object service_id, object date )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceHolidayByDate")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ServiceHolidayDate>("/admin/services/{service_id}/calendar/holidays/on_date/{date}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("date", date);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a ServiceHolidayDateObjects by id
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holiday_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ServiceHolidayDate' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/holidays/{holiday_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.ServiceHolidayDate GetServiceHoliday (object service_id, object holiday_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceHoliday"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ServiceHolidayDate>("/admin/services/{service_id}/calendar/holidays/{holiday_id}")
				.Parameter("service_id", service_id)
				.Parameter("holiday_id", holiday_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceHoliday"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.ServiceHolidayDate> GetServiceHoliday_Async (object service_id, object holiday_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ServiceHolidayDate>("/admin/services/{service_id}/calendar/holidays/{holiday_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("holiday_id", holiday_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sets a service holiday for a given date on a service. If there is already a holiday for that date, it will be overridden.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holidayDate"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/holidays</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Int32 SetServiceHolidayDate (object service_id, ColonyConcierge.APIData.Data.ServiceHolidayDate holidayDate )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.SetServiceHolidayDate"))
		{
			return _connector.Post<Int32>("/admin/services/{service_id}/calendar/holidays")
				.Parameter("service_id", service_id)
				.Parameter(holidayDate);
		}
	}
	///<summary>
	///Async version of <see cref="SetServiceHolidayDate"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Int32> SetServiceHolidayDate_Async (object service_id, ColonyConcierge.APIData.Data.ServiceHolidayDate holidayDate )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.SetServiceHolidayDate")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/services/{service_id}/calendar/holidays",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter(holidayDate);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes a service holiday.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holiday_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/{service_id}/calendar/holidays/{holiday_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServiceCalendars' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean DeleteServiceHolidayDate (object service_id, object holiday_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.DeleteServiceHolidayDate"))
		{
			return _connector.Delete<Boolean>("/admin/services/{service_id}/calendar/holidays/{holiday_id}")
				.Parameter("service_id", service_id)
				.Parameter("holiday_id", holiday_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteServiceHolidayDate"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> DeleteServiceHolidayDate_Async (object service_id, object holiday_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.DeleteServiceHolidayDate")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/admin/services/{service_id}/calendar/holidays/{holiday_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("holiday_id", holiday_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a news item
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.NewsItem' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/news/{item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageNews' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.NewsItem GetNewsItem (object item_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetNewsItem"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.NewsItem>("/admin/news/{item_id}")
				.Parameter("item_id", item_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetNewsItem"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.NewsItem> GetNewsItem_Async (object item_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetNewsItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.NewsItem>("/admin/news/{item_id}",
				builder =>
				{
					builder
					.Parameter("item_id", item_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new news item
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="newsItem"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/news</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageNews' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Int32 AddNewsItem (ColonyConcierge.APIData.Data.NewsItem newsItem )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.AddNewsItem"))
		{
			return _connector.Post<Int32>("/admin/news")
				.Parameter(newsItem);
		}
	}
	///<summary>
	///Async version of <see cref="AddNewsItem"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Int32> AddNewsItem_Async (ColonyConcierge.APIData.Data.NewsItem newsItem )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.AddNewsItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/admin/news",
				builder =>
				{
					builder
					.Parameter(newsItem);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an existing news item
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="item"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/news/{item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageNews' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean UpdateNewsItem (object item_id, ColonyConcierge.APIData.Data.NewsItem item )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.UpdateNewsItem"))
		{
			return _connector.Put<Boolean>("/admin/news/{item_id}")
				.Parameter("item_id", item_id)
				.Parameter(item);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateNewsItem"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> UpdateNewsItem_Async (object item_id, ColonyConcierge.APIData.Data.NewsItem item )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.UpdateNewsItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/admin/news/{item_id}",
				builder =>
				{
					builder
					.Parameter("item_id", item_id)
					.Parameter(item);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes a news item
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/news/{item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageNews' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean DeleteNewsItem (object item_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.DeleteNewsItem"))
		{
			return _connector.Delete<Boolean>("/admin/news/{item_id}")
				.Parameter("item_id", item_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteNewsItem"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> DeleteNewsItem_Async (object item_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.DeleteNewsItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/admin/news/{item_id}",
				builder =>
				{
					builder
					.Parameter("item_id", item_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Service&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service> GetServices ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServices"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/admin/services");
		}
	}
	///<summary>
	///Async version of <see cref="GetServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>> GetServices_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/admin/services");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetServiceIDs ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/admin/services/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetServiceIDs_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServiceIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/admin/services/ids");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="idList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/services/by_ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetServicesByIDs (System.Collections.Generic.List<Int32> idList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServicesByIDs"))
		{
			return _connector.Post<System.Collections.Generic.List<Int32>>("/admin/services/by_ids")
				.Parameter(idList);
		}
	}
	///<summary>
	///Async version of <see cref="GetServicesByIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetServicesByIDs_Async (System.Collections.Generic.List<Int32> idList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetServicesByIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Collections.Generic.List<Int32>>("/admin/services/by_ids",
				builder =>
				{
					builder
					.Parameter(idList);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GroupedDeliveryDestination&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/destinations</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> GetDestinations ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetDestinations"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/admin/destinations");
		}
	}
	///<summary>
	///Async version of <see cref="GetDestinations"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>> GetDestinations_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetDestinations")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/admin/destinations");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/destinations/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetDestinationIDs ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetDestinationIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/admin/destinations/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetDestinationIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetDestinationIDs_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetDestinationIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/admin/destinations/ids");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="idList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GroupedDeliveryDestination&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin/destinations/by_ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> GetDestinationsByID (System.Collections.Generic.List<Int32> idList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetDestinationsByID"))
		{
			return _connector.Post<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/admin/destinations/by_ids")
				.Parameter(idList);
		}
	}
	///<summary>
	///Async version of <see cref="GetDestinationsByID"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>> GetDestinationsByID_Async (System.Collections.Generic.List<Int32> idList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdmin.GetDestinationsByID")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/admin/destinations/by_ids",
				builder =>
				{
					builder
					.Parameter(idList);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IAdminReports' API server interface
///</summary>
public class CC_API_IAdminReports : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IAdminReports() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IAdminReports(Connector connector) : base(connector)
	{
	}

	///<summary>
	///Retrieves a list of Service summaries, grouped by restaurant and optionally by "grouped destination"
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///An integer id of the service for which to perform the query, for example the id of "fitzgerald school lunch delivery"
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantServiceSummary&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/admin_reports/restaurant/by_service/{service_id}/history/ids?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewScheduledServices' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantServiceSummary> GetRestaurantServicesSummary (object service_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdminReports.GetRestaurantServicesSummary"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantServiceSummary>>("/admin_reports/restaurant/by_service/{service_id}/history/ids")
				.Parameter("service_id", service_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetRestaurantServicesSummary"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantServiceSummary>> GetRestaurantServicesSummary_Async (object service_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IAdminReports.GetRestaurantServicesSummary")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantServiceSummary>>("/admin_reports/restaurant/by_service/{service_id}/history/ids",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IBatchedTasks' API server interface
///</summary>
public class CC_API_IBatchedTasks : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IBatchedTasks() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IBatchedTasks(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Computes and processes monthly service changes and cancelations for all active accounts. It returns the number of modifications processed.
	///</summary>
	///<param name="year"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="month"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/batched_tasks/monthly_service_mods/{year}/{month}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'RunBatchTasks' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 ProcessMonthyServiceModifications (object year, object month )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IBatchedTasks.ProcessMonthyServiceModifications"))
		{
			return _connector.Post<Int32>("/batched_tasks/monthly_service_mods/{year}/{month}")
				.Parameter("year", year)
				.Parameter("month", month);
		}
	}
	///<summary>
	///Async version of <see cref="ProcessMonthyServiceModifications"/>
	///</summary>
	public async Task<Int32> ProcessMonthyServiceModifications_Async (object year, object month )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IBatchedTasks.ProcessMonthyServiceModifications")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/batched_tasks/monthly_service_mods/{year}/{month}",
				builder =>
				{
					builder
					.Parameter("year", year)
					.Parameter("month", month);
				});
			return await result;
		}
	}

	///<summary>
	/// Computes and processes monthly service fees for all active accounts
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="year"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="month"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/batched_tasks/monthly_fees/{year}/{month}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'RunBatchTasks' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean ProcessMonthyServiceFees (object year, object month )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IBatchedTasks.ProcessMonthyServiceFees"))
		{
			return _connector.Post<Boolean>("/batched_tasks/monthly_fees/{year}/{month}")
				.Parameter("year", year)
				.Parameter("month", month);
		}
	}
	///<summary>
	///Async version of <see cref="ProcessMonthyServiceFees"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> ProcessMonthyServiceFees_Async (object year, object month )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IBatchedTasks.ProcessMonthyServiceFees")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/batched_tasks/monthly_fees/{year}/{month}",
				builder =>
				{
					builder
					.Parameter("year", year)
					.Parameter("month", month);
				});
			return await result;
		}
	}

	///<summary>
	/// Allocates service credits for all accounts for the given year and month. Can be called multiple times. Returns the number of accounts that had credits applied.
	/// <note>THIS METHOD IS NO LONGER SUPPORTED!!</note>
	///</summary>
	///<param name="year"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="month"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/batched_tasks/monthly_service_credits/{year}/{month}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'RunBatchTasks' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS NO LONGER SUPPORTED!!", true)]
	public Int32 ApplyServiceCredits (object year, object month )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IBatchedTasks.ApplyServiceCredits"))
		{
			return _connector.Post<Int32>("/batched_tasks/monthly_service_credits/{year}/{month}")
				.Parameter("year", year)
				.Parameter("month", month);
		}
	}
	///<summary>
	///Async version of <see cref="ApplyServiceCredits"/>
	///</summary>
	[Obsolete("THIS METHOD IS NO LONGER SUPPORTED!!", true)]
	public async Task<Int32> ApplyServiceCredits_Async (object year, object month )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IBatchedTasks.ApplyServiceCredits")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/batched_tasks/monthly_service_credits/{year}/{month}",
				builder =>
				{
					builder
					.Parameter("year", year)
					.Parameter("month", month);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IContractorAdmin' API server interface
///</summary>
public class CC_API_IContractorAdmin : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IContractorAdmin() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IContractorAdmin(Connector connector) : base(connector)
	{
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="workerData"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/contractor_admin/workers/{user_id}/convert</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ConvertUserToWorker (object user_id, ColonyConcierge.APIData.Data.WorkerRegistrationData workerData )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.ConvertUserToWorker"))
		{
			return _connector.Post<Boolean>("/contractor_admin/workers/{user_id}/convert")
				.Parameter("user_id", user_id)
				.Parameter(workerData);
		}
	}
	///<summary>
	///Async version of <see cref="ConvertUserToWorker"/>
	///</summary>
	public async Task<Boolean> ConvertUserToWorker_Async (object user_id, ColonyConcierge.APIData.Data.WorkerRegistrationData workerData )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.ConvertUserToWorker")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/contractor_admin/workers/{user_id}/convert",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(workerData);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all users ids for users that are 'workers' in the system.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/contractor_admin/workers/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetWorkerUserIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.GetWorkerUserIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/contractor_admin/workers/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetWorkerUserIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetWorkerUserIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.GetWorkerUserIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/contractor_admin/workers/ids");
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all users that are 'workers'  in the system.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.User&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/contractor_admin/workers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.User> GetWorkerUsers ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.GetWorkerUsers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/contractor_admin/workers");
		}
	}
	///<summary>
	///Async version of <see cref="GetWorkerUsers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>> GetWorkerUsers_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.GetWorkerUsers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.User>>("/contractor_admin/workers");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean AuthorizeWorkerForScheduleGroup (object user_id, object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.AuthorizeWorkerForScheduleGroup"))
		{
			return _connector.Put<Boolean>("/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}")
				.Parameter("user_id", user_id)
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="AuthorizeWorkerForScheduleGroup"/>
	///</summary>
	public async Task<Boolean> AuthorizeWorkerForScheduleGroup_Async (object user_id, object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.AuthorizeWorkerForScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UnAuthorizeWorkerForScheduleGroup (object user_id, object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.UnAuthorizeWorkerForScheduleGroup"))
		{
			return _connector.Delete<Boolean>("/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}")
				.Parameter("user_id", user_id)
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="UnAuthorizeWorkerForScheduleGroup"/>
	///</summary>
	public async Task<Boolean> UnAuthorizeWorkerForScheduleGroup_Async (object user_id, object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.UnAuthorizeWorkerForScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/contractor_admin/workers/{user_id}/sg_authorization/{schedule_group_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.ScheduleGroup&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/contractor_admin/workers/{user_id}/sg_authorization</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup> GetAuthorizedScheduleGroups (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.GetAuthorizedScheduleGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>>("/contractor_admin/workers/{user_id}/sg_authorization")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAuthorizedScheduleGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>> GetAuthorizedScheduleGroups_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IContractorAdmin.GetAuthorizedScheduleGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>>("/contractor_admin/workers/{user_id}/sg_authorization",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'ICoupons' API server interface
///</summary>
public class CC_API_ICoupons : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_ICoupons() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_ICoupons(Connector connector) : base(connector)
	{
	}

	///<summary>
	///Retrieves a discount object describing how to compute a discount, based on the promo code or coupon code.
	///The discount object must be presently usable*, in other words, it must not be expired.
	///<note type="note">This API has limits to how much it can check the validity of a discount.
	///It does not check against certain quotas.</note>
	///</summary>
	///<param name="discount_code"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PendingDiscount' object.</em>
	///The pending discount object
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons/pending_discount/by_code/{discount_code}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.PendingDiscount GetDiscount (object discount_code )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICoupons.GetDiscount"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PendingDiscount>("/coupons/pending_discount/by_code/{discount_code}")
				.Parameter("discount_code", discount_code);
		}
	}
	///<summary>
	///Async version of <see cref="GetDiscount"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.PendingDiscount> GetDiscount_Async (object discount_code )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICoupons.GetDiscount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PendingDiscount>("/coupons/pending_discount/by_code/{discount_code}",
				builder =>
				{
					builder
					.Parameter("discount_code", discount_code);
				});
			return await result;
		}
	}

	///<summary>
	///This API attempts to return a discount by checking against additional parameters and validating that the
	///discount would be valid.
	///<note type="note">There is no guarantee that this promo code will still be valid when the actual order is placed.
	///The code is validated again against restrictions and quota at the time of order placement. It should be exceptionally
	///rare, however, that the promo would fail validation after receiving a valid discount here.</note>
	///</summary>
	///<param name="discount_code"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The discount code to search for(case insensitive)
	///</param>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user id to use, for search purposes. This will validate against any user-based quotas for the discount
	///</param>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The service id to use, to validate that the discount is valid to use with the service.
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The destination id to use, to validate that the discount is valid to use with that destination
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PendingDiscount' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons/pending_discount/by_code/{discount_code}/check_if_valid/{user_id}?service_id={service_id}&amp;destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'SeeAllUsers' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.PendingDiscount GetAvailableDiscount (object discount_code, object user_id, object service_id = null, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICoupons.GetAvailableDiscount"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PendingDiscount>("/coupons/pending_discount/by_code/{discount_code}/check_if_valid/{user_id}")
				.Parameter("discount_code", discount_code)
				.Parameter("user_id", user_id)
				.Query("service_id", service_id)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableDiscount"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.PendingDiscount> GetAvailableDiscount_Async (object discount_code, object user_id, object service_id = null, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICoupons.GetAvailableDiscount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PendingDiscount>("/coupons/pending_discount/by_code/{discount_code}/check_if_valid/{user_id}",
				builder =>
				{
					builder
					.Parameter("discount_code", discount_code)
					.Parameter("user_id", user_id)
					.Query("service_id", service_id)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves unredeemed, un-applied coupons
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="coupon_code"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Coupon' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons/coupons/by_code/{coupon_code}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.Coupon GetCoupon (object coupon_code )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICoupons.GetCoupon"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Coupon>("/coupons/coupons/by_code/{coupon_code}")
				.Parameter("coupon_code", coupon_code);
		}
	}
	///<summary>
	///Async version of <see cref="GetCoupon"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.Coupon> GetCoupon_Async (object coupon_code )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICoupons.GetCoupon")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Coupon>("/coupons/coupons/by_code/{coupon_code}",
				builder =>
				{
					builder
					.Parameter("coupon_code", coupon_code);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'ICouponsAdmin' API server interface
///</summary>
public class CC_API_ICouponsAdmin : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_ICouponsAdmin() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_ICouponsAdmin(Connector connector) : base(connector)
	{
	}

	///<summary>
	///This is a temporary, short-term function for development.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="flat_amount"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="percent_amount"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/coupons/create?flat_amount={flat_amount}&amp;percent_amount={percent_amount}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.String CreateCoupon (object flat_amount = null, object percent_amount = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.CreateCoupon"))
		{
			return _connector.Post("/coupons_admin/coupons/create")
				.Query("flat_amount", flat_amount)
				.Query("percent_amount", percent_amount);
		}
	}
	///<summary>
	///Async version of <see cref="CreateCoupon"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.String> CreateCoupon_Async (object flat_amount = null, object percent_amount = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.CreateCoupon")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync("/coupons_admin/coupons/create",
				builder =>
				{
					builder
					.Query("flat_amount", flat_amount)
					.Query("percent_amount", percent_amount);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promotion"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 CreatePromotion (ColonyConcierge.APIData.Data.Promotion promotion )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.CreatePromotion"))
		{
			return _connector.Post<Int32>("/coupons_admin/promotions")
				.Parameter(promotion);
		}
	}
	///<summary>
	///Async version of <see cref="CreatePromotion"/>
	///</summary>
	public async Task<Int32> CreatePromotion_Async (ColonyConcierge.APIData.Data.Promotion promotion )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.CreatePromotion")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/coupons_admin/promotions",
				builder =>
				{
					builder
					.Parameter(promotion);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Promotion&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Promotion> GetPromotions (object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotions"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Promotion>>("/coupons_admin/promotions")
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetPromotions"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Promotion>> GetPromotions_Async (object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotions")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Promotion>>("/coupons_admin/promotions",
				builder =>
				{
					builder
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/ids?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPromotionIDs (object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotionIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/coupons_admin/promotions/ids")
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetPromotionIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPromotionIDs_Async (object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotionIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/coupons_admin/promotions/ids",
				builder =>
				{
					builder
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promo_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Promotion' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/{promo_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Promotion GetPromotion (object promo_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotion"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Promotion>("/coupons_admin/promotions/{promo_id}")
				.Parameter("promo_id", promo_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPromotion"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Promotion> GetPromotion_Async (object promo_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotion")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Promotion>("/coupons_admin/promotions/{promo_id}",
				builder =>
				{
					builder
					.Parameter("promo_id", promo_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promo_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="promotion"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/{promo_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdatePromotion (object promo_id, ColonyConcierge.APIData.Data.Promotion promotion )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.UpdatePromotion"))
		{
			return _connector.Put<Boolean>("/coupons_admin/promotions/{promo_id}")
				.Parameter("promo_id", promo_id)
				.Parameter(promotion);
		}
	}
	///<summary>
	///Async version of <see cref="UpdatePromotion"/>
	///</summary>
	public async Task<Boolean> UpdatePromotion_Async (object promo_id, ColonyConcierge.APIData.Data.Promotion promotion )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.UpdatePromotion")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/coupons_admin/promotions/{promo_id}",
				builder =>
				{
					builder
					.Parameter("promo_id", promo_id)
					.Parameter(promotion);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promo_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/{promo_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeletePromotion (object promo_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.DeletePromotion"))
		{
			return _connector.Delete<Boolean>("/coupons_admin/promotions/{promo_id}")
				.Parameter("promo_id", promo_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeletePromotion"/>
	///</summary>
	public async Task<Boolean> DeletePromotion_Async (object promo_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.DeletePromotion")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/coupons_admin/promotions/{promo_id}",
				builder =>
				{
					builder
					.Parameter("promo_id", promo_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promo_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/{promo_id}/use_count</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 GetPromotionUsageCount (object promo_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotionUsageCount"))
		{
			return _connector.Get<Int32>("/coupons_admin/promotions/{promo_id}/use_count")
				.Parameter("promo_id", promo_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPromotionUsageCount"/>
	///</summary>
	public async Task<Int32> GetPromotionUsageCount_Async (object promo_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotionUsageCount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Int32>("/coupons_admin/promotions/{promo_id}/use_count",
				builder =>
				{
					builder
					.Parameter("promo_id", promo_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promo_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Decimal' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/{promo_id}/usage_sum</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Decimal GetPromotionUsageSum (object promo_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotionUsageSum"))
		{
			return _connector.Get<System.Decimal>("/coupons_admin/promotions/{promo_id}/usage_sum")
				.Parameter("promo_id", promo_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPromotionUsageSum"/>
	///</summary>
	public async Task<System.Decimal> GetPromotionUsageSum_Async (object promo_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetPromotionUsageSum")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Decimal>("/coupons_admin/promotions/{promo_id}/usage_sum",
				builder =>
				{
					builder
					.Parameter("promo_id", promo_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="promo_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/coupons_admin/promotions/{promo_id}/related_orders</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateDiscounts' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetRelatedOrderIds (object promo_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetRelatedOrderIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/coupons_admin/promotions/{promo_id}/related_orders")
				.Parameter("promo_id", promo_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetRelatedOrderIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetRelatedOrderIds_Async (object promo_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ICouponsAdmin.GetRelatedOrderIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/coupons_admin/promotions/{promo_id}/related_orders",
				builder =>
				{
					builder
					.Parameter("promo_id", promo_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'ILogins' API server interface
///</summary>
public class CC_API_ILogins : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_ILogins() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_ILogins(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Log's in a user, and returns a hashed login token
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="password"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.LoginResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.LoginResult GetLoginToken (object username_or_email, System.String password )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetLoginToken"))
		{
			return _connector.Post<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}")
				.Parameter("username_or_email", username_or_email)
				.Parameter(password).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="GetLoginToken"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.LoginResult> GetLoginToken_Async (object username_or_email, System.String password )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetLoginToken")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email)
					.Parameter(password);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Log's in a user, and returns a hashed login token. This version also checks that the user is a worker, and will fail the login if not.
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="password"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.LoginResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/for_worker</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.LoginResult GetLoginTokenForWorker (object username_or_email, System.String password )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetLoginTokenForWorker"))
		{
			return _connector.Post<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}/for_worker")
				.Parameter("username_or_email", username_or_email)
				.Parameter(password).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="GetLoginTokenForWorker"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.LoginResult> GetLoginTokenForWorker_Async (object username_or_email, System.String password )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetLoginTokenForWorker")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}/for_worker",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email)
					.Parameter(password);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="role_name"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="password"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<param name="for_worker"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.LoginResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/for_role/{role_name}?for_worker={for_worker}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.LoginResult GetLoginTokenForRole (object username_or_email, object role_name, System.String password, object for_worker = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetLoginTokenForRole"))
		{
			return _connector.Post<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}/for_role/{role_name}")
				.Parameter("username_or_email", username_or_email)
				.Parameter("role_name", role_name)
				.Parameter(password)
				.Query("for_worker", for_worker).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="GetLoginTokenForRole"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.LoginResult> GetLoginTokenForRole_Async (object username_or_email, object role_name, System.String password, object for_worker = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetLoginTokenForRole")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}/for_role/{role_name}",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email)
					.Parameter("role_name", role_name)
					.Parameter(password)
					.Query("for_worker", for_worker);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Sets a new password for a user, and returns a new login token
	///</summary>
	///<param name="username"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="password"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.LoginResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username}/password</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.LoginResult SetPassword (object username, System.String password )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.SetPassword"))
		{
			return _connector.Put<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username}/password")
				.Parameter("username", username)
				.Parameter(password).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="SetPassword"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.LoginResult> SetPassword_Async (object username, System.String password )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.SetPassword")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username}/password",
				builder =>
				{
					builder
					.Parameter("username", username)
					.Parameter(password);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Sets a new password for a user, and requires a secret answer, and returns a new login token
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="securityAnswer"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.LoginResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/new_password</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.LoginResult SetLostPassword (object username_or_email, ColonyConcierge.APIData.Data.LostPasswordData securityAnswer )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.SetLostPassword"))
		{
			return _connector.Put<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}/new_password")
				.Parameter("username_or_email", username_or_email)
				.Parameter(securityAnswer).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="SetLostPassword"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.LoginResult> SetLostPassword_Async (object username_or_email, ColonyConcierge.APIData.Data.LostPasswordData securityAnswer )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.SetLostPassword")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<ColonyConcierge.APIData.Data.LoginResult>("/logins/{username_or_email}/new_password",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email)
					.Parameter(securityAnswer);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Causes a 'reset password' email to get generated for specified username or email address'
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/reset</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean ResetPassword (object username_or_email )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.ResetPassword"))
		{
			return _connector.Post<Boolean>("/logins/{username_or_email}/reset")
				.Parameter("username_or_email", username_or_email);
		}
	}
	///<summary>
	///Async version of <see cref="ResetPassword"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> ResetPassword_Async (object username_or_email )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.ResetPassword")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logins/{username_or_email}/reset",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of question ID's for this user
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/questions</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetQuestionIDs (object username_or_email )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetQuestionIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logins/{username_or_email}/questions")
				.Parameter("username_or_email", username_or_email);
		}
	}
	///<summary>
	///Async version of <see cref="GetQuestionIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetQuestionIDs_Async (object username_or_email )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetQuestionIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logins/{username_or_email}/questions",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the text of a question for a given question ID
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="question_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.SecurityQuestion' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/questions/{question_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.SecurityQuestion GetQuestion (object username_or_email, object question_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetQuestion"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.SecurityQuestion>("/logins/{username_or_email}/questions/{question_id}")
				.Parameter("username_or_email", username_or_email)
				.Parameter("question_id", question_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetQuestion"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.SecurityQuestion> GetQuestion_Async (object username_or_email, object question_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetQuestion")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.SecurityQuestion>("/logins/{username_or_email}/questions/{question_id}",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email)
					.Parameter("question_id", question_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Tests that a security question is correct. The 'password' parameter is ignored. Be careful, too many wrong answers will trigger an account lockout.
	///</summary>
	///<param name="username_or_email"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="security_answer"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.SecurityAnswerCheckResult' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username_or_email}/answers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.SecurityAnswerCheckResult IsAnswerCorrect (object username_or_email, ColonyConcierge.APIData.Data.LostPasswordData security_answer )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsAnswerCorrect"))
		{
			return _connector.Post<ColonyConcierge.APIData.Data.SecurityAnswerCheckResult>("/logins/{username_or_email}/answers")
				.Parameter("username_or_email", username_or_email)
				.Parameter(security_answer).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="IsAnswerCorrect"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.SecurityAnswerCheckResult> IsAnswerCorrect_Async (object username_or_email, ColonyConcierge.APIData.Data.LostPasswordData security_answer )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsAnswerCorrect")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<ColonyConcierge.APIData.Data.SecurityAnswerCheckResult>("/logins/{username_or_email}/answers",
				builder =>
				{
					builder
					.Parameter("username_or_email", username_or_email)
					.Parameter(security_answer);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Enables a new account, based on a key send in a verification email.
	///</summary>
	///<param name="username"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="verification_key"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username}/verify/{verification_key}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean EnableAccount (object username, object verification_key )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.EnableAccount"))
		{
			return _connector.Post<Boolean>("/logins/{username}/verify/{verification_key}")
				.Parameter("username", username)
				.Parameter("verification_key", verification_key);
		}
	}
	///<summary>
	///Async version of <see cref="EnableAccount"/>
	///</summary>
	public async Task<Boolean> EnableAccount_Async (object username, object verification_key )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.EnableAccount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logins/{username}/verify/{verification_key}",
				builder =>
				{
					builder
					.Parameter("username", username)
					.Parameter("verification_key", verification_key);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a user structure for a logged in user
	///</summary>
	///<param name="token"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.User' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{token}/user</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.User GetUser (object token )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetUser"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.User>("/logins/{token}/user")
				.Parameter("token", token);
		}
	}
	///<summary>
	///Async version of <see cref="GetUser"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.User> GetUser_Async (object token )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.GetUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.User>("/logins/{token}/user",
				builder =>
				{
					builder
					.Parameter("token", token);
				});
			return await result;
		}
	}

	///<summary>
	/// Logs out the referenced session
	///</summary>
	///<param name="token"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Result' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{token}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Result Logout (object token )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.Logout"))
		{
			return _connector.Delete<ColonyConcierge.APIData.Data.Result>("/logins/{token}")
				.Parameter("token", token).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="Logout"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Result> Logout_Async (object token )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.Logout")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<ColonyConcierge.APIData.Data.Result>("/logins/{token}",
				builder =>
				{
					builder
					.Parameter("token", token);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Logs out all login sessions related to s specific user
	///</summary>
	///<param name="username"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Result' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/{username}/logins</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Result LogoutAllSessions (object username )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.LogoutAllSessions"))
		{
			return _connector.Delete<ColonyConcierge.APIData.Data.Result>("/logins/{username}/logins")
				.Parameter("username", username).Raw();
		}
	}
	///<summary>
	///Async version of <see cref="LogoutAllSessions"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Result> LogoutAllSessions_Async (object username )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.LogoutAllSessions")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<ColonyConcierge.APIData.Data.Result>("/logins/{username}/logins",
				builder =>
				{
					builder
					.Parameter("username", username);
				}).RawAsync();
			return await result;
		}
	}

	///<summary>
	/// Checks to see if the email address is registered
	///</summary>
	///<param name="email_address"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/validity/email_addresses/{email_address}/in_use</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IsUserEmailRegistered (object email_address )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsUserEmailRegistered"))
		{
			return _connector.Get<Boolean>("/logins/validity/email_addresses/{email_address}/in_use")
				.Parameter("email_address", email_address);
		}
	}
	///<summary>
	///Async version of <see cref="IsUserEmailRegistered"/>
	///</summary>
	public async Task<Boolean> IsUserEmailRegistered_Async (object email_address )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsUserEmailRegistered")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/logins/validity/email_addresses/{email_address}/in_use",
				builder =>
				{
					builder
					.Parameter("email_address", email_address);
				});
			return await result;
		}
	}

	///<summary>
	/// Checks if the given username is already registered
	///</summary>
	///<param name="user_name"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/validity/usernames/{user_name}/in_use</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IsUserNameRegistered (object user_name )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsUserNameRegistered"))
		{
			return _connector.Get<Boolean>("/logins/validity/usernames/{user_name}/in_use")
				.Parameter("user_name", user_name);
		}
	}
	///<summary>
	///Async version of <see cref="IsUserNameRegistered"/>
	///</summary>
	public async Task<Boolean> IsUserNameRegistered_Async (object user_name )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsUserNameRegistered")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/logins/validity/usernames/{user_name}/in_use",
				builder =>
				{
					builder
					.Parameter("user_name", user_name);
				});
			return await result;
		}
	}

	///<summary>
	/// Checks if the given username is valid according to system rules
	///</summary>
	///<param name="user_name"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/validity/usernames/{user_name}/is_valid</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IsUserNameValid (object user_name )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsUserNameValid"))
		{
			return _connector.Get<Boolean>("/logins/validity/usernames/{user_name}/is_valid")
				.Parameter("user_name", user_name);
		}
	}
	///<summary>
	///Async version of <see cref="IsUserNameValid"/>
	///</summary>
	public async Task<Boolean> IsUserNameValid_Async (object user_name )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsUserNameValid")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/logins/validity/usernames/{user_name}/is_valid",
				builder =>
				{
					builder
					.Parameter("user_name", user_name);
				});
			return await result;
		}
	}

	///<summary>
	/// Checks if the given password is valid according to system rules
	///</summary>
	///<param name="password"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logins/validity/passwords/is_valid</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IsPasswordValid (System.String password )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsPasswordValid"))
		{
			return _connector.Post<Boolean>("/logins/validity/passwords/is_valid")
				.Parameter(password);
		}
	}
	///<summary>
	///Async version of <see cref="IsPasswordValid"/>
	///</summary>
	public async Task<Boolean> IsPasswordValid_Async (System.String password )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogins.IsPasswordValid")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logins/validity/passwords/is_valid",
				builder =>
				{
					builder
					.Parameter(password);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'ILogistics' API server interface
///</summary>
public class CC_API_ILogistics : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_ILogistics() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_ILogistics(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Assigns a scheduled service to a user
	///This assigns a scheduled service to a user
	///<note type="note">This API may be going away with the logistics refactor</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="contractor_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///an ID to the newly created job object.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/scheduled_services/{service_id}/assign/{contractor_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by a user that is setup in the system as an Asystant (Employee or Contractor)</li>
	///<li>Requires the 'DispatchJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 DispatchService (object service_id, object contractor_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.DispatchService"))
		{
			return _connector.Post<Int32>("/logistics/scheduled_services/{service_id}/assign/{contractor_id}")
				.Parameter("service_id", service_id)
				.Parameter("contractor_id", contractor_id);
		}
	}
	///<summary>
	///Async version of <see cref="DispatchService"/>
	///</summary>
	public async Task<Int32> DispatchService_Async (object service_id, object contractor_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.DispatchService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/logistics/scheduled_services/{service_id}/assign/{contractor_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("contractor_id", contractor_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/schedule_groups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetScheduleGroupIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetScheduleGroupIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/schedule_groups/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroupIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetScheduleGroupIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetScheduleGroupIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/schedule_groups/ids");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.ScheduleGroup&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/schedule_groups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup> GetScheduleGroups ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetScheduleGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>>("/logistics/schedule_groups");
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>> GetScheduleGroups_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetScheduleGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>>("/logistics/schedule_groups");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.ScheduleGroup' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/schedule_groups/{schedule_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.ScheduleGroup GetScheduleGroup (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetScheduleGroup"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>("/logistics/schedule_groups/{schedule_group_id}")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroup"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup> GetScheduleGroup_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>("/logistics/schedule_groups/{schedule_group_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of open jobs available to the specified user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user id of the user
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/allocatedschedules/for_user/{user_id}/ids?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetAllocatedScheduleIDs (object user_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedScheduleIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/allocatedschedules/for_user/{user_id}/ids")
				.Parameter("user_id", user_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetAllocatedScheduleIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetAllocatedScheduleIDs_Async (object user_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedScheduleIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/allocatedschedules/for_user/{user_id}/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of open jobs available to the specified user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user id of the user
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/allocatedschedules/for_user/{user_id}?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot> GetAllocatedSchedules (object user_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedSchedules"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>>("/logistics/allocatedschedules/for_user/{user_id}")
				.Parameter("user_id", user_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetAllocatedSchedules"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>> GetAllocatedSchedules_Async (object user_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedSchedules")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>>("/logistics/allocatedschedules/for_user/{user_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/allocatedschedules/for_user/{user_id}/{schedule_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot GetAllocatedSchedule (object user_id, object schedule_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedSchedule"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>("/logistics/allocatedschedules/for_user/{user_id}/{schedule_id}")
				.Parameter("user_id", user_id)
				.Parameter("schedule_id", schedule_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAllocatedSchedule"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot> GetAllocatedSchedule_Async (object user_id, object schedule_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedSchedule")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>("/logistics/allocatedschedules/for_user/{user_id}/{schedule_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("schedule_id", schedule_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/allocatedschedules/for_user/{user_id}/by_list_ids/{schedule_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot> GetAllocatedSchedulesByIdList (object user_id, object schedule_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedSchedulesByIdList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>>("/logistics/allocatedschedules/for_user/{user_id}/by_list_ids/{schedule_id_list}")
				.Parameter("user_id", user_id)
				.Parameter("schedule_id_list", schedule_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetAllocatedSchedulesByIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>> GetAllocatedSchedulesByIdList_Async (object user_id, object schedule_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAllocatedSchedulesByIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>>("/logistics/allocatedschedules/for_user/{user_id}/by_list_ids/{schedule_id_list}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("schedule_id_list", schedule_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of open jobs available to the specified user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user id of the user
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/allocatedschedules/signed_up?start_date={start}&amp;end_date={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot> GetUserSignedUpAllocatedSchedules (object user_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetUserSignedUpAllocatedSchedules"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>>("/logistics/{user_id}/allocatedschedules/signed_up")
				.Parameter("user_id", user_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetUserSignedUpAllocatedSchedules"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>> GetUserSignedUpAllocatedSchedules_Async (object user_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetUserSignedUpAllocatedSchedules")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.AllocatedScheduleSlot>>("/logistics/{user_id}/allocatedschedules/signed_up",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="allocated_schedule_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="is_standby"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup?is_standby={is_standby}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by a user that is setup in the system as an Asystant (Employee or Contractor)</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SignUpForAllocatedSchedule (object user_id, object allocated_schedule_id, object is_standby = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.SignUpForAllocatedSchedule"))
		{
			return _connector.Put<Boolean>("/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup")
				.Parameter("user_id", user_id)
				.Parameter("allocated_schedule_id", allocated_schedule_id)
				.Query("is_standby", is_standby);
		}
	}
	///<summary>
	///Async version of <see cref="SignUpForAllocatedSchedule"/>
	///</summary>
	public async Task<Boolean> SignUpForAllocatedSchedule_Async (object user_id, object allocated_schedule_id, object is_standby = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.SignUpForAllocatedSchedule")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("allocated_schedule_id", allocated_schedule_id)
					.Query("is_standby", is_standby);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="allocated_schedule_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CancelSignupForAllocatedSchedule (object user_id, object allocated_schedule_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.CancelSignupForAllocatedSchedule"))
		{
			return _connector.Delete<Boolean>("/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup")
				.Parameter("user_id", user_id)
				.Parameter("allocated_schedule_id", allocated_schedule_id);
		}
	}
	///<summary>
	///Async version of <see cref="CancelSignupForAllocatedSchedule"/>
	///</summary>
	public async Task<Boolean> CancelSignupForAllocatedSchedule_Async (object user_id, object allocated_schedule_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.CancelSignupForAllocatedSchedule")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/logistics/{user_id}/allocatedschedules/{allocated_schedule_id}/signup",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("allocated_schedule_id", allocated_schedule_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/clocked_in</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Requires the 'ClockInOut' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IsUserClockedIn (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.IsUserClockedIn"))
		{
			return _connector.Get<Boolean>("/logistics/{user_id}/clocked_in")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="IsUserClockedIn"/>
	///</summary>
	public async Task<Boolean> IsUserClockedIn_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.IsUserClockedIn")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/logistics/{user_id}/clocked_in",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves information about if a worker can clock in, if they are currently clocked in, past clockin/clockout times, and optionally at which point in
	///time in the future the user will be allowed to clock in.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.WorkerClockInInfo' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/clockin_info</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Requires the 'ClockInOut' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.WorkerClockInInfo GetUserClockInInfo (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetUserClockInInfo"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.WorkerClockInInfo>("/logistics/{user_id}/clockin_info")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUserClockInInfo"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.WorkerClockInInfo> GetUserClockInInfo_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetUserClockInInfo")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.WorkerClockInInfo>("/logistics/{user_id}/clockin_info",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/clock_in</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ClockInOut' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ClockIn (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.ClockIn"))
		{
			return _connector.Put<Boolean>("/logistics/{user_id}/clock_in")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="ClockIn"/>
	///</summary>
	public async Task<Boolean> ClockIn_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.ClockIn")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics/{user_id}/clock_in",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/clock_out</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ClockInOut' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ClockOut (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.ClockOut"))
		{
			return _connector.Put<Boolean>("/logistics/{user_id}/clock_out")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="ClockOut"/>
	///</summary>
	public async Task<Boolean> ClockOut_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.ClockOut")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics/{user_id}/clock_out",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.Job' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/{job_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.Job GetJob (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJob"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.Job>("/logistics/user/{user_id}/jobs/{job_id}")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJob"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.Job> GetJob_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.Job>("/logistics/user/{user_id}/jobs/{job_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.JobDetails' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/{job_id}/details</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.JobDetails GetJobDetails (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobDetails"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.JobDetails>("/logistics/user/{user_id}/jobs/{job_id}/details")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobDetails"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.JobDetails> GetJobDetails_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobDetails")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.JobDetails>("/logistics/user/{user_id}/jobs/{job_id}/details",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/by_id_list/{job_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetJobsByIdList (object user_id, object job_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobsByIdList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/by_id_list/{job_id_list}")
				.Parameter("user_id", user_id)
				.Parameter("job_id_list", job_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobsByIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetJobsByIdList_Async (object user_id, object job_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobsByIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/by_id_list/{job_id_list}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id_list", job_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/{job_id}/history</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry> GetJobHistory (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobHistory"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry>>("/logistics/user/{user_id}/jobs/{job_id}/history")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobHistory"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry>> GetJobHistory_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobHistory")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry>>("/logistics/user/{user_id}/jobs/{job_id}/history",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>This function has been renamed to GetOpenJobIds, please call that one instead.</note>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/available/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("This function has been renamed to GetOpenJobIds, please call that one instead.", true)]
	public System.Collections.Generic.List<Int32> GetAvailableJobIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAvailableJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/available/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableJobIds"/>
	///</summary>
	[Obsolete("This function has been renamed to GetOpenJobIds, please call that one instead.", true)]
	public async Task<System.Collections.Generic.List<Int32>> GetAvailableJobIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAvailableJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/available/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>This function has been renamed to GetOpenJobs, please call that one instead.</note>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/available</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("This function has been renamed to GetOpenJobs, please call that one instead.", true)]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetAvailableJobs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAvailableJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/available")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableJobs"/>
	///</summary>
	[Obsolete("This function has been renamed to GetOpenJobs, please call that one instead.", true)]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetAvailableJobs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAvailableJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/available",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/open/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetOpenJobIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOpenJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/open/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetOpenJobIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetOpenJobIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOpenJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/open/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/open</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetOpenJobs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOpenJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/open")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetOpenJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetOpenJobs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOpenJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/open",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/offered/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetOfferedJobIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOfferedJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/offered/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetOfferedJobIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetOfferedJobIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOfferedJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/offered/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/offered</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetOfferedJobs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOfferedJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/offered")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetOfferedJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetOfferedJobs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetOfferedJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/offered",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/claimed/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetClaimedJobIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetClaimedJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/claimed/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetClaimedJobIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetClaimedJobIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetClaimedJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/claimed/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/claimed</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetClaimedJobs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetClaimedJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/claimed")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetClaimedJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetClaimedJobs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetClaimedJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/claimed",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/active/assigned/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetAssignedActiveJobIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAssignedActiveJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/active/assigned/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAssignedActiveJobIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetAssignedActiveJobIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAssignedActiveJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/active/assigned/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/active/assigned</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetAssignedActiveJobs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAssignedActiveJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/active/assigned")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAssignedActiveJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetAssignedActiveJobs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetAssignedActiveJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/active/assigned",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/active/in_progress/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetInProgressJobIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetInProgressJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/active/in_progress/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetInProgressJobIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetInProgressJobIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetInProgressJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/active/in_progress/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/active/in_progress</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetInProgressJobs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetInProgressJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/active/in_progress")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetInProgressJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetInProgressJobs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetInProgressJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/active/in_progress",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of ids for completed jobs.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/completed/ids?start_date={start}&amp;end_date={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetCompletedJobIds (object user_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetCompletedJobIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/completed/ids")
				.Parameter("user_id", user_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetCompletedJobIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetCompletedJobIds_Async (object user_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetCompletedJobIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics/user/{user_id}/jobs/completed/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///Get a list of completed job objects.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/completed?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetCompleteJobs (object user_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetCompleteJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/completed")
				.Parameter("user_id", user_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetCompleteJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetCompleteJobs_Async (object user_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetCompleteJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics/user/{user_id}/jobs/completed",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///Accepts a job for the user. If this job is no longer available to the user, an id of 0 will be returned.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user id of the user
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The job id of the job to accept.
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///The id of the job assignment ticket, or '0' if the call failed.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/{job_id}/accept</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AcceptJob (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.AcceptJob"))
		{
			return _connector.Put<Int32>("/logistics/{user_id}/jobs/{job_id}/accept")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="AcceptJob"/>
	///</summary>
	public async Task<Int32> AcceptJob_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.AcceptJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Int32>("/logistics/{user_id}/jobs/{job_id}/accept",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///rejects a job for the user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user id of the user
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The job id of the job to accept.
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///"true", of the job was rejected, or "false" if the job was no longer available to reject.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/{job_id}/reject</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean RejectJob (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.RejectJob"))
		{
			return _connector.Put<Boolean>("/logistics/{user_id}/jobs/{job_id}/reject")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="RejectJob"/>
	///</summary>
	public async Task<Boolean> RejectJob_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.RejectJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics/{user_id}/jobs/{job_id}/reject",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///Claims an open job for the user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/{job_id}/claim</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ClaimOpenJob (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.ClaimOpenJob"))
		{
			return _connector.Put<Boolean>("/logistics/{user_id}/jobs/{job_id}/claim")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="ClaimOpenJob"/>
	///</summary>
	public async Task<Boolean> ClaimOpenJob_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.ClaimOpenJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics/{user_id}/jobs/{job_id}/claim",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///This is how the worker may specify that they are physically starting the job.
	///This will make the job "In Progress"
	///You may only call this on "root level" jobs.
	///This will implicitly make all Child jobs also "in progress"
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/{job_id}/start</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean StartJob (object user_id, object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.StartJob"))
		{
			return _connector.Put<Boolean>("/logistics/{user_id}/jobs/{job_id}/start")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="StartJob"/>
	///</summary>
	public async Task<Boolean> StartJob_Async (object user_id, object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.StartJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics/{user_id}/jobs/{job_id}/start",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///This should be called on a job whether it is successful or not.
	///You may only call this on job that have no child (ie, jobs that are themselves child job)
	///You must also make sure that any prerequisite jobs listed are first closed, or the call will fail.
	///The parent job will implicitly be closed when all of it's constituent jobs are closed.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="completionData"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/close</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CloseJob (object user_id, ColonyConcierge.APIData.Data.Logistics.JobCompletionData completionData )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.CloseJob"))
		{
			return _connector.Post<Boolean>("/logistics/{user_id}/jobs/close")
				.Parameter("user_id", user_id)
				.Parameter(completionData);
		}
	}
	///<summary>
	///Async version of <see cref="CloseJob"/>
	///</summary>
	public async Task<Boolean> CloseJob_Async (object user_id, ColonyConcierge.APIData.Data.Logistics.JobCompletionData completionData )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.CloseJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics/{user_id}/jobs/close",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(completionData);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="completionData"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/close_by_list</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CloseJobList (object user_id, System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobCompletionData> completionData )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.CloseJobList"))
		{
			return _connector.Post<Boolean>("/logistics/{user_id}/jobs/close_by_list")
				.Parameter("user_id", user_id)
				.Parameter(completionData);
		}
	}
	///<summary>
	///Async version of <see cref="CloseJobList"/>
	///</summary>
	public async Task<Boolean> CloseJobList_Async (object user_id, System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobCompletionData> completionData )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.CloseJobList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics/{user_id}/jobs/close_by_list",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(completionData);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="send_to_manager"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="send_to_customer"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="message"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/{user_id}/jobs/{job_id}/message/{send_to_manager}/{send_to_customer}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SendJobMessage (object user_id, object job_id, object send_to_manager, object send_to_customer, System.String message )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.SendJobMessage"))
		{
			return _connector.Post<Boolean>("/logistics/{user_id}/jobs/{job_id}/message/{send_to_manager}/{send_to_customer}")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id)
				.Parameter("send_to_manager", send_to_manager)
				.Parameter("send_to_customer", send_to_customer)
				.Parameter(message);
		}
	}
	///<summary>
	///Async version of <see cref="SendJobMessage"/>
	///</summary>
	public async Task<Boolean> SendJobMessage_Async (object user_id, object job_id, object send_to_manager, object send_to_customer, System.String message )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.SendJobMessage")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics/{user_id}/jobs/{job_id}/message/{send_to_manager}/{send_to_customer}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id)
					.Parameter("send_to_manager", send_to_manager)
					.Parameter("send_to_customer", send_to_customer)
					.Parameter(message);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a scheduled Service tied to a specified job.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="scheduled_service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledService' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics/user/{user_id}/jobs/{job_id}/scheduled_service/{scheduled_service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Requires the 'ViewJobs' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ScheduledService GetJobScheduledService (object user_id, object job_id, object scheduled_service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobScheduledService"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledService>("/logistics/user/{user_id}/jobs/{job_id}/scheduled_service/{scheduled_service_id}")
				.Parameter("user_id", user_id)
				.Parameter("job_id", job_id)
				.Parameter("scheduled_service_id", scheduled_service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobScheduledService"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ScheduledService> GetJobScheduledService_Async (object user_id, object job_id, object scheduled_service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogistics.GetJobScheduledService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledService>("/logistics/user/{user_id}/jobs/{job_id}/scheduled_service/{scheduled_service_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("job_id", job_id)
					.Parameter("scheduled_service_id", scheduled_service_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'ILogisticsAdmin' API server interface
///</summary>
public class CC_API_ILogisticsAdmin : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_ILogisticsAdmin() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_ILogisticsAdmin(Connector connector) : base(connector)
	{
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetScheduleGroupIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics_admin/schedule_groups/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroupIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetScheduleGroupIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics_admin/schedule_groups/ids");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.ScheduleGroup&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup> GetScheduleGroups ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>>("/logistics_admin/schedule_groups");
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>> GetScheduleGroups_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>>("/logistics_admin/schedule_groups");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.ScheduleGroup' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageLogistics' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.ScheduleGroup GetScheduleGroup (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroup"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>("/logistics_admin/schedule_groups/{schedule_group_id}")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroup"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup> GetScheduleGroup_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.ScheduleGroup>("/logistics_admin/schedule_groups/{schedule_group_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="newGroup"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddScheduleGroup (ColonyConcierge.APIData.Data.Logistics.ScheduleGroup newGroup )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.AddScheduleGroup"))
		{
			return _connector.Post<Int32>("/logistics_admin/schedule_groups")
				.Parameter(newGroup);
		}
	}
	///<summary>
	///Async version of <see cref="AddScheduleGroup"/>
	///</summary>
	public async Task<Int32> AddScheduleGroup_Async (ColonyConcierge.APIData.Data.Logistics.ScheduleGroup newGroup )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.AddScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/logistics_admin/schedule_groups",
				builder =>
				{
					builder
					.Parameter(newGroup);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="updatedGroup"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateScheduleGroup (object schedule_group_id, ColonyConcierge.APIData.Data.Logistics.ScheduleGroup updatedGroup )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.UpdateScheduleGroup"))
		{
			return _connector.Put<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter(updatedGroup);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateScheduleGroup"/>
	///</summary>
	public async Task<Boolean> UpdateScheduleGroup_Async (object schedule_group_id, ColonyConcierge.APIData.Data.Logistics.ScheduleGroup updatedGroup )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.UpdateScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter(updatedGroup);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteScheduleGroup (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.DeleteScheduleGroup"))
		{
			return _connector.Delete<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteScheduleGroup"/>
	///</summary>
	public async Task<Boolean> DeleteScheduleGroup_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.DeleteScheduleGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.User' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assignee</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.User GetScheduleGroupEmergencyAssignee (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupEmergencyAssignee"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.User>("/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assignee")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroupEmergencyAssignee"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.User> GetScheduleGroupEmergencyAssignee_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupEmergencyAssignee")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.User>("/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assignee",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assigne/{user_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetScheduleGroupEmergencyAssignee (object schedule_group_id, object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.SetScheduleGroupEmergencyAssignee"))
		{
			return _connector.Put<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assigne/{user_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="SetScheduleGroupEmergencyAssignee"/>
	///</summary>
	public async Task<Boolean> SetScheduleGroupEmergencyAssignee_Async (object schedule_group_id, object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.SetScheduleGroupEmergencyAssignee")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/emergency_assigne/{user_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/holidays/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetScheduleGroupHolidayIDs (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupHolidayIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/ids")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroupHolidayIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetScheduleGroupHolidayIDs_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupHolidayIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/ids",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/holidays</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday> GetScheduleGroupHolidays (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupHolidays"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday>>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroupHolidays"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday>> GetScheduleGroupHolidays_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupHolidays")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday>>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_group_holiday_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday GetScheduleGroupHoliday (object schedule_group_id, object schedule_group_holiday_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupHoliday"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("schedule_group_holiday_id", schedule_group_holiday_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleGroupHoliday"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday> GetScheduleGroupHoliday_Async (object schedule_group_id, object schedule_group_holiday_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleGroupHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("schedule_group_holiday_id", schedule_group_holiday_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holidayEntry"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/holidays</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddScheduleGroupHoliday (object schedule_group_id, ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday holidayEntry )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.AddScheduleGroupHoliday"))
		{
			return _connector.Post<Int32>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter(holidayEntry);
		}
	}
	///<summary>
	///Async version of <see cref="AddScheduleGroupHoliday"/>
	///</summary>
	public async Task<Int32> AddScheduleGroupHoliday_Async (object schedule_group_id, ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday holidayEntry )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.AddScheduleGroupHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter(holidayEntry);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_group_holiday_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holidayEntry"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateScheduleGroupHoliday (object schedule_group_id, object schedule_group_holiday_id, ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday holidayEntry )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.UpdateScheduleGroupHoliday"))
		{
			return _connector.Put<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("schedule_group_holiday_id", schedule_group_holiday_id)
				.Parameter(holidayEntry);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateScheduleGroupHoliday"/>
	///</summary>
	public async Task<Boolean> UpdateScheduleGroupHoliday_Async (object schedule_group_id, object schedule_group_holiday_id, ColonyConcierge.APIData.Data.Logistics.ScheduleGroupHoliday holidayEntry )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.UpdateScheduleGroupHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("schedule_group_holiday_id", schedule_group_holiday_id)
					.Parameter(holidayEntry);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_group_holiday_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteScheduleGroupHoliday (object schedule_group_id, object schedule_group_holiday_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.DeleteScheduleGroupHoliday"))
		{
			return _connector.Delete<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("schedule_group_holiday_id", schedule_group_holiday_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteScheduleGroupHoliday"/>
	///</summary>
	public async Task<Boolean> DeleteScheduleGroupHoliday_Async (object schedule_group_id, object schedule_group_holiday_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.DeleteScheduleGroupHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/holidays/{schedule_group_holiday_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("schedule_group_holiday_id", schedule_group_holiday_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/slots/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetScheduleSlotIDs (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleSlotIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/ids")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleSlotIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetScheduleSlotIDs_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleSlotIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/ids",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.ScheduleSlot&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/slots</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot> GetScheduleSlots (object schedule_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleSlots"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot>>("/logistics_admin/schedule_groups/{schedule_group_id}/slots")
				.Parameter("schedule_group_id", schedule_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleSlots"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot>> GetScheduleSlots_Async (object schedule_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleSlots")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot>>("/logistics_admin/schedule_groups/{schedule_group_id}/slots",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.ScheduleSlot' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.ScheduleSlot GetScheduleSlot (object schedule_group_id, object schedule_slot_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleSlot"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("schedule_slot_id", schedule_slot_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduleSlot"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot> GetScheduleSlot_Async (object schedule_group_id, object schedule_slot_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetScheduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.ScheduleSlot>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("schedule_slot_id", schedule_slot_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newSlot"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/slots</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddScheduleSlot (object schedule_group_id, ColonyConcierge.APIData.Data.Logistics.ScheduleSlot newSlot )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.AddScheduleSlot"))
		{
			return _connector.Post<Int32>("/logistics_admin/schedule_groups/{schedule_group_id}/slots")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter(newSlot);
		}
	}
	///<summary>
	///Async version of <see cref="AddScheduleSlot"/>
	///</summary>
	public async Task<Int32> AddScheduleSlot_Async (object schedule_group_id, ColonyConcierge.APIData.Data.Logistics.ScheduleSlot newSlot )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.AddScheduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/logistics_admin/schedule_groups/{schedule_group_id}/slots",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter(newSlot);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="slot"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateScheduleSlot (object schedule_group_id, object schedule_slot_id, ColonyConcierge.APIData.Data.Logistics.ScheduleSlot slot )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.UpdateScheduleSlot"))
		{
			return _connector.Put<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("schedule_slot_id", schedule_slot_id)
				.Parameter(slot);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateScheduleSlot"/>
	///</summary>
	public async Task<Boolean> UpdateScheduleSlot_Async (object schedule_group_id, object schedule_slot_id, ColonyConcierge.APIData.Data.Logistics.ScheduleSlot slot )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.UpdateScheduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("schedule_slot_id", schedule_slot_id)
					.Parameter(slot);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="schedule_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="schedule_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageScheduleGroups' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteScheduleSlot (object schedule_group_id, object schedule_slot_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.DeleteScheduleSlot"))
		{
			return _connector.Delete<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}")
				.Parameter("schedule_group_id", schedule_group_id)
				.Parameter("schedule_slot_id", schedule_slot_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteScheduleSlot"/>
	///</summary>
	public async Task<Boolean> DeleteScheduleSlot_Async (object schedule_group_id, object schedule_slot_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.DeleteScheduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/logistics_admin/schedule_groups/{schedule_group_id}/slots/{schedule_slot_id}",
				builder =>
				{
					builder
					.Parameter("schedule_group_id", schedule_group_id)
					.Parameter("schedule_slot_id", schedule_slot_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.JobManagementData&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/active</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobManagementData> GetActiveJobs ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetActiveJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobManagementData>>("/logistics_admin/jobs/active");
		}
	}
	///<summary>
	///Async version of <see cref="GetActiveJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobManagementData>> GetActiveJobs_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetActiveJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobManagementData>>("/logistics_admin/jobs/active");
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.Job' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.Logistics.Job GetJob (object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJob"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.Job>("/logistics_admin/jobs/{job_id}")
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJob"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.Logistics.Job> GetJob_Async (object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.Job>("/logistics_admin/jobs/{job_id}",
				builder =>
				{
					builder
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id_list"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/by_id_list</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetJobsByIdList (System.String job_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobsByIdList"))
		{
			return _connector.Put<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics_admin/jobs/by_id_list")
				.Parameter(job_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobsByIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetJobsByIdList_Async (System.String job_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobsByIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics_admin/jobs/by_id_list",
				builder =>
				{
					builder
					.Parameter(job_id_list);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/related_to/user/{user_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetJobsRelatedToUser (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobsRelatedToUser"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics_admin/jobs/related_to/user/{user_id}")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobsRelatedToUser"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetJobsRelatedToUser_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobsRelatedToUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/logistics_admin/jobs/related_to/user/{user_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Logistics.JobDetails' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/details</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Logistics.JobDetails GetJobDetails (object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobDetails"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Logistics.JobDetails>("/logistics_admin/jobs/{job_id}/details")
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobDetails"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Logistics.JobDetails> GetJobDetails_Async (object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobDetails")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Logistics.JobDetails>("/logistics_admin/jobs/{job_id}/details",
				builder =>
				{
					builder
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id_list"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.JobDetails&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/details/by_job_id_list</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails> GetJobDetailsByIdList (System.String job_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobDetailsByIdList"))
		{
			return _connector.Put<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails>>("/logistics_admin/jobs/details/by_job_id_list")
				.Parameter(job_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobDetailsByIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails>> GetJobDetailsByIdList_Async (System.String job_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobDetailsByIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails>>("/logistics_admin/jobs/details/by_job_id_list",
				builder =>
				{
					builder
					.Parameter(job_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/history</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry> GetJobHistory (object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobHistory"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry>>("/logistics_admin/jobs/{job_id}/history")
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobHistory"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry>> GetJobHistory_Async (object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetJobHistory")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobHistoryEntry>>("/logistics_admin/jobs/{job_id}/history",
				builder =>
				{
					builder
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///Controls whether or not the Logistics platform will automatically make offers and force-assignments on jobs.
	///When this is disabled, the job must be manually managed.
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="enable"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///true is automatic assignment should be performed, false otherwise.
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/autoassignment_enable/{enable}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean EnableJobAutomaticAssignment (object job_id, object enable )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.EnableJobAutomaticAssignment"))
		{
			return _connector.Put<Boolean>("/logistics_admin/jobs/{job_id}/autoassignment_enable/{enable}")
				.Parameter("job_id", job_id)
				.Parameter("enable", enable);
		}
	}
	///<summary>
	///Async version of <see cref="EnableJobAutomaticAssignment"/>
	///</summary>
	public async Task<Boolean> EnableJobAutomaticAssignment_Async (object job_id, object enable )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.EnableJobAutomaticAssignment")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics_admin/jobs/{job_id}/autoassignment_enable/{enable}",
				builder =>
				{
					builder
					.Parameter("job_id", job_id)
					.Parameter("enable", enable);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/offer/user/{user_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean OfferJobToUser (object job_id, object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.OfferJobToUser"))
		{
			return _connector.Post<Boolean>("/logistics_admin/jobs/{job_id}/offer/user/{user_id}")
				.Parameter("job_id", job_id)
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="OfferJobToUser"/>
	///</summary>
	public async Task<Boolean> OfferJobToUser_Async (object job_id, object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.OfferJobToUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics_admin/jobs/{job_id}/offer/user/{user_id}",
				builder =>
				{
					builder
					.Parameter("job_id", job_id)
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///Claims an job for the user. The job must not be already claimed.
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/claim/user/{user_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ClaimJobForUser (object job_id, object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.ClaimJobForUser"))
		{
			return _connector.Put<Boolean>("/logistics_admin/jobs/{job_id}/claim/user/{user_id}")
				.Parameter("job_id", job_id)
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="ClaimJobForUser"/>
	///</summary>
	public async Task<Boolean> ClaimJobForUser_Async (object job_id, object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.ClaimJobForUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/logistics_admin/jobs/{job_id}/claim/user/{user_id}",
				builder =>
				{
					builder
					.Parameter("job_id", job_id)
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///Re-assigns a job that is already assigned and in progress to a new user
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/reassign/user/{user_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ReassignJobToUser (object job_id, object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.ReassignJobToUser"))
		{
			return _connector.Post<Boolean>("/logistics_admin/jobs/{job_id}/reassign/user/{user_id}")
				.Parameter("job_id", job_id)
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="ReassignJobToUser"/>
	///</summary>
	public async Task<Boolean> ReassignJobToUser_Async (object job_id, object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.ReassignJobToUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics_admin/jobs/{job_id}/reassign/user/{user_id}",
				builder =>
				{
					builder
					.Parameter("job_id", job_id)
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/cancel_assignment</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CancelJobAssignment (object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.CancelJobAssignment"))
		{
			return _connector.Post<Boolean>("/logistics_admin/jobs/{job_id}/cancel_assignment")
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="CancelJobAssignment"/>
	///</summary>
	public async Task<Boolean> CancelJobAssignment_Async (object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.CancelJobAssignment")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics_admin/jobs/{job_id}/cancel_assignment",
				builder =>
				{
					builder
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/cancel</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CancelJob (object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.CancelJob"))
		{
			return _connector.Post<Boolean>("/logistics_admin/jobs/{job_id}/cancel")
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="CancelJob"/>
	///</summary>
	public async Task<Boolean> CancelJob_Async (object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.CancelJob")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics_admin/jobs/{job_id}/cancel",
				builder =>
				{
					builder
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="job_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.WorkerManagementInfo&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/jobs/{job_id}/pontential_workers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.WorkerManagementInfo> GetPotentialWorkers (object job_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetPotentialWorkers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.WorkerManagementInfo>>("/logistics_admin/jobs/{job_id}/pontential_workers")
				.Parameter("job_id", job_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPotentialWorkers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.WorkerManagementInfo>> GetPotentialWorkers_Async (object job_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.GetPotentialWorkers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.WorkerManagementInfo>>("/logistics_admin/jobs/{job_id}/pontential_workers",
				builder =>
				{
					builder
					.Parameter("job_id", job_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="message"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/logistics_admin/workers/{user_id}/send_message</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageJobs' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SendWorkerMessage (object user_id, System.String message )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.SendWorkerMessage"))
		{
			return _connector.Post<Boolean>("/logistics_admin/workers/{user_id}/send_message")
				.Parameter("user_id", user_id)
				.Parameter(message);
		}
	}
	///<summary>
	///Async version of <see cref="SendWorkerMessage"/>
	///</summary>
	public async Task<Boolean> SendWorkerMessage_Async (object user_id, System.String message )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ILogisticsAdmin.SendWorkerMessage")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/logistics_admin/workers/{user_id}/send_message",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(message);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'INews' API server interface
///</summary>
public class CC_API_INews : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_INews() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_INews(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="zip_code"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.NewsItem&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/news/by_zip/{zip_code}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem> GetNewsByZip (object zip_code )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "INews.GetNewsByZip"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem>>("/news/by_zip/{zip_code}")
				.Parameter("zip_code", zip_code);
		}
	}
	///<summary>
	///Async version of <see cref="GetNewsByZip"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem>> GetNewsByZip_Async (object zip_code )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "INews.GetNewsByZip")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem>>("/news/by_zip/{zip_code}",
				builder =>
				{
					builder
					.Parameter("zip_code", zip_code);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="account_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.NewsItem&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/news/for_account/{account_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem> GetNewsForAccount (object account_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "INews.GetNewsForAccount"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem>>("/news/for_account/{account_id}")
				.Parameter("account_id", account_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetNewsForAccount"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem>> GetNewsForAccount_Async (object account_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "INews.GetNewsForAccount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.NewsItem>>("/news/for_account/{account_id}",
				builder =>
				{
					builder
					.Parameter("account_id", account_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IRestaurant' API server interface
///</summary>
public class CC_API_IRestaurant : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IRestaurant() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IRestaurant(Connector connector) : base(connector)
	{
	}

	///<summary>
	///</summary>
	///<param name="menu_xml"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/menu/add</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IngestMenu (System.String menu_xml )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.IngestMenu"))
		{
			return _connector.Post<Boolean>("/restaurant/menu/add")
				.Parameter(menu_xml);
		}
	}
	///<summary>
	///Async version of <see cref="IngestMenu"/>
	///</summary>
	public async Task<Boolean> IngestMenu_Async (System.String menu_xml )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.IngestMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/restaurant/menu/add",
				builder =>
				{
					builder
					.Parameter(menu_xml);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="restaurant_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/menu/export/by_restaruant_id/{restaurant_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String ExportMenu (object restaurant_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.ExportMenu"))
		{
			return _connector.Get("/restaurant/menu/export/by_restaruant_id/{restaurant_id}")
				.Parameter("restaurant_id", restaurant_id);
		}
	}
	///<summary>
	///Async version of <see cref="ExportMenu"/>
	///</summary>
	public async Task<System.String> ExportMenu_Async (object restaurant_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.ExportMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/restaurant/menu/export/by_restaruant_id/{restaurant_id}",
				builder =>
				{
					builder
					.Parameter("restaurant_id", restaurant_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of all active restaurants. This should only be used by internal clients that are ingesting this data to index.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Restaurant&gt;' object.</em>
	///a list of <see cref="T:ColonyConcierge.APIData.Data.Restaurant" /> objects.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/all</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant> GetAllRestaurants ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetAllRestaurants"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant>>("/restaurant/all");
		}
	}
	///<summary>
	///Async version of <see cref="GetAllRestaurants"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant>> GetAllRestaurants_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetAllRestaurants")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant>>("/restaurant/all");
			return await result;
		}
	}

	///<summary>
	///Gets a list of all active restaurant locations. This should only be used by internal clients that are ingesting this data to index.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocation&gt;' object.</em>
	///a list of <see cref="T:ColonyConcierge.APIData.Data.RestaurantLocation" /> objects.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/all</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation> GetAllLocations ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetAllLocations"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/locations/all");
		}
	}
	///<summary>
	///Async version of <see cref="GetAllLocations"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>> GetAllLocations_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetAllLocations")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/locations/all");
			return await result;
		}
	}

	///<summary>
	///Gets a restaurant by it's ID. The restaurant in question must be active.
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Restaurant' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/{rest_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Restaurant GetRestaurant (object rest_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetRestaurant"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Restaurant>("/restaurant/{rest_id}")
				.Parameter("rest_id", rest_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetRestaurant"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Restaurant> GetRestaurant_Async (object rest_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetRestaurant")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Restaurant>("/restaurant/{rest_id}",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a restaurant by it's name. The restaurant in question must be active.
	///</summary>
	///<param name="name"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Restaurant' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/by_name/{name}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Restaurant GetRestaurantByName (object name )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetRestaurantByName"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Restaurant>("/restaurant/by_name/{name}")
				.Parameter("name", name);
		}
	}
	///<summary>
	///Async version of <see cref="GetRestaurantByName"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Restaurant> GetRestaurantByName_Async (object name )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetRestaurantByName")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Restaurant>("/restaurant/by_name/{name}",
				builder =>
				{
					builder
					.Parameter("name", name);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of active restaurant locations for a given string address
	///</summary>
	///<param name="address"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<param name="for_delivery"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional parameter (defaults to "false"), set to "true" to direct search to also consider delivery areas
	///</param>
	///<param name="filter_zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional zipcode parameter. This should be specified whenever possible,
	///because will allow for very large performance improvements.
	///</param>
	///<param name="pickup_radius_meters"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Distance in meters.
	///This parameter can be used to filter out locations that are more
	///that this distance away. If not specified, the default is either 0 or 8047 if <paramref name="for_delivery" /> is true or false, respectively.
	///"0" essentially means do not consider pickup-only locations in the results.
	///If you use a value less than zero, no pickup distance filter will be used, it will include all locations within the service area.
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The optional destination ID. IF this is not provided, then the <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryTime" />
	///and <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryCutoff" /> times *WILL NOT* take grouped delivery parameters into account.
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocation&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/by_address?for_delivery={for_delivery}&amp;filter_zip={filter_zip}&amp;pickup_radius_meters={pickup_radius_meters}&amp;destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation> FindLocations (System.String address, object for_delivery = null, object filter_zip = null, object pickup_radius_meters = null, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.FindLocations"))
		{
			return _connector.Post<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/locations/by_address")
				.Parameter(address)
				.Query("for_delivery", for_delivery)
				.Query("filter_zip", filter_zip)
				.Query("pickup_radius_meters", pickup_radius_meters)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="FindLocations"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>> FindLocations_Async (System.String address, object for_delivery = null, object filter_zip = null, object pickup_radius_meters = null, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.FindLocations")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/locations/by_address",
				builder =>
				{
					builder
					.Parameter(address)
					.Query("for_delivery", for_delivery)
					.Query("filter_zip", filter_zip)
					.Query("pickup_radius_meters", pickup_radius_meters)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of active restaurant locations for a given lat/lon
	///</summary>
	///<param name="lat"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="lon"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="for_delivery"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional parameter (defaults to "false"), set to "true" to direct search to also consider delivery areas
	///</param>
	///<param name="filter_zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional zipcode parameter. This should be specified whenever possible,
	///because will allow for very large performance improvements.
	///</param>
	///<param name="pickup_radius_meters"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Distance in meters.
	///This parameter can be used to filter out locations that are more
	///that this distance away. If not specified, the default is either 0 or 8047 if <paramref name="for_delivery" /> is true or false, respectively.
	///"0" essentially means do not consider pickup-only locations in the results.
	///If you use a value less than zero, no pickup distance filter will be used, it will include all locations within the service area.
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The optional destination ID. IF this is not provided, then the <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryTime" />
	///and <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryCutoff" /> times *WILL NOT* take grouped delivery parameters into account.
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocation&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/by_location/lat/{lat}/long/{lon}?for_delivery={for_delivery}&amp;filter_zip={filter_zip}&amp;pickup_radius_meters={pickup_radius_meters}&amp;destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation> FindLocationsByLocation (object lat, object lon, object for_delivery = null, object filter_zip = null, object pickup_radius_meters = null, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.FindLocationsByLocation"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/locations/by_location/lat/{lat}/long/{lon}")
				.Parameter("lat", lat)
				.Parameter("lon", lon)
				.Query("for_delivery", for_delivery)
				.Query("filter_zip", filter_zip)
				.Query("pickup_radius_meters", pickup_radius_meters)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="FindLocationsByLocation"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>> FindLocationsByLocation_Async (object lat, object lon, object for_delivery = null, object filter_zip = null, object pickup_radius_meters = null, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.FindLocationsByLocation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/locations/by_location/lat/{lat}/long/{lon}",
				builder =>
				{
					builder
					.Parameter("lat", lat)
					.Parameter("lon", lon)
					.Query("for_delivery", for_delivery)
					.Query("filter_zip", filter_zip)
					.Query("pickup_radius_meters", pickup_radius_meters)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets all restaurant locations for a given restaurant.
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocation&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/{rest_id}/locations</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation> GetLocations (object rest_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocations"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/{rest_id}/locations")
				.Parameter("rest_id", rest_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocations"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>> GetLocations_Async (object rest_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocations")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation>>("/restaurant/{rest_id}/locations",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a single restaurant location by ID
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RestaurantLocation' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RestaurantLocation GetLocation (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocation"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RestaurantLocation>("/restaurant/locations/{loc_id}")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocation"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RestaurantLocation> GetLocation_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RestaurantLocation>("/restaurant/locations/{loc_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///Returns metadata about how a particular restaurant location would perform in a geographic search
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="address"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<param name="pickup_radius_meters"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The search radius, in meters. This parameter is used simply to set the <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.IsPickupAvailable" />
	///value in the results. Otherwise, it's semantics are identical to the <see cref="!:FindLocations(string, string, string, string)" /> function parameter of the same name.
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The optional destination ID. IF this is not provided, then the <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryTime" />
	///and <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryCutoff" /> times *WILL NOT* take grouped delivery parameters into account.
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RestaurantSearchResultData' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}?destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RestaurantSearchResultData GetLocationSearchMetadata (object loc_id, System.String address, object pickup_radius_meters, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationSearchMetadata"))
		{
			return _connector.Post<ColonyConcierge.APIData.Data.RestaurantSearchResultData>("/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}")
				.Parameter("loc_id", loc_id)
				.Parameter(address)
				.Parameter("pickup_radius_meters", pickup_radius_meters)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationSearchMetadata"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RestaurantSearchResultData> GetLocationSearchMetadata_Async (object loc_id, System.String address, object pickup_radius_meters, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationSearchMetadata")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<ColonyConcierge.APIData.Data.RestaurantSearchResultData>("/restaurant/locations/{loc_id}/search_metadata/radius/{pickup_radius_meters}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(address)
					.Parameter("pickup_radius_meters", pickup_radius_meters)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Returns metadata about how a particular restaurant location would perform in a geographic search
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The Restaurant location object ID
	///</param>
	///<param name="lat"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="lon"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="pickup_radius_meters"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The search radius, in meters. This parameter is used simply to set the <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.IsPickupAvailable" />
	///value in the results. Otherwise, it's semantics are identical to the <see cref="!:FindLocations(string, string, string, string)" /> function parameter of the same name.
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The optional destination ID. IF this is not provided, then the <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryTime" />
	///and <see cref="P:ColonyConcierge.APIData.Data.RestaurantSearchResultData.NextDeliveryCutoff" /> times *WILL NOT* take grouped delivery parameters into account.
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RestaurantSearchResultData' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}?destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RestaurantSearchResultData GetLocationSearchMetadataByLocation (object loc_id, object lat, object lon, object pickup_radius_meters, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationSearchMetadataByLocation"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RestaurantSearchResultData>("/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}")
				.Parameter("loc_id", loc_id)
				.Parameter("lat", lat)
				.Parameter("lon", lon)
				.Parameter("pickup_radius_meters", pickup_radius_meters)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationSearchMetadataByLocation"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RestaurantSearchResultData> GetLocationSearchMetadataByLocation_Async (object loc_id, object lat, object lon, object pickup_radius_meters, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationSearchMetadataByLocation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RestaurantSearchResultData>("/restaurant/locations/{loc_id}/search_metadata/by_location/lat/{lat}/long/{lon}/radius/{pickup_radius_meters}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("lat", lat)
					.Parameter("lon", lon)
					.Parameter("pickup_radius_meters", pickup_radius_meters)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves the list of categories for all restaurants
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantCategory&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurantcategories</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory> GetCategories ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetCategories"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory>>("/restaurantcategories");
		}
	}
	///<summary>
	///Async version of <see cref="GetCategories"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory>> GetCategories_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetCategories")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory>>("/restaurantcategories");
			return await result;
		}
	}

	///<summary>
	///Returns a list of holidays for the given restaurant location, optionally filtered by the start and end dates.
	/// <note>This function is obsolete, it will return empty data, please use GetLocationHolidays</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start_date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.SimpleDate" />!
	///</param>
	///<param name="end_date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.SimpleDate" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ServiceHolidayDate&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/holiday_dates?start_date={start_date}&amp;end_date={end_date}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("This function is obsolete, it will return empty data, please use GetLocationHolidays", true)]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate> GetLocationHolidayDates (object loc_id, object start_date = null, object end_date = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationHolidayDates"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate>>("/restaurant/locations/{loc_id}/holiday_dates")
				.Parameter("loc_id", loc_id)
				.Query("start_date", start_date)
				.Query("end_date", end_date);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationHolidayDates"/>
	///</summary>
	[Obsolete("This function is obsolete, it will return empty data, please use GetLocationHolidays", true)]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate>> GetLocationHolidayDates_Async (object loc_id, object start_date = null, object end_date = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationHolidayDates")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHolidayDate>>("/restaurant/locations/{loc_id}/holiday_dates",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Query("start_date", start_date)
					.Query("end_date", end_date);
				});
			return await result;
		}
	}

	///<summary>
	///Resturns a list of holidays for the given restaurant location, optionally filtered by the start and end **times**.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The restaurant location ID
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The start time for the filter, Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The end time for the filter, make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocationHoliday&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/holidays?start={start}&amp;end={end}</b>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday> GetLocationHolidays (object loc_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationHolidays"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday>>("/restaurant/locations/{loc_id}/holidays")
				.Parameter("loc_id", loc_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationHolidays"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday>> GetLocationHolidays_Async (object loc_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationHolidays")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday>>("/restaurant/locations/{loc_id}/holidays",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of available times for the given restaurant location, optionally filtered by the start and end times.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The optional destination ID that will be used to filter order times.
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/available_order_times/{start}?end={end}&amp;destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot> GetLocationAvailableOrderTimes (object loc_id, object start, object end = null, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationAvailableOrderTimes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>>("/restaurant/locations/{loc_id}/available_order_times/{start}")
				.Parameter("loc_id", loc_id)
				.Parameter("start", start)
				.Query("end", end)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationAvailableOrderTimes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>> GetLocationAvailableOrderTimes_Async (object loc_id, object start, object end = null, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetLocationAvailableOrderTimes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>>("/restaurant/locations/{loc_id}/available_order_times/{start}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("start", start)
					.Query("end", end)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves the active menus for a given restaurant location
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuIDs (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/ids")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuIDs_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenu&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu> GetMenus (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenus"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu>>("/restaurant/locations/{loc_id}/menus")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenus"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu>> GetMenus_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenus")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu>>("/restaurant/locations/{loc_id}/menus",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenu' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenu GetMenu (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenu"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenu>("/restaurant/locations/{loc_id}/menus/{rmenu_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenu"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenu> GetMenu_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenu>("/restaurant/locations/{loc_id}/menus/{rmenu_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of available times to order from this menu on this day.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to use a <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" /> object here
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to use a <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" /> object here
	///</param>
	///<param name="destination_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The optional destination ID that will be used to filter order times.
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot&gt;' object.</em>
	///Returns a list of delivery slots, with absolute times in UTC.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start}?end={end}&amp;destination_id={destination_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot> GetAvailableOrderTimes (object loc_id, object rmenu_id, object start, object end = null, object destination_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetAvailableOrderTimes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("start", start)
				.Query("end", end)
				.Query("destination_id", destination_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableOrderTimes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>> GetAvailableOrderTimes_Async (object loc_id, object rmenu_id, object start, object end = null, object destination_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetAvailableOrderTimes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/available_order_times/{start}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("start", start)
					.Query("end", end)
					.Query("destination_id", destination_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of Modifier Group IDs for the given menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///a list of IDs of modifier groups on the specified menu
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuModifierGroupIDs (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroupIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroupIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuModifierGroupIDs_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroupIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of Modifier Group IDs for the given menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifierGroup&gt;' object.</em>
	///a list of Modifier Group objects for the given menu
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup> GetMenuModifierGroups (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup>> GetMenuModifierGroups_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a <see cref="T:ColonyConcierge.APIData.Data.RMenuModifierGroup" /> object for the given location, menu, and group id.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifierGroup' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifierGroup GetMenuModifierGroup (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroup"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifierGroup>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroup"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifierGroup> GetMenuModifierGroup_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifierGroup>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a  list of <see cref="T:ColonyConcierge.APIData.Data.RMenuModifierGroup" /> objects for the given location, menu, and comma separated list of modifier group IDs
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///a comma-separated list of menu group IDs
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifierGroup&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup> GetMenuModifierGroupsByIDList (object loc_id, object rmenu_id, object modifiergroup_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroupsByIDList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id_list", modifiergroup_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroupsByIDList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup>> GetMenuModifierGroupsByIDList_Async (object loc_id, object rmenu_id, object modifiergroup_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierGroupsByIDList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/by_id_list/{modifiergroup_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id_list", modifiergroup_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of ids of modifiers that belong to the specified Modifer group on the menu.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuModifierIds (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuModifierIds_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifierIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of modifier objects that belong to the specified Modifer group on the menu.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifier&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier> GetMenuModifiers (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifiers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifiers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier>> GetMenuModifiers_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifiers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a modifier object on the specified location, menu, group by modifier ID
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifier' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifier GetMenuModifier (object loc_id, object rmenu_id, object modifier_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifier"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifier>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifier_id", modifier_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifier"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifier> GetMenuModifier_Async (object loc_id, object rmenu_id, object modifier_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifier")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifier>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifier_id", modifier_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of modifier objects on the specified location, menu, group by a comma-separated list of modifier IDS
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///A comma-separated list of modfier ID's
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifier&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier> GetMenuModifiersByIDList (object loc_id, object rmenu_id, object modifier_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifiersByIDList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifier_id_list", modifier_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifiersByIDList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier>> GetMenuModifiersByIDList_Async (object loc_id, object rmenu_id, object modifier_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuModifiersByIDList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/modifiers/by_id_list/{modifier_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifier_id_list", modifier_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of menu tag IDs for this menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="category_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional, (default 'false'). If true, filter to only tags that are categories
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids?category_only={category_only}</b>
	///This is a list of all tag objets that can be applied to itmes on this menu
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuTagIDs (object loc_id, object rmenu_id, object category_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTagIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Query("category_only", category_only);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTagIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuTagIDs_Async (object loc_id, object rmenu_id, object category_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTagIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Query("category_only", category_only);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of defined menu tag objects for this menu.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="category_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Optional, (default 'false'). If true, filter to only tags that are categories
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuTag&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags?category_only={category_only}</b>
	///This is the list of all tags that can be applied to this menu
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag> GetMenuTags (object loc_id, object rmenu_id, object category_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTags"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Query("category_only", category_only);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTags"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>> GetMenuTags_Async (object loc_id, object rmenu_id, object category_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTags")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Query("category_only", category_only);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a menu tag object, given a tag id
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_tag_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuTag' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuTag GetMenuTag (object loc_id, object rmenu_id, object rmenu_tag_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTag"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuTag>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_tag_id", rmenu_tag_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTag"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuTag> GetMenuTag_Async (object loc_id, object rmenu_id, object rmenu_tag_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTag")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuTag>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_tag_id", rmenu_tag_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of tags objects by the given comma-separated list of tag ids.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuTag&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag> GetMenuTagsByIDList (object loc_id, object rmenu_id, object tag_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTagsByIDList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("tag_id_list", tag_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTagsByIDList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>> GetMenuTagsByIDList_Async (object loc_id, object rmenu_id, object tag_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuTagsByIDList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/tags/by_id_list/{tag_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("tag_id_list", tag_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of *all* group ids for all groups in this location and menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The location ID
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The menu ID
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuGroupIds (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuGroupIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuGroupIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuGroupIds_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuGroupIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of *all* groups in this location and menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The location ID
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The menu ID
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuGroup&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup> GetMenuGroups (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup>> GetMenuGroups_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of child group ids to the specified group id. If the group ID is "0", this will retrieve the "root" level groups under this menu.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetChildMenuGroupIds (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuGroupIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuGroupIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetChildMenuGroupIds_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuGroupIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of child groups to the specified group id. If the group ID is "0", this will retrieve the "root" level groups under this menu.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuGroup&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup> GetChildMenuGroups (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup>> GetChildMenuGroups_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuGroup' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuGroup GetMenuGroup (object loc_id, object rmenu_id, object rmenugroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuGroup"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuGroup>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenugroup_id", rmenugroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuGroup"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuGroup> GetMenuGroup_Async (object loc_id, object rmenu_id, object rmenugroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuGroup>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenugroup_id", rmenugroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of *all* menu item ids for all active menu items in this location and menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///a List of int ids of the meenu items
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuItemIds (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItemIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItemIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuItemIds_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItemIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of *all* menu items for all active menu items in this location and menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuItem&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem> GetMenuItems (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItems"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItems"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>> GetMenuItems_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItems")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of child menu item ids for the specified parent group.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///a list of RMenuItem ids
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetChildMenuItemIds (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuItemIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuItemIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetChildMenuItemIds_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuItemIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of child menu item ids for the specified parent group.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuItem&gt;' object.</em>
	///a list of RMenuItem objects
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem> GetChildMenuItems (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuItems"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuItems"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>> GetChildMenuItems_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetChildMenuItems")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of menu item IDs filtered by those items that are tagged with one of the tag identified by a comma separated list of tag ids.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuItemIdsByTagIdList (object loc_id, object rmenu_id, object tag_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItemIdsByTagIdList"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("tag_id_list", tag_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItemIdsByTagIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuItemIdsByTagIdList_Async (object loc_id, object rmenu_id, object tag_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItemIdsByTagIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("tag_id_list", tag_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of menu item objects filtered by those items that are tagged with one of the tag identified by a comma separated list of tag ids.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuItem&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem> GetMenuItemsByTagIdList (object loc_id, object rmenu_id, object tag_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItemsByTagIdList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("tag_id_list", tag_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItemsByTagIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>> GetMenuItemsByTagIdList_Async (object loc_id, object rmenu_id, object tag_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItemsByTagIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("tag_id_list", tag_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a menu item by ID. The menu item must be active (admin API will provide access to inactive menu items)
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuItem' object.</em>
	///a <see cref="T:ColonyConcierge.APIData.Data.RMenuItem" /> object
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuItem GetMenuItem (object loc_id, object rmenu_id, object rmenuitem_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItem"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuItem>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItem"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuItem> GetMenuItem_Async (object loc_id, object rmenu_id, object rmenuitem_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetMenuItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuItem>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a menu item modifier price by ID. The menu item must be active
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_price_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifierPrice' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifierPrice GetModifierPrice (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetModifierPrice"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifierPrice>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("modifier_price_id", modifier_price_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetModifierPrice"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifierPrice> GetModifierPrice_Async (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetModifierPrice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifierPrice>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("modifier_price_id", modifier_price_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of  menu item modifier price objects by a comma-separated list of modifier price IDs. The menu item must be active
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_price_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifierPrice&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierPrice> GetModifierPricesByIDList (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetModifierPricesByIDList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierPrice>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("modifier_price_id_list", modifier_price_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetModifierPricesByIDList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierPrice>> GetModifierPricesByIDList_Async (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.GetModifierPricesByIDList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierPrice>>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/by_id_list/{modifier_price_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("modifier_price_id_list", modifier_price_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves the calculated price of a potential order entry item based on the <see cref="T:ColonyConcierge.APIData.Data.ScheduledRMenuItem" /> data, as determined by server logic.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="menu_item"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Decimal' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Decimal CheckPrice (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.ScheduledRMenuItem menu_item )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.CheckPrice"))
		{
			return _connector.Post<System.Decimal>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter(menu_item);
		}
	}
	///<summary>
	///Async version of <see cref="CheckPrice"/>
	///</summary>
	public async Task<System.Decimal> CheckPrice_Async (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.ScheduledRMenuItem menu_item )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurant.CheckPrice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Decimal>("/restaurant/locations/{loc_id}/menus/{rmenu_id}/check_price",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter(menu_item);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IRestaurantAdmin' API server interface
///</summary>
public class CC_API_IRestaurantAdmin : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IRestaurantAdmin() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IRestaurantAdmin(Connector connector) : base(connector)
	{
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeactivateMenuItem (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuItem"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_group_id", rmenu_group_id)
				.Parameter("rmenuitem_id", rmenuitem_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeactivateMenuItem"/>
	///</summary>
	public async Task<Boolean> DeactivateMenuItem_Async (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_group_id", rmenu_group_id)
					.Parameter("rmenuitem_id", rmenuitem_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_price_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifierPrice' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifierPrice GetModifierPrice (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetModifierPrice"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifierPrice>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("modifier_price_id", modifier_price_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetModifierPrice"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifierPrice> GetModifierPrice_Async (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetModifierPrice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifierPrice>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("modifier_price_id", modifier_price_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="mod_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifierPrice' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifiergroups/{mod_group_id}/modifiers/{modifier_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifierPrice GetModifierPriceByModID (object loc_id, object rmenu_id, object rmenuitem_id, object mod_group_id, object modifier_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetModifierPriceByModID"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifierPrice>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifiergroups/{mod_group_id}/modifiers/{modifier_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("mod_group_id", mod_group_id)
				.Parameter("modifier_id", modifier_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetModifierPriceByModID"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifierPrice> GetModifierPriceByModID_Async (object loc_id, object rmenu_id, object rmenuitem_id, object mod_group_id, object modifier_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetModifierPriceByModID")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifierPrice>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifiergroups/{mod_group_id}/modifiers/{modifier_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("mod_group_id", mod_group_id)
					.Parameter("modifier_id", modifier_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modprice"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddModifierPrice (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id, ColonyConcierge.APIData.Data.RMenuModifierPrice modprice )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddModifierPrice"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_group_id", rmenu_group_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter(modprice);
		}
	}
	///<summary>
	///Async version of <see cref="AddModifierPrice"/>
	///</summary>
	public async Task<Int32> AddModifierPrice_Async (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id, ColonyConcierge.APIData.Data.RMenuModifierPrice modprice )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddModifierPrice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_group_id", rmenu_group_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter(modprice);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_price_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modprice"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}/modifierprices</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateModifierPrice (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id, object modifier_price_id, ColonyConcierge.APIData.Data.RMenuModifierPrice modprice )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateModifierPrice"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}/modifierprices")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_group_id", rmenu_group_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("modifier_price_id", modifier_price_id)
				.Parameter(modprice);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateModifierPrice"/>
	///</summary>
	public async Task<Boolean> UpdateModifierPrice_Async (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id, object modifier_price_id, ColonyConcierge.APIData.Data.RMenuModifierPrice modprice )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateModifierPrice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}/modifierprices",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_group_id", rmenu_group_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("modifier_price_id", modifier_price_id)
					.Parameter(modprice);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_price_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean DeleteModifierPrice (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteModifierPrice"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("modifier_price_id", modifier_price_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteModifierPrice"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> DeleteModifierPrice_Async (object loc_id, object rmenu_id, object rmenuitem_id, object modifier_price_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteModifierPrice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("modifier_price_id", modifier_price_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/make_combination</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean MakeMenuItemCombination (object loc_id, object rmenu_id, object rmenuitem_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.MakeMenuItemCombination"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/make_combination")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id);
		}
	}
	///<summary>
	///Async version of <see cref="MakeMenuItemCombination"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> MakeMenuItemCombination_Async (object loc_id, object rmenu_id, object rmenuitem_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.MakeMenuItemCombination")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/make_combination",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="slot"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Int32 AddMenuItemCombinationSlot (object loc_id, object rmenu_id, object rmenuitem_id, ColonyConcierge.APIData.Data.RMenuItemCombinationSlot slot )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuItemCombinationSlot"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter(slot);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenuItemCombinationSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Int32> AddMenuItemCombinationSlot_Async (object loc_id, object rmenu_id, object rmenuitem_id, ColonyConcierge.APIData.Data.RMenuItemCombinationSlot slot )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuItemCombinationSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter(slot);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="combo_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="slot"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean UpdateMenuItemCombinationSlot (object loc_id, object rmenu_id, object rmenuitem_id, object combo_slot_id, ColonyConcierge.APIData.Data.RMenuItemCombinationSlot slot )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuItemCombinationSlot"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("combo_slot_id", combo_slot_id)
				.Parameter(slot);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateMenuItemCombinationSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> UpdateMenuItemCombinationSlot_Async (object loc_id, object rmenu_id, object rmenuitem_id, object combo_slot_id, ColonyConcierge.APIData.Data.RMenuItemCombinationSlot slot )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuItemCombinationSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("combo_slot_id", combo_slot_id)
					.Parameter(slot);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="combo_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean DeleteMenuItemCombinationSlot (object loc_id, object rmenu_id, object rmenuitem_id, object combo_slot_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteMenuItemCombinationSlot"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("combo_slot_id", combo_slot_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteMenuItemCombinationSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> DeleteMenuItemCombinationSlot_Async (object loc_id, object rmenu_id, object rmenuitem_id, object combo_slot_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteMenuItemCombinationSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("combo_slot_id", combo_slot_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/publish</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean PublishMenu (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.PublishMenu"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/publish")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="PublishMenu"/>
	///</summary>
	public async Task<Boolean> PublishMenu_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.PublishMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/publish",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Restaurant&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurants</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant> GetRestaurants ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetRestaurants"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant>>("/restaurant_admin/restaurants");
		}
	}
	///<summary>
	///Async version of <see cref="GetRestaurants"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant>> GetRestaurants_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetRestaurants")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Restaurant>>("/restaurant_admin/restaurants");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Restaurant' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurants/{rest_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Restaurant GetRestaurant (object rest_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetRestaurant"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Restaurant>("/restaurant_admin/restaurants/{rest_id}")
				.Parameter("rest_id", rest_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetRestaurant"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Restaurant> GetRestaurant_Async (object rest_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetRestaurant")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Restaurant>("/restaurant_admin/restaurants/{rest_id}",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="newRestaurant"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurants</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddRestaurant (ColonyConcierge.APIData.Data.Restaurant newRestaurant )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddRestaurant"))
		{
			return _connector.Post<Int32>("/restaurant_admin/restaurants")
				.Parameter(newRestaurant);
		}
	}
	///<summary>
	///Async version of <see cref="AddRestaurant"/>
	///</summary>
	public async Task<Int32> AddRestaurant_Async (ColonyConcierge.APIData.Data.Restaurant newRestaurant )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddRestaurant")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/restaurants",
				builder =>
				{
					builder
					.Parameter(newRestaurant);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newRestaurant"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurants/{rest_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateRestaurant (object rest_id, ColonyConcierge.APIData.Data.Restaurant newRestaurant )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateRestaurant"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/restaurants/{rest_id}")
				.Parameter("rest_id", rest_id)
				.Parameter(newRestaurant);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateRestaurant"/>
	///</summary>
	public async Task<Boolean> UpdateRestaurant_Async (object rest_id, ColonyConcierge.APIData.Data.Restaurant newRestaurant )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateRestaurant")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/restaurants/{rest_id}",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id)
					.Parameter(newRestaurant);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantCategory&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/categories</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory> GetCategories ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetCategories"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory>>("/restaurant_admin/categories");
		}
	}
	///<summary>
	///Async version of <see cref="GetCategories"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory>> GetCategories_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetCategories")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantCategory>>("/restaurant_admin/categories");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="categories"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurants/{rest_id}/categories</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean AddRestaurantCategory (object rest_id, System.String categories )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddRestaurantCategory"))
		{
			return _connector.Post<Boolean>("/restaurant_admin/restaurants/{rest_id}/categories")
				.Parameter("rest_id", rest_id)
				.Parameter(categories);
		}
	}
	///<summary>
	///Async version of <see cref="AddRestaurantCategory"/>
	///</summary>
	public async Task<Boolean> AddRestaurantCategory_Async (object rest_id, System.String categories )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddRestaurantCategory")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/restaurant_admin/restaurants/{rest_id}/categories",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id)
					.Parameter(categories);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetLocationIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetLocationIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/ids");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocation_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin> GetLocations ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocations"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>>("/restaurant_admin/locations");
		}
	}
	///<summary>
	///Async version of <see cref="GetLocations"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>> GetLocations_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocations")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>>("/restaurant_admin/locations");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RestaurantLocation_Admin' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RestaurantLocation_Admin GetLocationByID (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationByID"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>("/restaurant_admin/locations/{loc_id}")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationByID"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RestaurantLocation_Admin> GetLocationByID_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationByID")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>("/restaurant_admin/locations/{loc_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocation_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurants/{rest_id}/locations/</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin> GetLocationsByRestID (object rest_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationsByRestID"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>>("/restaurant_admin/restaurants/{rest_id}/locations/")
				.Parameter("rest_id", rest_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationsByRestID"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>> GetLocationsByRestID_Async (object rest_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationsByRestID")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocation_Admin>>("/restaurant_admin/restaurants/{rest_id}/locations/",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newLocation"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurant/{rest_id}/locations</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddLocation (object rest_id, ColonyConcierge.APIData.Data.RestaurantLocation_Admin newLocation )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddLocation"))
		{
			return _connector.Post<Int32>("/restaurant_admin/restaurant/{rest_id}/locations")
				.Parameter("rest_id", rest_id)
				.Parameter(newLocation);
		}
	}
	///<summary>
	///Async version of <see cref="AddLocation"/>
	///</summary>
	public async Task<Int32> AddLocation_Async (object rest_id, ColonyConcierge.APIData.Data.RestaurantLocation_Admin newLocation )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddLocation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/restaurant/{rest_id}/locations",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id)
					.Parameter(newLocation);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newLocation"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/restaurant/{rest_id}/locations/{loc_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateLocation (object rest_id, object loc_id, ColonyConcierge.APIData.Data.RestaurantLocation_Admin newLocation )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateLocation"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/restaurant/{rest_id}/locations/{loc_id}")
				.Parameter("rest_id", rest_id)
				.Parameter("loc_id", loc_id)
				.Parameter(newLocation);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateLocation"/>
	///</summary>
	public async Task<Boolean> UpdateLocation_Async (object rest_id, object loc_id, ColonyConcierge.APIData.Data.RestaurantLocation_Admin newLocation )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateLocation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/restaurant/{rest_id}/locations/{loc_id}",
				builder =>
				{
					builder
					.Parameter("rest_id", rest_id)
					.Parameter("loc_id", loc_id)
					.Parameter(newLocation);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PlaceHolderDummy' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/notification_info</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.PlaceHolderDummy GetLocationNotificationData (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationNotificationData"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PlaceHolderDummy>("/restaurant_admin/locations/{loc_id}/notification_info")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationNotificationData"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.PlaceHolderDummy> GetLocationNotificationData_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationNotificationData")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PlaceHolderDummy>("/restaurant_admin/locations/{loc_id}/notification_info",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="notificationData"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/notification_info</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Int32 SetLocationNotificationData (object loc_id, ColonyConcierge.APIData.Data.PlaceHolderDummy notificationData )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetLocationNotificationData"))
		{
			return _connector.Put<Int32>("/restaurant_admin/locations/{loc_id}/notification_info")
				.Parameter("loc_id", loc_id)
				.Parameter(notificationData);
		}
	}
	///<summary>
	///Async version of <see cref="SetLocationNotificationData"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Int32> SetLocationNotificationData_Async (object loc_id, ColonyConcierge.APIData.Data.PlaceHolderDummy notificationData )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetLocationNotificationData")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Int32>("/restaurant_admin/locations/{loc_id}/notification_info",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(notificationData);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PlaceHolderDummy' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/open_days_of_week</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.PlaceHolderDummy GetLocationDaysOfWeekOpen (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationDaysOfWeekOpen"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PlaceHolderDummy>("/restaurant_admin/locations/{loc_id}/open_days_of_week")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationDaysOfWeekOpen"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.PlaceHolderDummy> GetLocationDaysOfWeekOpen_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationDaysOfWeekOpen")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PlaceHolderDummy>("/restaurant_admin/locations/{loc_id}/open_days_of_week",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="dummy"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/open_days_of_week</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetLocationDaysOfWeekOpen (object loc_id, ColonyConcierge.APIData.Data.PlaceHolderDummy dummy )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetLocationDaysOfWeekOpen"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/open_days_of_week")
				.Parameter("loc_id", loc_id)
				.Parameter(dummy);
		}
	}
	///<summary>
	///Async version of <see cref="SetLocationDaysOfWeekOpen"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetLocationDaysOfWeekOpen_Async (object loc_id, ColonyConcierge.APIData.Data.PlaceHolderDummy dummy )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetLocationDaysOfWeekOpen")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/open_days_of_week",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(dummy);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RestaurantLocationHoliday&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/holidays</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday> GetLocationHolidays (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationHolidays"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday>>("/restaurant_admin/locations/{loc_id}/holidays")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationHolidays"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday>> GetLocationHolidays_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationHolidays")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RestaurantLocationHoliday>>("/restaurant_admin/locations/{loc_id}/holidays",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holiday"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/holidays</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Int32 AddLocationHoliday (object loc_id, ColonyConcierge.APIData.Data.RestaurantLocationHoliday holiday )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddLocationHoliday"))
		{
			return _connector.Put<Int32>("/restaurant_admin/locations/{loc_id}/holidays")
				.Parameter("loc_id", loc_id)
				.Parameter(holiday);
		}
	}
	///<summary>
	///Async version of <see cref="AddLocationHoliday"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Int32> AddLocationHoliday_Async (object loc_id, ColonyConcierge.APIData.Data.RestaurantLocationHoliday holiday )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddLocationHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Int32>("/restaurant_admin/locations/{loc_id}/holidays",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(holiday);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="holiday_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/holidays/{holiday_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean RemoveLocationHoliday (object loc_id, object holiday_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.RemoveLocationHoliday"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/holidays/{holiday_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("holiday_id", holiday_id);
		}
	}
	///<summary>
	///Async version of <see cref="RemoveLocationHoliday"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> RemoveLocationHoliday_Async (object loc_id, object holiday_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.RemoveLocationHoliday")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/holidays/{holiday_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("holiday_id", holiday_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/schedule_slots/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<Int32> GetLocationScheduleSlotIds (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationScheduleSlotIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/schedule_slots/ids")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationScheduleSlotIds"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<Int32>> GetLocationScheduleSlotIds_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationScheduleSlotIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/schedule_slots/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.PlaceHolderDummy&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/schedule_slots</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.PlaceHolderDummy> GetLocationScheduleSlots (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationScheduleSlots"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PlaceHolderDummy>>("/restaurant_admin/locations/{loc_id}/schedule_slots")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationScheduleSlots"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PlaceHolderDummy>> GetLocationScheduleSlots_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationScheduleSlots")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PlaceHolderDummy>>("/restaurant_admin/locations/{loc_id}/schedule_slots",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="scheduleSlot"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/schedule_slots</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Int32 AddLocationScheduleSlot (object loc_id, ColonyConcierge.APIData.Data.PlaceHolderDummy scheduleSlot )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddLocationScheduleSlot"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/schedule_slots")
				.Parameter("loc_id", loc_id)
				.Parameter(scheduleSlot);
		}
	}
	///<summary>
	///Async version of <see cref="AddLocationScheduleSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Int32> AddLocationScheduleSlot_Async (object loc_id, ColonyConcierge.APIData.Data.PlaceHolderDummy scheduleSlot )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddLocationScheduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/schedule_slots",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(scheduleSlot);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="slot"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean UpdateLocationSchduleSlot (object loc_id, object slot_id, ColonyConcierge.APIData.Data.PlaceHolderDummy slot )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateLocationSchduleSlot"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("slot_id", slot_id)
				.Parameter(slot);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateLocationSchduleSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> UpdateLocationSchduleSlot_Async (object loc_id, object slot_id, ColonyConcierge.APIData.Data.PlaceHolderDummy slot )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateLocationSchduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("slot_id", slot_id)
					.Parameter(slot);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean DeleteLocationScheduleSlot (object loc_id, object slot_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteLocationScheduleSlot"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("slot_id", slot_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteLocationScheduleSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> DeleteLocationScheduleSlot_Async (object loc_id, object slot_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteLocationScheduleSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("slot_id", slot_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/available_schedule_slots/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<Int32> GetLocationAvailableSlotIds (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationAvailableSlotIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/available_schedule_slots/ids")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationAvailableSlotIds"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<Int32>> GetLocationAvailableSlotIds_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationAvailableSlotIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/available_schedule_slots/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/available_schedule_slots</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot> GetLocationAvailableSlots (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationAvailableSlots"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>>("/restaurant_admin/locations/{loc_id}/available_schedule_slots")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationAvailableSlots"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>> GetLocationAvailableSlots_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationAvailableSlots")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>>("/restaurant_admin/locations/{loc_id}/available_schedule_slots",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="avail_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot GetLocationAvailableSlot (object loc_id, object avail_slot_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationAvailableSlot"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>("/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("avail_slot_id", avail_slot_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationAvailableSlot"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot> GetLocationAvailableSlot_Async (object loc_id, object avail_slot_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetLocationAvailableSlot")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuOrderingAvailableSlot>("/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("avail_slot_id", avail_slot_id);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="avail_slot_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="is_active"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}/is_active/{is_active}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetLocationAvailableSlotActive (object loc_id, object avail_slot_id, object is_active )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetLocationAvailableSlotActive"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}/is_active/{is_active}")
				.Parameter("loc_id", loc_id)
				.Parameter("avail_slot_id", avail_slot_id)
				.Parameter("is_active", is_active);
		}
	}
	///<summary>
	///Async version of <see cref="SetLocationAvailableSlotActive"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetLocationAvailableSlotActive_Async (object loc_id, object avail_slot_id, object is_active )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetLocationAvailableSlotActive")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}/is_active/{is_active}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("avail_slot_id", avail_slot_id)
					.Parameter("is_active", is_active);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.GeoFence' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geofence</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.GeoFence GetGeoFence (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoFence"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.GeoFence>("/restaurant_admin/locations/{loc_id}/geofence")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetGeoFence"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.GeoFence> GetGeoFence_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoFence")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.GeoFence>("/restaurant_admin/locations/{loc_id}/geofence",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetGeoShapeIds (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoShapeIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/geoshapes/ids")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetGeoShapeIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetGeoShapeIds_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoShapeIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/geoshapes/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GeoShape&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoShape> GetGeoShapes (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoShapes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoShape>>("/restaurant_admin/locations/{loc_id}/geoshapes")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetGeoShapes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoShape>> GetGeoShapes_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoShapes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoShape>>("/restaurant_admin/locations/{loc_id}/geoshapes",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shape_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.GeoShape' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.GeoShape GetGeoShape (object loc_id, object shape_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoShape"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.GeoShape>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("shape_id", shape_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetGeoShape"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.GeoShape> GetGeoShape_Async (object loc_id, object shape_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetGeoShape")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.GeoShape>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("shape_id", shape_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shape"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddGeoShape (object loc_id, ColonyConcierge.APIData.Data.GeoShape shape )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddGeoShape"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/geoshapes")
				.Parameter("loc_id", loc_id)
				.Parameter(shape);
		}
	}
	///<summary>
	///Async version of <see cref="AddGeoShape"/>
	///</summary>
	public async Task<Int32> AddGeoShape_Async (object loc_id, ColonyConcierge.APIData.Data.GeoShape shape )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddGeoShape")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/geoshapes",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(shape);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shape_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteGeoShape (object loc_id, object shape_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteGeoShape"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("shape_id", shape_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteGeoShape"/>
	///</summary>
	public async Task<Boolean> DeleteGeoShape_Async (object loc_id, object shape_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteGeoShape")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("shape_id", shape_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shape_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetConvexShapeIDs (object loc_id, object shape_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetConvexShapeIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("shape_id", shape_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetConvexShapeIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetConvexShapeIDs_Async (object loc_id, object shape_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetConvexShapeIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("shape_id", shape_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shape_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GeoConvexShape&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoConvexShape> GetConvexShapes (object loc_id, object shape_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetConvexShapes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoConvexShape>>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes")
				.Parameter("loc_id", loc_id)
				.Parameter("shape_id", shape_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetConvexShapes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoConvexShape>> GetConvexShapes_Async (object loc_id, object shape_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetConvexShapes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GeoConvexShape>>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("shape_id", shape_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shape_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="convex_shape_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.GeoConvexShape' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.GeoConvexShape GetConvexShape (object loc_id, object shape_id, object convex_shape_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetConvexShape"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.GeoConvexShape>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("shape_id", shape_id)
				.Parameter("convex_shape_id", convex_shape_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetConvexShape"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.GeoConvexShape> GetConvexShape_Async (object loc_id, object shape_id, object convex_shape_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetConvexShape")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.GeoConvexShape>("/restaurant_admin/locations/{loc_id}/geoshapes/{shape_id}/optimized_shapes/{convex_shape_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("shape_id", shape_id)
					.Parameter("convex_shape_id", convex_shape_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuIDs (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/ids")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuIDs_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenu_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu_Admin> GetMenus (object loc_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenus"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu_Admin>>("/restaurant_admin/locations/{loc_id}/menus")
				.Parameter("loc_id", loc_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenus"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu_Admin>> GetMenus_Async (object loc_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenus")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenu_Admin>>("/restaurant_admin/locations/{loc_id}/menus",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenu_Admin' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenu_Admin GetMenu (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenu"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenu_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenu"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenu_Admin> GetMenu_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenu_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newMenu"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddMenu (object loc_id, ColonyConcierge.APIData.Data.RMenu_Admin newMenu )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenu"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus")
				.Parameter("loc_id", loc_id)
				.Parameter(newMenu);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenu"/>
	///</summary>
	public async Task<Int32> AddMenu_Async (object loc_id, ColonyConcierge.APIData.Data.RMenu_Admin newMenu )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(newMenu);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="menu"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateMenu (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenu_Admin menu )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenu"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter(menu);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateMenu"/>
	///</summary>
	public async Task<Boolean> UpdateMenu_Async (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenu_Admin menu )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenu")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter(menu);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="is_active"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/menus/{rmenu_id}/is_active/{is_active}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetMenuActive (object rmenu_id, object is_active )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuActive"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/menus/{rmenu_id}/is_active/{is_active}")
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("is_active", is_active);
		}
	}
	///<summary>
	///Async version of <see cref="SetMenuActive"/>
	///</summary>
	public async Task<Boolean> SetMenuActive_Async (object rmenu_id, object is_active )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuActive")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/menus/{rmenu_id}/is_active/{is_active}",
				builder =>
				{
					builder
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("is_active", is_active);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="category_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/ids?category_only={category_only}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuTagIDs (object loc_id, object rmenu_id, object category_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuTagIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Query("category_only", category_only);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTagIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuTagIDs_Async (object loc_id, object rmenu_id, object category_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuTagIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Query("category_only", category_only);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="category_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuTag&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags?category_only={category_only}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag> GetMenuTags (object loc_id, object rmenu_id, object category_only = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuTags"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Query("category_only", category_only);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTags"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>> GetMenuTags_Async (object loc_id, object rmenu_id, object category_only = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuTags")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuTag>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Query("category_only", category_only);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_tag_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuTag' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuTag GetMenuTag (object loc_id, object rmenu_id, object rmenu_tag_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuTag"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuTag>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_tag_id", rmenu_tag_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuTag"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuTag> GetMenuTag_Async (object loc_id, object rmenu_id, object rmenu_tag_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuTag")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuTag>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_tag_id", rmenu_tag_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddMenuTag (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenuTag tag )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuTag"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter(tag);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenuTag"/>
	///</summary>
	public async Task<Int32> AddMenuTag_Async (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenuTag tag )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuTag")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter(tag);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_tag_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateTag (object loc_id, object rmenu_id, object rmenu_tag_id, ColonyConcierge.APIData.Data.RMenuTag tag )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateTag"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_tag_id", rmenu_tag_id)
				.Parameter(tag);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateTag"/>
	///</summary>
	public async Task<Boolean> UpdateTag_Async (object loc_id, object rmenu_id, object rmenu_tag_id, ColonyConcierge.APIData.Data.RMenuTag tag )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateTag")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_tag_id", rmenu_tag_id)
					.Parameter(tag);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_tag_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="is_active"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}/is_active/{is_active}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetTagActive (object loc_id, object rmenu_id, object rmenu_tag_id, object is_active )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetTagActive"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}/is_active/{is_active}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_tag_id", rmenu_tag_id)
				.Parameter("is_active", is_active);
		}
	}
	///<summary>
	///Async version of <see cref="SetTagActive"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetTagActive_Async (object loc_id, object rmenu_id, object rmenu_tag_id, object is_active )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetTagActive")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}/is_active/{is_active}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_tag_id", rmenu_tag_id)
					.Parameter("is_active", is_active);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuModifierGroupIDs (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroupIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroupIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuModifierGroupIDs_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroupIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin> GetMenuModifierGroups (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>> GetMenuModifierGroups_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/menuitems/{rmenuitem_id}/modifiergroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin> GetMenuModifierGroupsByItem (object loc_id, object rmenu_id, object rmenugroup_id, object rmenuitem_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroupsByItem"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/menuitems/{rmenuitem_id}/modifiergroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenugroup_id", rmenugroup_id)
				.Parameter("rmenuitem_id", rmenuitem_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroupsByItem"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>> GetMenuModifierGroupsByItem_Async (object loc_id, object rmenu_id, object rmenugroup_id, object rmenuitem_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroupsByItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/menuitems/{rmenuitem_id}/modifiergroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenugroup_id", rmenugroup_id)
					.Parameter("rmenuitem_id", rmenuitem_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin GetMenuModifierGroup (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroup"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierGroup"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin> GetMenuModifierGroup_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="group"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddMenuModifierGroup (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin group )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuModifierGroup"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter(group);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenuModifierGroup"/>
	///</summary>
	public async Task<Int32> AddMenuModifierGroup_Async (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin group )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuModifierGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter(group);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="group"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateMenuModifierGroup (object loc_id, object rmenu_id, object modifiergroup_id, ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin group )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuModifierGroup"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id)
				.Parameter(group);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateMenuModifierGroup"/>
	///</summary>
	public async Task<Boolean> UpdateMenuModifierGroup_Async (object loc_id, object rmenu_id, object modifiergroup_id, ColonyConcierge.APIData.Data.RMenuModifierGroup_Admin group )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuModifierGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id)
					.Parameter(group);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_ids"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{group_id}/menuitems/{rmenuitem_id}/modifiergroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetMenuItemModifierGroups (object loc_id, object rmenu_id, object group_id, object rmenuitem_id, System.String modifiergroup_ids )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuItemModifierGroups"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{group_id}/menuitems/{rmenuitem_id}/modifiergroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("group_id", group_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter(modifiergroup_ids);
		}
	}
	///<summary>
	///Async version of <see cref="SetMenuItemModifierGroups"/>
	///</summary>
	public async Task<Boolean> SetMenuItemModifierGroups_Async (object loc_id, object rmenu_id, object group_id, object rmenuitem_id, System.String modifiergroup_ids )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuItemModifierGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{group_id}/menuitems/{rmenuitem_id}/modifiergroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("group_id", group_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter(modifiergroup_ids);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeactivateMenuModifierGroup (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuModifierGroup"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeactivateMenuModifierGroup"/>
	///</summary>
	public async Task<Boolean> DeactivateMenuModifierGroup_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuModifierGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}/group/{modifiergroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeactivateMenuSubModifierGroup (object loc_id, object rmenu_id, object modifier_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuSubModifierGroup"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}/group/{modifiergroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifier_id", modifier_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeactivateMenuSubModifierGroup"/>
	///</summary>
	public async Task<Boolean> DeactivateMenuSubModifierGroup_Async (object loc_id, object rmenu_id, object modifier_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuSubModifierGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}/group/{modifiergroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifier_id", modifier_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuModifierIds (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifierIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuModifierIds_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifierIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuModifier_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier_Admin> GetMenuModifiers (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifiers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifiers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier_Admin>> GetMenuModifiers_Async (object loc_id, object rmenu_id, object modifiergroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifiers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuModifier_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiergroups/{modifiergroup_id}/modifiers",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuModifier_Admin' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuModifier_Admin GetMenuModifier (object loc_id, object rmenu_id, object modifier_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifier"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuModifier_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifier_id", modifier_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuModifier"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuModifier_Admin> GetMenuModifier_Async (object loc_id, object rmenu_id, object modifier_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuModifier")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuModifier_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifier_id", modifier_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newModifier"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifier_group_id}/modifiers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddMenuModifier (object loc_id, object rmenu_id, object modifier_group_id, ColonyConcierge.APIData.Data.RMenuModifier_Admin newModifier )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuModifier"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifier_group_id}/modifiers")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifier_group_id", modifier_group_id)
				.Parameter(newModifier);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenuModifier"/>
	///</summary>
	public async Task<Int32> AddMenuModifier_Async (object loc_id, object rmenu_id, object modifier_group_id, ColonyConcierge.APIData.Data.RMenuModifier_Admin newModifier )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuModifier")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifier_group_id}/modifiers",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifier_group_id", modifier_group_id)
					.Parameter(newModifier);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="newModifier"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateMenuModifier (object loc_id, object rmenu_id, object modifier_id, ColonyConcierge.APIData.Data.RMenuModifier_Admin newModifier )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuModifier"))
		{
			return _connector.Post<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifier_id", modifier_id)
				.Parameter(newModifier);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateMenuModifier"/>
	///</summary>
	public async Task<Boolean> UpdateMenuModifier_Async (object loc_id, object rmenu_id, object modifier_id, ColonyConcierge.APIData.Data.RMenuModifier_Admin newModifier )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuModifier")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/modifiers/{modifier_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifier_id", modifier_id)
					.Parameter(newModifier);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="submodGroupids"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}/submodifiers/submodGroupids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetMenuSubmodifiers (object loc_id, object rmenu_id, object modifiergroup_id, object modifier_id, System.String submodGroupids )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuSubmodifiers"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}/submodifiers/submodGroupids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id)
				.Parameter("modifier_id", modifier_id)
				.Parameter(submodGroupids);
		}
	}
	///<summary>
	///Async version of <see cref="SetMenuSubmodifiers"/>
	///</summary>
	public async Task<Boolean> SetMenuSubmodifiers_Async (object loc_id, object rmenu_id, object modifiergroup_id, object modifier_id, System.String submodGroupids )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuSubmodifiers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}/submodifiers/submodGroupids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id)
					.Parameter("modifier_id", modifier_id)
					.Parameter(submodGroupids);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifiergroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="modifier_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeactivateMenuModifier (object loc_id, object rmenu_id, object modifiergroup_id, object modifier_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuModifier"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("modifiergroup_id", modifiergroup_id)
				.Parameter("modifier_id", modifier_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeactivateMenuModifier"/>
	///</summary>
	public async Task<Boolean> DeactivateMenuModifier_Async (object loc_id, object rmenu_id, object modifiergroup_id, object modifier_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeactivateMenuModifier")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{modifiergroup_id}/modifiers/{modifier_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("modifiergroup_id", modifiergroup_id)
					.Parameter("modifier_id", modifier_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuGroupIds (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuGroupIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuGroupIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuGroupIds_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuGroupIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuGroup_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin> GetMenuGroups (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin>> GetMenuGroups_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetChildMenuGroupIds (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuGroupIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuGroupIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetChildMenuGroupIds_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuGroupIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuGroup_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin> GetChildMenuGroups (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuGroups"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuGroups"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin>> GetChildMenuGroups_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuGroups")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuGroup_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{parent_group_id}/child_groups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuGroup_Admin' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuGroup_Admin GetMenuGroup (object loc_id, object rmenu_id, object rmenugroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuGroup"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuGroup_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenugroup_id", rmenugroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuGroup"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuGroup_Admin> GetMenuGroup_Async (object loc_id, object rmenu_id, object rmenugroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuGroup_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenugroup_id", rmenugroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="group"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddMenuGroup (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenuGroup_Admin group )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuGroup"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter(group);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenuGroup"/>
	///</summary>
	public async Task<Int32> AddMenuGroup_Async (object loc_id, object rmenu_id, ColonyConcierge.APIData.Data.RMenuGroup_Admin group )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter(group);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/parent/{parent_rmenugroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetMenuGroupParent (object loc_id, object rmenu_id, object rmenugroup_id, object parent_rmenugroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuGroupParent"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/parent/{parent_rmenugroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenugroup_id", rmenugroup_id)
				.Parameter("parent_rmenugroup_id", parent_rmenugroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="SetMenuGroupParent"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetMenuGroupParent_Async (object loc_id, object rmenu_id, object rmenugroup_id, object parent_rmenugroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuGroupParent")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/parent/{parent_rmenugroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenugroup_id", rmenugroup_id)
					.Parameter("parent_rmenugroup_id", parent_rmenugroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="group"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateMenuGroup (object loc_id, object rmenu_id, object rmenugroup_id, ColonyConcierge.APIData.Data.RMenuGroup_Admin group )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuGroup"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenugroup_id", rmenugroup_id)
				.Parameter(group);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateMenuGroup"/>
	///</summary>
	public async Task<Boolean> UpdateMenuGroup_Async (object loc_id, object rmenu_id, object rmenugroup_id, ColonyConcierge.APIData.Data.RMenuGroup_Admin group )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenugroup_id", rmenugroup_id)
					.Parameter(group);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenugroup_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean DeleteMenuGroup (object loc_id, object rmenu_id, object rmenugroup_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteMenuGroup"))
		{
			return _connector.Delete<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenugroup_id", rmenugroup_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteMenuGroup"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> DeleteMenuGroup_Async (object loc_id, object rmenu_id, object rmenugroup_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.DeleteMenuGroup")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenugroup_id", rmenugroup_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of *all* menu item ids for all active menu items in this location and menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///a List of int ids of the menu items
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuItemIds (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItemIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItemIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuItemIds_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItemIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of *all* menu items for all active menu items in this location and menu
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuItem_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin> GetMenuItems (object loc_id, object rmenu_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItems"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItems"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>> GetMenuItems_Async (object loc_id, object rmenu_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItems")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of child menu item ids for the specified parent group.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///a list of RMenuItem ids
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetChildMenuItemIds (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuItemIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuItemIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetChildMenuItemIds_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuItemIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a list of child menu item ids for the specified parent group.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="parent_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuItem_Admin&gt;' object.</em>
	///a list of RMenuItem objects
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin> GetChildMenuItems (object loc_id, object rmenu_id, object parent_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuItems"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("parent_group_id", parent_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetChildMenuItems"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>> GetChildMenuItems_Async (object loc_id, object rmenu_id, object parent_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetChildMenuItems")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_group/{parent_group_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("parent_group_id", parent_group_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of menu item IDs filtered by those items that are tagged with one of the tag identified by a comma separated list of tag ids.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetMenuItemIdsByTagIdList (object loc_id, object rmenu_id, object tag_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItemIdsByTagIdList"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("tag_id_list", tag_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItemIdsByTagIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetMenuItemIdsByTagIdList_Async (object loc_id, object rmenu_id, object tag_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItemIdsByTagIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}/ids",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("tag_id_list", tag_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of menu item objects filtered by those items that are tagged with one of the tag identified by a comma separated list of tag ids.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="tag_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.RMenuItem_Admin&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin> GetMenuItemsByTagIdList (object loc_id, object rmenu_id, object tag_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItemsByTagIdList"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("tag_id_list", tag_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItemsByTagIdList"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>> GetMenuItemsByTagIdList_Async (object loc_id, object rmenu_id, object tag_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItemsByTagIdList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.RMenuItem_Admin>>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/by_tag_list/{tag_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("tag_id_list", tag_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a menu item by ID. The menu item must be active (admin API will provide access to inactive menu items)
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.RMenuItem_Admin' object.</em>
	///a <see cref="T:ColonyConcierge.APIData.Data.RMenuItem_Admin" /> object
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.RMenuItem_Admin GetMenuItem (object loc_id, object rmenu_id, object rmenuitem_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItem"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.RMenuItem_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMenuItem"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.RMenuItem_Admin> GetMenuItem_Async (object loc_id, object rmenu_id, object rmenuitem_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.GetMenuItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.RMenuItem_Admin>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="menuitem"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddMenuItem (object loc_id, object rmenu_id, object rmenu_group_id, ColonyConcierge.APIData.Data.RMenuItem_Admin menuitem )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuItem"))
		{
			return _connector.Post<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_group_id", rmenu_group_id)
				.Parameter(menuitem);
		}
	}
	///<summary>
	///Async version of <see cref="AddMenuItem"/>
	///</summary>
	public async Task<Int32> AddMenuItem_Async (object loc_id, object rmenu_id, object rmenu_group_id, ColonyConcierge.APIData.Data.RMenuItem_Admin menuitem )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.AddMenuItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_group_id", rmenu_group_id)
					.Parameter(menuitem);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="menuitem"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateMenuItem (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id, ColonyConcierge.APIData.Data.RMenuItem_Admin menuitem )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuItem"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenu_group_id", rmenu_group_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter(menuitem);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateMenuItem"/>
	///</summary>
	public async Task<Boolean> UpdateMenuItem_Async (object loc_id, object rmenu_id, object rmenu_group_id, object rmenuitem_id, ColonyConcierge.APIData.Data.RMenuItem_Admin menuitem )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.UpdateMenuItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/group/{rmenu_group_id}/menuitems/{rmenuitem_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenu_group_id", rmenu_group_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter(menuitem);
				});
			return await result;
		}
	}

	///<summary>
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenuitem_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="rmenu_group_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/parent/{rmenu_group_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageRootRestaurantData' permission on the calling account</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetMenuItemParent (object loc_id, object rmenu_id, object rmenuitem_id, object rmenu_group_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuItemParent"))
		{
			return _connector.Put<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/parent/{rmenu_group_id}")
				.Parameter("loc_id", loc_id)
				.Parameter("rmenu_id", rmenu_id)
				.Parameter("rmenuitem_id", rmenuitem_id)
				.Parameter("rmenu_group_id", rmenu_group_id);
		}
	}
	///<summary>
	///Async version of <see cref="SetMenuItemParent"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetMenuItemParent_Async (object loc_id, object rmenu_id, object rmenuitem_id, object rmenu_group_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantAdmin.SetMenuItemParent")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/parent/{rmenu_group_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("rmenu_id", rmenu_id)
					.Parameter("rmenuitem_id", rmenuitem_id)
					.Parameter("rmenu_group_id", rmenu_group_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IRestaurantBusiness' API server interface
///</summary>
public class CC_API_IRestaurantBusiness : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IRestaurantBusiness() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IRestaurantBusiness(Connector connector) : base(connector)
	{
	}

	///<summary>
	///Gets a list of restaurant location ID's that the calling user is authorized to place customer orders for.
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/locations/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'PlaceCustomOrders' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetLocationIds ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetLocationIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/restaurant_business/locations/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetLocationIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetLocationIds_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetLocationIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/restaurant_business/locations/ids");
			return await result;
		}
	}

	///<summary>
	///Places a customer order
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location.
	///</param>
	///<param name="orderRequest"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/orders/{loc_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'PlaceCustomOrders' permission on the calling account</li>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 PlaceCustomOrder (object loc_id, ColonyConcierge.APIData.Data.CustomRestaurantOrderRequest orderRequest )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.PlaceCustomOrder"))
		{
			return _connector.Post<Int32>("/restaurant_business/orders/{loc_id}")
				.Parameter("loc_id", loc_id)
				.Parameter(orderRequest);
		}
	}
	///<summary>
	///Async version of <see cref="PlaceCustomOrder"/>
	///</summary>
	public async Task<Int32> PlaceCustomOrder_Async (object loc_id, ColonyConcierge.APIData.Data.CustomRestaurantOrderRequest orderRequest )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.PlaceCustomOrder")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/restaurant_business/orders/{loc_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter(orderRequest);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of orders for this restaurant location
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location.
	///</param>
	///<param name="for_delivery"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///An optional parameter that determines whether or not to include in the results orders that are for delivery.
	///The default if not specified is 'true'
	///</param>
	///<param name="for_pickup"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///An optional parameter that determines whether or not to include in the results orders that are for pickup.
	///The default if not specified is 'true'
	///</param>
	///<param name="open"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///An optional parameter that determines whether or not to include in the results orders that are currently 'open' (not completed or canceled yet).
	///The default if not specified is 'true'
	///</param>
	///<param name="closed"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///An optional parameter that determines whether or not to include in the results orders that are currently 'closed' (completed or canceled).
	///The default if not specified is 'true'
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///A starting bound timestamp for the order query. Make sure to cast to a <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" /> object!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///A ending bound timestamp for the order query. Make sure to cast to a <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" /> object!
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.BusinessScheduledService&gt;' object.</em>
	///A list of order details
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/orders/{loc_id}?for_delivery={for_delivery}&amp;for_pickup={for_pickup}&amp;open={open}&amp;closed={closed}&amp;start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewBusinessOrders' permission on the calling account</li>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.BusinessScheduledService> GetOrders (object loc_id, object for_delivery = null, object for_pickup = null, object open = null, object closed = null, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetOrders"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.BusinessScheduledService>>("/restaurant_business/orders/{loc_id}")
				.Parameter("loc_id", loc_id)
				.Query("for_delivery", for_delivery)
				.Query("for_pickup", for_pickup)
				.Query("open", open)
				.Query("closed", closed)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetOrders"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.BusinessScheduledService>> GetOrders_Async (object loc_id, object for_delivery = null, object for_pickup = null, object open = null, object closed = null, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetOrders")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.BusinessScheduledService>>("/restaurant_business/orders/{loc_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Query("for_delivery", for_delivery)
					.Query("for_pickup", for_pickup)
					.Query("open", open)
					.Query("closed", closed)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///Retreives a list of jobs by list of job ids.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location.
	///</param>
	///<param name="job_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///A comma-separated string list of job ids
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.Job&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/orders/{loc_id}/related_jobs/by_id_list/{job_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewBusinessOrders' permission on the calling account</li>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job> GetJobs (object loc_id, object job_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetJobs"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/restaurant_business/orders/{loc_id}/related_jobs/by_id_list/{job_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("job_id_list", job_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>> GetJobs_Async (object loc_id, object job_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetJobs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.Job>>("/restaurant_business/orders/{loc_id}/related_jobs/by_id_list/{job_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("job_id_list", job_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves the job details of the specified job.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location.
	///</param>
	///<param name="job_id_list"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///A comma-separated string list of job ids
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Logistics.JobDetails&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/orders/{loc_id}/related_job_details/by_id_list/{job_id_list}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails> GetJobDetails (object loc_id, object job_id_list )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetJobDetails"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails>>("/restaurant_business/orders/{loc_id}/related_job_details/by_id_list/{job_id_list}")
				.Parameter("loc_id", loc_id)
				.Parameter("job_id_list", job_id_list);
		}
	}
	///<summary>
	///Async version of <see cref="GetJobDetails"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails>> GetJobDetails_Async (object loc_id, object job_id_list )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetJobDetails")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Logistics.JobDetails>>("/restaurant_business/orders/{loc_id}/related_job_details/by_id_list/{job_id_list}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("job_id_list", job_id_list);
				});
			return await result;
		}
	}

	///<summary>
	///Returns true, of the specified zip code is one that is serviced by the specified restaurant.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location.
	///</param>
	///<param name="zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The zip code to test for.
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///Returns true, of the specified zip code is one that is serviced by the specified restaurant.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/delivery/{loc_id}/availability/{zip}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewBusinessOrders' permission on the calling account</li>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean GetDeliveryAvailability (object loc_id, object zip )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetDeliveryAvailability"))
		{
			return _connector.Get<Boolean>("/restaurant_business/delivery/{loc_id}/availability/{zip}")
				.Parameter("loc_id", loc_id)
				.Parameter("zip", zip);
		}
	}
	///<summary>
	///Async version of <see cref="GetDeliveryAvailability"/>
	///</summary>
	public async Task<Boolean> GetDeliveryAvailability_Async (object loc_id, object zip )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetDeliveryAvailability")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/restaurant_business/delivery/{loc_id}/availability/{zip}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("zip", zip);
				});
			return await result;
		}
	}

	///<summary>
	///Determines if an extended fee should apply to this order for delivery purposes.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location.
	///</param>
	///<param name="lat"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The latitude of the delivery address.
	///</param>
	///<param name="lon"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The longitude of the deliver address.
	///</param>
	///<returns>returns <em>a 'System.Decimal' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/delivery/{loc_id}/extended_fee/lat/{lat}/long/{lon}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewBusinessOrders' permission on the calling account</li>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Decimal GetExtendedFee (object loc_id, object lat, object lon )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetExtendedFee"))
		{
			return _connector.Get<System.Decimal>("/restaurant_business/delivery/{loc_id}/extended_fee/lat/{lat}/long/{lon}")
				.Parameter("loc_id", loc_id)
				.Parameter("lat", lat)
				.Parameter("lon", lon);
		}
	}
	///<summary>
	///Async version of <see cref="GetExtendedFee"/>
	///</summary>
	public async Task<System.Decimal> GetExtendedFee_Async (object loc_id, object lat, object lon )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetExtendedFee")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Decimal>("/restaurant_business/delivery/{loc_id}/extended_fee/lat/{lat}/long/{lon}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Parameter("lat", lat)
					.Parameter("lon", lon);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves revenue summary data over a given time period.
	///</summary>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///Make sure to cast to <see cref="T:ColonyConcierge.APIData.Data.TimeStamp" />!
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.BusinessRevenueReportData' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/restaurant_business/revenue_report/{loc_id}?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ViewBusinessRevenueReport' permission on the calling account</li>
	///<li>Can only be called by users authorized for the restaurant location in question</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.BusinessRevenueReportData GetRevenueReport (object loc_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetRevenueReport"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.BusinessRevenueReportData>("/restaurant_business/revenue_report/{loc_id}")
				.Parameter("loc_id", loc_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetRevenueReport"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.BusinessRevenueReportData> GetRevenueReport_Async (object loc_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IRestaurantBusiness.GetRevenueReport")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.BusinessRevenueReportData>("/restaurant_business/revenue_report/{loc_id}",
				builder =>
				{
					builder
					.Parameter("loc_id", loc_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IServerInfo' API server interface
///</summary>
public class CC_API_IServerInfo : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IServerInfo() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IServerInfo(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Get basic 'hello' from this server.
	///</summary>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String GetHello ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetHello"))
		{
			return _connector.Get("/server_info/");
		}
	}
	///<summary>
	///Async version of <see cref="GetHello"/>
	///</summary>
	public async Task<System.String> GetHello_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetHello")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/server_info/");
			return await result;
		}
	}

	///<summary>
	/// Checks DB connectivity
	///</summary>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/dbok</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean GetDatabaseOk ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetDatabaseOk"))
		{
			return _connector.Get<Boolean>("/server_info/dbok");
		}
	}
	///<summary>
	///Async version of <see cref="GetDatabaseOk"/>
	///</summary>
	public async Task<Boolean> GetDatabaseOk_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetDatabaseOk")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/server_info/dbok");
			return await result;
		}
	}

	///<summary>
	/// Gets the code version running on this server
	///</summary>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/version</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String GetCodeVersion ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetCodeVersion"))
		{
			return _connector.Get("/server_info/version");
		}
	}
	///<summary>
	///Async version of <see cref="GetCodeVersion"/>
	///</summary>
	public async Task<System.String> GetCodeVersion_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetCodeVersion")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/server_info/version");
			return await result;
		}
	}

	///<summary>
	/// Gets the codebase date running on this server
	///</summary>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/builddate</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String GetBuildDate ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetBuildDate"))
		{
			return _connector.Get("/server_info/builddate");
		}
	}
	///<summary>
	///Async version of <see cref="GetBuildDate"/>
	///</summary>
	public async Task<System.String> GetBuildDate_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetBuildDate")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/server_info/builddate");
			return await result;
		}
	}

	///<summary>
	/// Gets the SHA-1 of the git commit used to build the code.
	///</summary>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/build_sc_commit</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String GetBuildSourceControlCommit ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetBuildSourceControlCommit"))
		{
			return _connector.Get("/server_info/build_sc_commit");
		}
	}
	///<summary>
	///Async version of <see cref="GetBuildSourceControlCommit"/>
	///</summary>
	public async Task<System.String> GetBuildSourceControlCommit_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetBuildSourceControlCommit")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/server_info/build_sc_commit");
			return await result;
		}
	}

	///<summary>
	/// Gets the build configuration used to build this code.
	///</summary>
	///<returns>returns <em>a 'System.String' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/build_config</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.String GetBuildConfig ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetBuildConfig"))
		{
			return _connector.Get("/server_info/build_config");
		}
	}
	///<summary>
	///Async version of <see cref="GetBuildConfig"/>
	///</summary>
	public async Task<System.String> GetBuildConfig_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetBuildConfig")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/server_info/build_config");
			return await result;
		}
	}

	///<summary>
	/// Places the server in 'time debug' mode, where the logic acts as though the date and time is as specified in the timestamp parameter.
	///</summary>
	///<param name="enable_debug"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="debug_time"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/time_debug/{enable_debug}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SeeAllUsers' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetTimeDebugMode (object enable_debug, ColonyConcierge.APIData.Data.TimeStamp debug_time )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.SetTimeDebugMode"))
		{
			return _connector.Post<Boolean>("/server_info/time_debug/{enable_debug}")
				.Parameter("enable_debug", enable_debug)
				.Parameter(debug_time);
		}
	}
	///<summary>
	///Async version of <see cref="SetTimeDebugMode"/>
	///</summary>
	public async Task<Boolean> SetTimeDebugMode_Async (object enable_debug, ColonyConcierge.APIData.Data.TimeStamp debug_time )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.SetTimeDebugMode")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/server_info/time_debug/{enable_debug}",
				builder =>
				{
					builder
					.Parameter("enable_debug", enable_debug)
					.Parameter(debug_time);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the server's current time.
	///</summary>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.TimeStamp' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/time_debug/server_time</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.TimeStamp GetServerTime ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetServerTime"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.TimeStamp>("/server_info/time_debug/server_time");
		}
	}
	///<summary>
	///Async version of <see cref="GetServerTime"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.TimeStamp> GetServerTime_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetServerTime")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.TimeStamp>("/server_info/time_debug/server_time");
			return await result;
		}
	}

	///<summary>
	/// Gets the server's current local time .
	///</summary>
	///<returns>returns <em>a 'System.DateTime' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/time_debug/server_local_time</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.DateTime GtServerLocalTime ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GtServerLocalTime"))
		{
			return _connector.Get<System.DateTime>("/server_info/time_debug/server_local_time");
		}
	}
	///<summary>
	///Async version of <see cref="GtServerLocalTime"/>
	///</summary>
	public async Task<System.DateTime> GtServerLocalTime_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GtServerLocalTime")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.DateTime>("/server_info/time_debug/server_local_time");
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="platform"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ClientVersioningInfo' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/versioning/client?platform={platform}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ClientVersioningInfo GetClientVersionMinimums (object platform = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetClientVersionMinimums"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ClientVersioningInfo>("/server_info/versioning/client")
				.Query("platform", platform);
		}
	}
	///<summary>
	///Async version of <see cref="GetClientVersionMinimums"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ClientVersioningInfo> GetClientVersionMinimums_Async (object platform = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.GetClientVersionMinimums")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ClientVersioningInfo>("/server_info/versioning/client",
				builder =>
				{
					builder
					.Query("platform", platform);
				});
			return await result;
		}
	}

	///<summary>
	///Call this function in response to a plivo callback.
	///</summary>
	///<param name="data"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///This is the data (the query parameters) passed to the callback by Plivo
	///</param>
	///<returns>returns <em>a 'System.String' object.</em>
	///a string is returned in xml format that needs to be returned to plivo with mime type text/xml
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/server_info/plivo_callback?data={data}</b>
	///</remarks>
	public System.String DoPlivoCallback (object data = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.DoPlivoCallback"))
		{
			return _connector.Get("/server_info/plivo_callback")
				.Query("data", data);
		}
	}
	///<summary>
	///Async version of <see cref="DoPlivoCallback"/>
	///</summary>
	public async Task<System.String> DoPlivoCallback_Async (object data = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServerInfo.DoPlivoCallback")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync("/server_info/plivo_callback",
				builder =>
				{
					builder
					.Query("data", data);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IScheduledServices' API server interface
///</summary>
public class CC_API_IScheduledServices : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IScheduledServices() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IScheduledServices(Connector connector) : base(connector)
	{
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ScheduledService&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>The results are filtered by resources viewable to the caller's service group(s)</li>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService> GetServices ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetServices"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/scheduled_services/");
		}
	}
	///<summary>
	///Async version of <see cref="GetServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>> GetServices_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/scheduled_services/");
			return await result;
		}
	}

	///<summary>
	/// Gets a Scheduled Service Object
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledService' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ViewScheduledServices' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ScheduledService GetScheduledService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetScheduledService"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledService>("/scheduled_services/{service_id}")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledService"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ScheduledService> GetScheduledService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetScheduledService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledService>("/scheduled_services/{service_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Returns 'true' if this scheduled service can be edited, as determined by the business logic
	/// <note>This method has been renamed to 'IsServiceCustomerEditable'. Please use that version!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledServiceMutability' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/can_edit</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("This method has been renamed to 'IsServiceCustomerEditable'. Please use that version!", true)]
	public ColonyConcierge.APIData.Data.ScheduledServiceMutability IsServiceOpenToEdits (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.IsServiceOpenToEdits"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledServiceMutability>("/scheduled_services/{service_id}/can_edit")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="IsServiceOpenToEdits"/>
	///</summary>
	[Obsolete("This method has been renamed to 'IsServiceCustomerEditable'. Please use that version!", true)]
	public async Task<ColonyConcierge.APIData.Data.ScheduledServiceMutability> IsServiceOpenToEdits_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.IsServiceOpenToEdits")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledServiceMutability>("/scheduled_services/{service_id}/can_edit",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ServiceHistoryEntry&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/history</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHistoryEntry> GetHistoryEntries (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetHistoryEntries"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHistoryEntry>>("/scheduled_services/{service_id}/history")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetHistoryEntries"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHistoryEntry>> GetHistoryEntries_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetHistoryEntries")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ServiceHistoryEntry>>("/scheduled_services/{service_id}/history",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/history/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetHistoryEntryIDs (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetHistoryEntryIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/scheduled_services/{service_id}/history/ids")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetHistoryEntryIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetHistoryEntryIDs_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetHistoryEntryIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/scheduled_services/{service_id}/history/ids",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="history_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ServiceHistoryEntry' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/history/{history_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ServiceHistoryEntry GetHistoryEntry (object service_id, object history_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetHistoryEntry"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ServiceHistoryEntry>("/scheduled_services/{service_id}/history/{history_id}")
				.Parameter("service_id", service_id)
				.Parameter("history_id", history_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetHistoryEntry"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ServiceHistoryEntry> GetHistoryEntry_Async (object service_id, object history_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetHistoryEntry")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ServiceHistoryEntry>("/scheduled_services/{service_id}/history/{history_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("history_id", history_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of user notes for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Note&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note> GetNotes (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetNotes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/scheduled_services/{service_id}/notes")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetNotes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>> GetNotes_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetNotes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/scheduled_services/{service_id}/notes",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of user note ids for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/notes/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetNoteIds (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetNoteIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/scheduled_services/{service_id}/notes/ids")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetNoteIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetNoteIds_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetNoteIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/scheduled_services/{service_id}/notes/ids",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a user note object for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Note' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Note GetNote (object service_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetNote"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Note>("/scheduled_services/{service_id}/notes/{note_id}")
				.Parameter("service_id", service_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetNote"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Note> GetNote_Async (object service_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Note>("/scheduled_services/{service_id}/notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a user note for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddNote (object service_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.AddNote"))
		{
			return _connector.Post<Int32>("/scheduled_services/{service_id}/notes")
				.Parameter("service_id", service_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="AddNote"/>
	///</summary>
	public async Task<Int32> AddNote_Async (object service_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.AddNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/scheduled_services/{service_id}/notes",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates a user note object for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetNote (object service_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.SetNote"))
		{
			return _connector.Put<Boolean>("/scheduled_services/{service_id}/notes/{note_id}")
				.Parameter("service_id", service_id)
				.Parameter("note_id", note_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="SetNote"/>
	///</summary>
	public async Task<Boolean> SetNote_Async (object service_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.SetNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/scheduled_services/{service_id}/notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("note_id", note_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes a user note object for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteNote (object service_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.DeleteNote"))
		{
			return _connector.Delete<Boolean>("/scheduled_services/{service_id}/notes/{note_id}")
				.Parameter("service_id", service_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteNote"/>
	///</summary>
	public async Task<Boolean> DeleteNote_Async (object service_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.DeleteNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/scheduled_services/{service_id}/notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of admin notes for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Note&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/admin_notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note> GetAdminNotes (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetAdminNotes"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/scheduled_services/{service_id}/admin_notes")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAdminNotes"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>> GetAdminNotes_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetAdminNotes")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Note>>("/scheduled_services/{service_id}/admin_notes",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of admin note ids for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/admin_notes/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetAdminNoteIds (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetAdminNoteIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/scheduled_services/{service_id}/admin_notes/ids")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAdminNoteIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetAdminNoteIds_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetAdminNoteIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/scheduled_services/{service_id}/admin_notes/ids",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets an admin note object for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Note' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/admin_notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Note GetAdminNote (object service_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetAdminNote"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Note>("/scheduled_services/{service_id}/admin_notes/{note_id}")
				.Parameter("service_id", service_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetAdminNote"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Note> GetAdminNote_Async (object service_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Note>("/scheduled_services/{service_id}/admin_notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds an admin note for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/admin_notes</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddAdminNote (object service_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.AddAdminNote"))
		{
			return _connector.Post<Int32>("/scheduled_services/{service_id}/admin_notes")
				.Parameter("service_id", service_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="AddAdminNote"/>
	///</summary>
	public async Task<Int32> AddAdminNote_Async (object service_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.AddAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/scheduled_services/{service_id}/admin_notes",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an admin note object for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/admin_notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetAdminNote (object service_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.SetAdminNote"))
		{
			return _connector.Put<Boolean>("/scheduled_services/{service_id}/admin_notes/{note_id}")
				.Parameter("service_id", service_id)
				.Parameter("note_id", note_id)
				.Parameter(note);
		}
	}
	///<summary>
	///Async version of <see cref="SetAdminNote"/>
	///</summary>
	public async Task<Boolean> SetAdminNote_Async (object service_id, object note_id, ColonyConcierge.APIData.Data.Note note )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.SetAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/scheduled_services/{service_id}/admin_notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("note_id", note_id)
					.Parameter(note);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes an admin note object for the scheduled service object.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="note_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/admin_notes/{note_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ManageServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteAdminNote (object service_id, object note_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.DeleteAdminNote"))
		{
			return _connector.Delete<Boolean>("/scheduled_services/{service_id}/admin_notes/{note_id}")
				.Parameter("service_id", service_id)
				.Parameter("note_id", note_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteAdminNote"/>
	///</summary>
	public async Task<Boolean> DeleteAdminNote_Async (object service_id, object note_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.DeleteAdminNote")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/scheduled_services/{service_id}/admin_notes/{note_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Parameter("note_id", note_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Calculates and gets a fee for for this service. This is a 'raw' service fee that does not take into account discounts and plan allowances.
	/// This will also be incomplete if some of the charges have not been added.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.CalculatedServiceFee' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/service_fee</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.CalculatedServiceFee GetServiceFee (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetServiceFee"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.CalculatedServiceFee>("/scheduled_services/{service_id}/service_fee")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceFee"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.CalculatedServiceFee> GetServiceFee_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetServiceFee")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.CalculatedServiceFee>("/scheduled_services/{service_id}/service_fee",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Calculates and gets a fee for this service. This charge depends on account parameters, discounts and current allowances.
	/// This will also be incomplete if some of the charges have not been added.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.CalculatedServiceFee' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/effective_fee</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.CalculatedServiceFee GetEffectiveFee (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetEffectiveFee"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.CalculatedServiceFee>("/scheduled_services/{service_id}/effective_fee")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetEffectiveFee"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.CalculatedServiceFee> GetEffectiveFee_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetEffectiveFee")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.CalculatedServiceFee>("/scheduled_services/{service_id}/effective_fee",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a Scheduled Service Invoice
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Invoice' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/invoice</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public ColonyConcierge.APIData.Data.Invoice GetScheduledServiceInvoice (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetScheduledServiceInvoice"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Invoice>("/scheduled_services/{service_id}/invoice")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledServiceInvoice"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<ColonyConcierge.APIData.Data.Invoice> GetScheduledServiceInvoice_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.GetScheduledServiceInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Invoice>("/scheduled_services/{service_id}/invoice",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Creates an invoice for this scheduled service. This call will fail if an Invoice already exists for this service.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/invoice</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'CreateInvoice' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 CreateScheduledServiceInvoice (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.CreateScheduledServiceInvoice"))
		{
			return _connector.Post<Int32>("/scheduled_services/{service_id}/invoice")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="CreateScheduledServiceInvoice"/>
	///</summary>
	public async Task<Int32> CreateScheduledServiceInvoice_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.CreateScheduledServiceInvoice")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/scheduled_services/{service_id}/invoice",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///This queries is the service is in a state where editing by a customer is permissible
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledServiceMutability' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/is_editable</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageServices' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ScheduledServiceMutability IsServiceCustomerEditable (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.IsServiceCustomerEditable"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledServiceMutability>("/scheduled_services/{service_id}/is_editable")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="IsServiceCustomerEditable"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ScheduledServiceMutability> IsServiceCustomerEditable_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.IsServiceCustomerEditable")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledServiceMutability>("/scheduled_services/{service_id}/is_editable",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Starts the process for reviewing the service. This is typically a *manual* step in the workflow.
	///The must only be called for services that are in the "Entered" or
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/review</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Requires the 'ApproveScheduledServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ReviewService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.ReviewService"))
		{
			return _connector.Post<Boolean>("/scheduled_services/{service_id}/review")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="ReviewService"/>
	///</summary>
	public async Task<Boolean> ReviewService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.ReviewService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/scheduled_services/{service_id}/review",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///This cancels the review process, and places the service back in a state where it can be edited by a customer
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/review</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Requires the 'ApproveScheduledServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CancelReviewService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.CancelReviewService"))
		{
			return _connector.Delete<Boolean>("/scheduled_services/{service_id}/review")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="CancelReviewService"/>
	///</summary>
	public async Task<Boolean> CancelReviewService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.CancelReviewService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/scheduled_services/{service_id}/review",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Tests to see if a service is in a state where it is considered "in review"
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/review</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Requires the 'ApproveScheduledServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean IsServiceInReview (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.IsServiceInReview"))
		{
			return _connector.Get<Boolean>("/scheduled_services/{service_id}/review")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="IsServiceInReview"/>
	///</summary>
	public async Task<Boolean> IsServiceInReview_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.IsServiceInReview")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/scheduled_services/{service_id}/review",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Applies approval to a scheduled service.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/approve</b>
	///This is only valid to call on a Scheduled service that is in the "InReview" or "InEarlyReview" states.
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Requires the 'ApproveScheduledServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean ApproveService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.ApproveService"))
		{
			return _connector.Post<Boolean>("/scheduled_services/{service_id}/approve")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="ApproveService"/>
	///</summary>
	public async Task<Boolean> ApproveService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.ApproveService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/scheduled_services/{service_id}/approve",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Rejects a scheduled service
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/reject</b>
	///This is only valid to call on a Scheduled service that is in the "Entered" or "AwaitingApproval" states.
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Requires the 'ApproveScheduledServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean RejectService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.RejectService"))
		{
			return _connector.Post<Boolean>("/scheduled_services/{service_id}/reject")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="RejectService"/>
	///</summary>
	public async Task<Boolean> RejectService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.RejectService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/scheduled_services/{service_id}/reject",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Queries the approval state of a scheduled service.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Nullable&lt;Boolean&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/scheduled_services/{service_id}/is_approved</b>
	///This checks that a scheduled service has been approved, rejected, or not processed yet. It returns true, false, or null respectively.
	///The "approval" status is a service returned by this API does not mean that the state is specifically in the "Approved" state. It only means that
	///the service is in some state that implies approval has occured. This could mean that the current state of the service is "AwaitingPayment",
	///which takes place after approval.
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ModifyAnyUser' permission on the calling account</li>
	///<li>Requires the 'ApproveScheduledServices' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Nullable<Boolean> HasServiceBeenApproved (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.HasServiceBeenApproved"))
		{
			return _connector.Get<System.Nullable<Boolean>>("/scheduled_services/{service_id}/is_approved")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="HasServiceBeenApproved"/>
	///</summary>
	public async Task<System.Nullable<Boolean>> HasServiceBeenApproved_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IScheduledServices.HasServiceBeenApproved")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Nullable<Boolean>>("/scheduled_services/{service_id}/is_approved",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IServices' API server interface
///</summary>
public class CC_API_IServices : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IServices() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IServices(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Gets a list of available service objects based on the passed in list of ID's
	///</summary>
	///<param name="idList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Service&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service> GetServices (System.Collections.Generic.List<Int32> idList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetServices"))
		{
			return _connector.Post<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/services/")
				.Parameter(idList);
		}
	}
	///<summary>
	///Async version of <see cref="GetServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>> GetServices_Async (System.Collections.Generic.List<Int32> idList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/services/",
				builder =>
				{
					builder
					.Parameter(idList);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a service by ID
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Service' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Service GetService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetService"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Service>("/services/{service_id}")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetService"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Service> GetService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Service>("/services/{service_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Gets a list of <see cref="T:ColonyConcierge.APIData.Data.TaxRate" /> objects, with tax rates applicable to this service.
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.TaxRate&gt;' object.</em>
	///A list of tax rate objects associated with the service.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/{service_id}/tax_rates</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.TaxRate> GetTaxRates (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetTaxRates"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.TaxRate>>("/services/{service_id}/tax_rates")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetTaxRates"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.TaxRate>> GetTaxRates_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetTaxRates")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.TaxRate>>("/services/{service_id}/tax_rates",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of ID's for available services
	///</summary>
	///<param name="zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/availability/ids?zip={zip}&amp;start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetAvailableServiceIDs (object zip = null, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableServiceIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/services/availability/ids")
				.Query("zip", zip)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableServiceIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetAvailableServiceIDs_Async (object zip = null, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableServiceIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/services/availability/ids",
				builder =>
				{
					builder
					.Query("zip", zip)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of Service objects for available services
	///</summary>
	///<param name="zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Service&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/availability?zip={zip}&amp;start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service> GetAvailableServices (object zip = null, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableServices"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/services/availability")
				.Query("zip", zip)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>> GetAvailableServices_Async (object zip = null, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/services/availability",
				builder =>
				{
					builder
					.Query("zip", zip)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of Service objects for available services for a particular user, with subscription discounts applied
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Service&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/availability/{user_id}?start={start}&amp;end={end}&amp;zip={zip}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service> GetAvailableServicesForUser (object user_id, object start = null, object end = null, object zip = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableServicesForUser"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/services/availability/{user_id}")
				.Parameter("user_id", user_id)
				.Query("start", start)
				.Query("end", end)
				.Query("zip", zip);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableServicesForUser"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>> GetAvailableServicesForUser_Async (object user_id, object start = null, object end = null, object zip = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableServicesForUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Service>>("/services/availability/{user_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("start", start)
					.Query("end", end)
					.Query("zip", zip);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of dates of operation for the given service.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.SimpleDate&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/{service_id}/dates?start={start}&amp;end={end}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.SimpleDate> GetAvailableDatesForService (object service_id, object start = null, object end = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableDatesForService"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.SimpleDate>>("/services/{service_id}/dates")
				.Parameter("service_id", service_id)
				.Query("start", start)
				.Query("end", end);
		}
	}
	///<summary>
	///Async version of <see cref="GetAvailableDatesForService"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.SimpleDate>> GetAvailableDatesForService_Async (object service_id, object start = null, object end = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetAvailableDatesForService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.SimpleDate>>("/services/{service_id}/dates",
				builder =>
				{
					builder
					.Parameter("service_id", service_id)
					.Query("start", start)
					.Query("end", end);
				});
			return await result;
		}
	}

	///<summary>
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.State&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/cityservices</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.State> GetCityServices ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetCityServices"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.State>>("/services/cityservices");
		}
	}
	///<summary>
	///Async version of <see cref="GetCityServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.State>> GetCityServices_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetCityServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.State>>("/services/cityservices");
			return await result;
		}
	}

	///<summary>
	///Returns a list of potential grouped order destinations associated with the given zip code.
	///Note that depending on the final address, not all of the destinations would be acceptable.
	///</summary>
	///<param name="zip"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GroupedDeliveryDestination&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/grouped_destinations/by_zip/{zip}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> FindDestinationsByZip (object zip )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.FindDestinationsByZip"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_zip/{zip}")
				.Parameter("zip", zip);
		}
	}
	///<summary>
	///Async version of <see cref="FindDestinationsByZip"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>> FindDestinationsByZip_Async (object zip )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.FindDestinationsByZip")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_zip/{zip}",
				builder =>
				{
					builder
					.Parameter("zip", zip);
				});
			return await result;
		}
	}

	///<summary>
	///Returns a list of potential grouped order destinations associated with the given service ID
	///</summary>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GroupedDeliveryDestination&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/grouped_destinations/by_service_id/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> FindDestinationsByService (object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.FindDestinationsByService"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_service_id/{service_id}")
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="FindDestinationsByService"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>> FindDestinationsByService_Async (object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.FindDestinationsByService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_service_id/{service_id}",
				builder =>
				{
					builder
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	///Returns a list of potential grouped order destinations associated with the latatude and longitude.
	///Most of the time this should return either an empty list, or a list of a single location
	///</summary>
	///<param name="lat"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The desired latitude
	///</param>
	///<param name="lon"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///the Desired longitude
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GroupedDeliveryDestination&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/grouped_destinations/by_location/{lat}/long/{lon}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> FindDestinationsByLocation (object lat, object lon )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.FindDestinationsByLocation"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_location/{lat}/long/{lon}")
				.Parameter("lat", lat)
				.Parameter("lon", lon);
		}
	}
	///<summary>
	///Async version of <see cref="FindDestinationsByLocation"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>> FindDestinationsByLocation_Async (object lat, object lon )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.FindDestinationsByLocation")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_location/{lat}/long/{lon}",
				builder =>
				{
					builder
					.Parameter("lat", lat)
					.Parameter("lon", lon);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a destination by name
	///</summary>
	///<param name="name"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.GroupedDeliveryDestination' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/grouped_destinations/by_name/{name}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.GroupedDeliveryDestination GetDestinationByName (object name )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetDestinationByName"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>("/services/grouped_destinations/by_name/{name}")
				.Parameter("name", name);
		}
	}
	///<summary>
	///Async version of <see cref="GetDestinationByName"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> GetDestinationByName_Async (object name )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetDestinationByName")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>("/services/grouped_destinations/by_name/{name}",
				builder =>
				{
					builder
					.Parameter("name", name);
				});
			return await result;
		}
	}

	///<summary>
	///Retrieves a destination by id
	///</summary>
	///<param name="dest_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///the id of the Destination
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.GroupedDeliveryDestination' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/grouped_destinations/{dest_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.GroupedDeliveryDestination GetDestinationByID (object dest_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetDestinationByID"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>("/services/grouped_destinations/{dest_id}")
				.Parameter("dest_id", dest_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetDestinationByID"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> GetDestinationByID_Async (object dest_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetDestinationByID")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>("/services/grouped_destinations/{dest_id}",
				builder =>
				{
					builder
					.Parameter("dest_id", dest_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of available destination objects based on the passed in list of ID's
	///</summary>
	///<param name="idList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.GroupedDeliveryDestination&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/grouped_destinations/by_id_list</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination> GetDestinations (System.Collections.Generic.List<Int32> idList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetDestinations"))
		{
			return _connector.Post<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_id_list")
				.Parameter(idList);
		}
	}
	///<summary>
	///Async version of <see cref="GetDestinations"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>> GetDestinations_Async (System.Collections.Generic.List<Int32> idList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetDestinations")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.GroupedDeliveryDestination>>("/services/grouped_destinations/by_id_list",
				builder =>
				{
					builder
					.Parameter(idList);
				});
			return await result;
		}
	}

	///<summary>
	///Finds out the extended fee, if any associated with latitude and longitude
	///</summary>
	///<param name="lat"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The latitude of the delivery destination.
	///</param>
	///<param name="lon"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The longitude of the delivery destination.
	///</param>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The service id of the service the potential order will be placed with.
	///</param>
	///<param name="loc_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The ID of the restaurant location, used to determine the starting point
	///</param>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The user ID is the user to consider
	///</param>
	///<param name="zip_code"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///The zip code
	///</param>
	///<returns>returns <em>a 'System.Decimal' object.</em>
	///Returns the additional fee to deliver to this destination, based on distances, fee schedules, and any applicable user discounts.
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/services/fees/by_location/{lat}/{lon}/{service_id}/{loc_id}/{user_id}/{zip_code}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'SeeAllUsers' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Decimal GetExtendedRestaurantDeliveryFee (object lat, object lon, object service_id, object loc_id, object user_id, object zip_code )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetExtendedRestaurantDeliveryFee"))
		{
			return _connector.Get<System.Decimal>("/services/fees/by_location/{lat}/{lon}/{service_id}/{loc_id}/{user_id}/{zip_code}")
				.Parameter("lat", lat)
				.Parameter("lon", lon)
				.Parameter("service_id", service_id)
				.Parameter("loc_id", loc_id)
				.Parameter("user_id", user_id)
				.Parameter("zip_code", zip_code);
		}
	}
	///<summary>
	///Async version of <see cref="GetExtendedRestaurantDeliveryFee"/>
	///</summary>
	public async Task<System.Decimal> GetExtendedRestaurantDeliveryFee_Async (object lat, object lon, object service_id, object loc_id, object user_id, object zip_code )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IServices.GetExtendedRestaurantDeliveryFee")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Decimal>("/services/fees/by_location/{lat}/{lon}/{service_id}/{loc_id}/{user_id}/{zip_code}",
				builder =>
				{
					builder
					.Parameter("lat", lat)
					.Parameter("lon", lon)
					.Parameter("service_id", service_id)
					.Parameter("loc_id", loc_id)
					.Parameter("user_id", user_id)
					.Parameter("zip_code", zip_code);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IShoppingLists' API server interface
///</summary>
public class CC_API_IShoppingLists : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IShoppingLists() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IShoppingLists(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Gets a shopping list
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ShoppingList' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ShoppingList GetShoppingList (object shopping_list_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingList"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ShoppingList>("/shopping_lists/{shopping_list_id}")
				.Parameter("shopping_list_id", shopping_list_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetShoppingList"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ShoppingList> GetShoppingList_Async (object shopping_list_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ShoppingList>("/shopping_lists/{shopping_list_id}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Returns 'true' if this list can be edited, as determined by the business logic
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledServiceMutability' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/can_edit</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ScheduledServiceMutability IsListOpenToEdits (object shopping_list_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.IsListOpenToEdits"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledServiceMutability>("/shopping_lists/{shopping_list_id}/can_edit")
				.Parameter("shopping_list_id", shopping_list_id);
		}
	}
	///<summary>
	///Async version of <see cref="IsListOpenToEdits"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ScheduledServiceMutability> IsListOpenToEdits_Async (object shopping_list_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.IsListOpenToEdits")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledServiceMutability>("/shopping_lists/{shopping_list_id}/can_edit",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sets new data for an existing shopping list
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shoppingList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetShoppingList (object shopping_list_id, ColonyConcierge.APIData.Data.ShoppingList shoppingList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.SetShoppingList"))
		{
			return _connector.Put<Boolean>("/shopping_lists/{shopping_list_id}")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter(shoppingList);
		}
	}
	///<summary>
	///Async version of <see cref="SetShoppingList"/>
	///</summary>
	public async Task<Boolean> SetShoppingList_Async (object shopping_list_id, ColonyConcierge.APIData.Data.ShoppingList shoppingList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.SetShoppingList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/shopping_lists/{shopping_list_id}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter(shoppingList);
				});
			return await result;
		}
	}

	///<summary>
	/// Deletes a shopping list
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteShoppingList (object shopping_list_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.DeleteShoppingList"))
		{
			return _connector.Delete<Boolean>("/shopping_lists/{shopping_list_id}")
				.Parameter("shopping_list_id", shopping_list_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteShoppingList"/>
	///</summary>
	public async Task<Boolean> DeleteShoppingList_Async (object shopping_list_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.DeleteShoppingList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/shopping_lists/{shopping_list_id}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Creates a pseudo-deep copy of an existing shopping list, potentially preserving Products. (pass in a boolean value)
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="clone_products"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/clone/{clone_products}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 CloneShoppingList (object shopping_list_id, object clone_products )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.CloneShoppingList"))
		{
			return _connector.Post<Int32>("/shopping_lists/{shopping_list_id}/clone/{clone_products}")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter("clone_products", clone_products);
		}
	}
	///<summary>
	///Async version of <see cref="CloneShoppingList"/>
	///</summary>
	public async Task<Int32> CloneShoppingList_Async (object shopping_list_id, object clone_products )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.CloneShoppingList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/shopping_lists/{shopping_list_id}/clone/{clone_products}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter("clone_products", clone_products);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a List of Shopping list item ids for the shopping list.
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetShoppingListItemsIds (object shopping_list_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingListItemsIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/shopping_lists/{shopping_list_id}/items/ids")
				.Parameter("shopping_list_id", shopping_list_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetShoppingListItemsIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetShoppingListItemsIds_Async (object shopping_list_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingListItemsIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/shopping_lists/{shopping_list_id}/items/ids",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a List of Shopping list items for the shopping list.
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ShoppingListItem&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingListItem> GetShoppingListItems (object shopping_list_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingListItems"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingListItem>>("/shopping_lists/{shopping_list_id}/items")
				.Parameter("shopping_list_id", shopping_list_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetShoppingListItems"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingListItem>> GetShoppingListItems_Async (object shopping_list_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingListItems")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingListItem>>("/shopping_lists/{shopping_list_id}/items",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Replaces the entire list of Shopping list items for the shopping list.
	/// <note>THIS METHOD IS CURRENTLY UNIMPLEMENTED!</note>
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="itemsList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public Boolean SetShoppingListItems (object shopping_list_id, System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingListItem> itemsList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.SetShoppingListItems"))
		{
			return _connector.Put<Boolean>("/shopping_lists/{shopping_list_id}/items")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter(itemsList);
		}
	}
	///<summary>
	///Async version of <see cref="SetShoppingListItems"/>
	///</summary>
	[Obsolete("THIS METHOD IS CURRENTLY UNIMPLEMENTED!")]
	public async Task<Boolean> SetShoppingListItems_Async (object shopping_list_id, System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingListItem> itemsList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.SetShoppingListItems")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/shopping_lists/{shopping_list_id}/items",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter(itemsList);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a Shopping list item for the shopping list.
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ShoppingListItem' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items/{item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ShoppingListItem GetShoppingListItem (object shopping_list_id, object item_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingListItem"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ShoppingListItem>("/shopping_lists/{shopping_list_id}/items/{item_id}")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter("item_id", item_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetShoppingListItem"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ShoppingListItem> GetShoppingListItem_Async (object shopping_list_id, object item_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetShoppingListItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ShoppingListItem>("/shopping_lists/{shopping_list_id}/items/{item_id}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter("item_id", item_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new item to the shopping list, returning the Id of the new item
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="item"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddShoppingListItem (object shopping_list_id, ColonyConcierge.APIData.Data.ShoppingListItem item )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.AddShoppingListItem"))
		{
			return _connector.Post<Int32>("/shopping_lists/{shopping_list_id}/items")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter(item);
		}
	}
	///<summary>
	///Async version of <see cref="AddShoppingListItem"/>
	///</summary>
	public async Task<Int32> AddShoppingListItem_Async (object shopping_list_id, ColonyConcierge.APIData.Data.ShoppingListItem item )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.AddShoppingListItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/shopping_lists/{shopping_list_id}/items",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter(item);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an item in the shopping list, returning the updated item. NOTE: if you populate the 'Product' filed, a new product entry will be created.
	/// To re-use the previous Product, set the field to 'null'! You cannot alter 'Product' entries with this API, only create altered new ones.
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="item"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ShoppingListItem' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items/{item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ShoppingListItem SetShoppingListItem (object shopping_list_id, object item_id, ColonyConcierge.APIData.Data.ShoppingListItem item )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.SetShoppingListItem"))
		{
			return _connector.Put<ColonyConcierge.APIData.Data.ShoppingListItem>("/shopping_lists/{shopping_list_id}/items/{item_id}")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter("item_id", item_id)
				.Parameter(item);
		}
	}
	///<summary>
	///Async version of <see cref="SetShoppingListItem"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ShoppingListItem> SetShoppingListItem_Async (object shopping_list_id, object item_id, ColonyConcierge.APIData.Data.ShoppingListItem item )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.SetShoppingListItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<ColonyConcierge.APIData.Data.ShoppingListItem>("/shopping_lists/{shopping_list_id}/items/{item_id}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter("item_id", item_id)
					.Parameter(item);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new item to the shopping list.
	///</summary>
	///<param name="shopping_list_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="item_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/{shopping_list_id}/items/{item_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ManageAccounts' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeleteShoppingListItem (object shopping_list_id, object item_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.DeleteShoppingListItem"))
		{
			return _connector.Delete<Boolean>("/shopping_lists/{shopping_list_id}/items/{item_id}")
				.Parameter("shopping_list_id", shopping_list_id)
				.Parameter("item_id", item_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeleteShoppingListItem"/>
	///</summary>
	public async Task<Boolean> DeleteShoppingListItem_Async (object shopping_list_id, object item_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.DeleteShoppingListItem")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/shopping_lists/{shopping_list_id}/items/{item_id}",
				builder =>
				{
					builder
					.Parameter("shopping_list_id", shopping_list_id)
					.Parameter("item_id", item_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of stores servicing this zip code for shopping.
	///</summary>
	///<param name="zip_code"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ShoppingStore&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/stores/by_zip/{zip_code}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore> GetStores (object zip_code )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetStores"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore>>("/shopping_lists/stores/by_zip/{zip_code}")
				.Parameter("zip_code", zip_code);
		}
	}
	///<summary>
	///Async version of <see cref="GetStores"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore>> GetStores_Async (object zip_code )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetStores")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ShoppingStore>>("/shopping_lists/stores/by_zip/{zip_code}",
				builder =>
				{
					builder
					.Parameter("zip_code", zip_code);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of stores servicing this zip code for shopping.
	///</summary>
	///<param name="store_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ShoppingStore' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/shopping_lists/stores/{store_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ShoppingStore GetStore (object store_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetStore"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ShoppingStore>("/shopping_lists/stores/{store_id}")
				.Parameter("store_id", store_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetStore"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ShoppingStore> GetStore_Async (object store_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IShoppingLists.GetStore")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ShoppingStore>("/shopping_lists/stores/{store_id}",
				builder =>
				{
					builder
					.Parameter("store_id", store_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'ISubscriptions' API server interface
///</summary>
public class CC_API_ISubscriptions : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_ISubscriptions() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_ISubscriptions(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Gets a list of subscription plans
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.SubscriptionPlan&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/subscriptions/plans</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.SubscriptionPlan> GetPlans ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlans"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.SubscriptionPlan>>("/subscriptions/plans");
		}
	}
	///<summary>
	///Async version of <see cref="GetPlans"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.SubscriptionPlan>> GetPlans_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlans")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.SubscriptionPlan>>("/subscriptions/plans");
			return await result;
		}
	}

	///<summary>
	/// Gets a list of subscription plan IDs
	///</summary>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/subscriptions/plans/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPlanIDs ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlanIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/subscriptions/plans/ids");
		}
	}
	///<summary>
	///Async version of <see cref="GetPlanIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPlanIDs_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlanIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/subscriptions/plans/ids");
			return await result;
		}
	}

	///<summary>
	/// Gets a subscription plan
	///</summary>
	///<param name="plan_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.SubscriptionPlan' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/subscriptions/plans/{plan_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.SubscriptionPlan GetPlan (object plan_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlan"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.SubscriptionPlan>("/subscriptions/plans/{plan_id}")
				.Parameter("plan_id", plan_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPlan"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.SubscriptionPlan> GetPlan_Async (object plan_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlan")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.SubscriptionPlan>("/subscriptions/plans/{plan_id}",
				builder =>
				{
					builder
					.Parameter("plan_id", plan_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of descriptions for plan items
	///</summary>
	///<param name="plan_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;System.String&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/subscriptions/plans/{plan_id}/item_descriptions</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by anonymous users.</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<System.String> GetPlanItemDescriptions (object plan_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlanItemDescriptions"))
		{
			return _connector.Get<System.Collections.Generic.List<System.String>>("/subscriptions/plans/{plan_id}/item_descriptions")
				.Parameter("plan_id", plan_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPlanItemDescriptions"/>
	///</summary>
	public async Task<System.Collections.Generic.List<System.String>> GetPlanItemDescriptions_Async (object plan_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "ISubscriptions.GetPlanItemDescriptions")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<System.String>>("/subscriptions/plans/{plan_id}/item_descriptions",
				builder =>
				{
					builder
					.Parameter("plan_id", plan_id);
				});
			return await result;
		}
	}

}

///<summary>
/// Wrapper data object for the 'IUsers' API server interface
///</summary>
public class CC_API_IUsers : BaseDataObject
{

	///<summary>
	/// Default constructor, can be used API's without login credentials, or credentials can be supplied
	///</summary>
	public CC_API_IUsers() : this(null)
	{
	}

	///<summary>
	/// Constructor that takes an existing connector
	///</summary>
	///<param name="connector">Existing connector. If the connector has not logged in, any API call will attempt to login the connector</param>
	///<remarks>
	///<note>This constructor is no longer needed. For an easier way to use the ObjectData API objects, see <see cref="APIs"/></note>
	///</remarks>
	public CC_API_IUsers(Connector connector) : base(connector)
	{
	}

	///<summary>
	/// Gets a user structure for the given user id (not username!)
	///</summary>
	///<param name="id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.User' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.User GetUser (object id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUser"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.User>("/users/{id}")
				.Parameter("id", id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUser"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.User> GetUser_Async (object id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.User>("/users/{id}",
				builder =>
				{
					builder
					.Parameter("id", id);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates an existing user's data, returns 'true' if succeeded.
	///</summary>
	///<param name="user"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetUser (ColonyConcierge.APIData.Data.User user )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.SetUser"))
		{
			return _connector.Put<Boolean>("/users/")
				.Parameter(user);
		}
	}
	///<summary>
	///Async version of <see cref="SetUser"/>
	///</summary>
	public async Task<Boolean> SetUser_Async (ColonyConcierge.APIData.Data.User user )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.SetUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/",
				builder =>
				{
					builder
					.Parameter(user);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a user structure for the currently logged in user
	///</summary>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.User' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/current</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.User GetCurrentUser ( )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetCurrentUser"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.User>("/users/current");
		}
	}
	///<summary>
	///Async version of <see cref="GetCurrentUser"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.User> GetCurrentUser_Async ( )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetCurrentUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.User>("/users/current");
			return await result;
		}
	}

	///<summary>
	/// Gets a list of user address structures
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ExtendedAddress&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/service_addresses</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress> GetServiceAddresses (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetServiceAddresses"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress>>("/users/{user_id}/service_addresses")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetServiceAddresses"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress>> GetServiceAddresses_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetServiceAddresses")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ExtendedAddress>>("/users/{user_id}/service_addresses",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a customer user's role level. This will return 'Other' if called on a non-customer user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.CustomerUserLevel' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/customer_level</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ApproveSubusers' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.CustomerUserLevel GetCustomerLevel (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetCustomerLevel"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.CustomerUserLevel>("/users/{user_id}/customer_level")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetCustomerLevel"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.CustomerUserLevel> GetCustomerLevel_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetCustomerLevel")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.CustomerUserLevel>("/users/{user_id}/customer_level",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sets a customer user's role level. This will fail if the user is not already a customer user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="userLevel"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/customer_level</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ApproveSubusers' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'EnableUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean SetCustomerLevel (object user_id, ColonyConcierge.APIData.Data.CustomerUserLevel userLevel )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.SetCustomerLevel"))
		{
			return _connector.Put<Boolean>("/users/{user_id}/customer_level")
				.Parameter("user_id", user_id)
				.Parameter(userLevel);
		}
	}
	///<summary>
	///Async version of <see cref="SetCustomerLevel"/>
	///</summary>
	public async Task<Boolean> SetCustomerLevel_Async (object user_id, ColonyConcierge.APIData.Data.CustomerUserLevel userLevel )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.SetCustomerLevel")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/{user_id}/customer_level",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(userLevel);
				});
			return await result;
		}
	}

	///<summary>
	/// Enables the specified user, returning the prior enabled state
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="enable"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/is_enbled</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'EnableUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean EnableUser (object user_id, Boolean enable )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.EnableUser"))
		{
			return _connector.Put<Boolean>("/users/{user_id}/is_enbled")
				.Parameter("user_id", user_id)
				.Parameter(enable);
		}
	}
	///<summary>
	///Async version of <see cref="EnableUser"/>
	///</summary>
	public async Task<Boolean> EnableUser_Async (object user_id, Boolean enable )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.EnableUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/{user_id}/is_enbled",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(enable);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the 'enabled' state of a user. Note that the account must also be enabled for the user to log in
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/is_enbled</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'EnableUsers' permission</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean GetUserEnabled (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUserEnabled"))
		{
			return _connector.Get<Boolean>("/users/{user_id}/is_enbled")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUserEnabled"/>
	///</summary>
	public async Task<Boolean> GetUserEnabled_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUserEnabled")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/users/{user_id}/is_enbled",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Enables the specified user, returning the enabled state
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="lockout"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/is_locked_out</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'EnableUsers' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean LockoutUser (object user_id, Boolean lockout )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.LockoutUser"))
		{
			return _connector.Put<Boolean>("/users/{user_id}/is_locked_out")
				.Parameter("user_id", user_id)
				.Parameter(lockout);
		}
	}
	///<summary>
	///Async version of <see cref="LockoutUser"/>
	///</summary>
	public async Task<Boolean> LockoutUser_Async (object user_id, Boolean lockout )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.LockoutUser")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/{user_id}/is_locked_out",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(lockout);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets the 'enabled' state of a user. Note that the account must also be enabled for the user to log in
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/is_locked_out</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'EnableUsers' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean GetUserLockedOut (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUserLockedOut"))
		{
			return _connector.Get<Boolean>("/users/{user_id}/is_locked_out")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUserLockedOut"/>
	///</summary>
	public async Task<Boolean> GetUserLockedOut_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUserLockedOut")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Boolean>("/users/{user_id}/is_locked_out",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of messages associated with the user, either sent or received.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.MessageIDList' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/messages</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.MessageIDList GetMessages (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetMessages"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.MessageIDList>("/users/{user_id}/messages")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMessages"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.MessageIDList> GetMessages_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetMessages")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.MessageIDList>("/users/{user_id}/messages",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a specific message, either sent or received.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="msg_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.Message' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/messages/{msg_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.Message GetMessage (object user_id, object msg_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetMessage"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.Message>("/users/{user_id}/messages/{msg_id}")
				.Parameter("user_id", user_id)
				.Parameter("msg_id", msg_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetMessage"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.Message> GetMessage_Async (object user_id, object msg_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetMessage")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.Message>("/users/{user_id}/messages/{msg_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("msg_id", msg_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Sends a new message on behalf of this user, with message structure in the post body
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="message"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/messages/sent</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'SendMessage' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 PostNewMessage (object user_id, ColonyConcierge.APIData.Data.Message message )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.PostNewMessage"))
		{
			return _connector.Post<Int32>("/users/{user_id}/messages/sent")
				.Parameter("user_id", user_id)
				.Parameter(message);
		}
	}
	///<summary>
	///Async version of <see cref="PostNewMessage"/>
	///</summary>
	public async Task<Int32> PostNewMessage_Async (object user_id, ColonyConcierge.APIData.Data.Message message )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.PostNewMessage")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/users/{user_id}/messages/sent",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(message);
				});
			return await result;
		}
	}

	///<summary>
	/// Marks or unmarks a message as read
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="message_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="read"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/messages/{message_id}/is_read</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean MarkMessageRead (object user_id, object message_id, Boolean read )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.MarkMessageRead"))
		{
			return _connector.Put<Boolean>("/users/{user_id}/messages/{message_id}/is_read")
				.Parameter("user_id", user_id)
				.Parameter("message_id", message_id)
				.Parameter(read);
		}
	}
	///<summary>
	///Async version of <see cref="MarkMessageRead"/>
	///</summary>
	public async Task<Boolean> MarkMessageRead_Async (object user_id, object message_id, Boolean read )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.MarkMessageRead")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/{user_id}/messages/{message_id}/is_read",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("message_id", message_id)
					.Parameter(read);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of received messages for this user., oldest first, unless reverse order is specified.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="unread_only"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="page_size"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="page_num"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="reverse_order"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.Message&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/message/received?unread_only={unread_only}&amp;page_size={page_size}&amp;page_num={page_num}&amp;reverse_order={reverse_order}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.Message> GetReceivedMessages (object user_id, object unread_only = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetReceivedMessages"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Message>>("/users/{user_id}/message/received")
				.Parameter("user_id", user_id)
				.Query("unread_only", unread_only)
				.Query("page_size", page_size)
				.Query("page_num", page_num)
				.Query("reverse_order", reverse_order);
		}
	}
	///<summary>
	///Async version of <see cref="GetReceivedMessages"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Message>> GetReceivedMessages_Async (object user_id, object unread_only = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetReceivedMessages")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.Message>>("/users/{user_id}/message/received",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("unread_only", unread_only)
					.Query("page_size", page_size)
					.Query("page_num", page_num)
					.Query("reverse_order", reverse_order);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a count of unread received messages for this user.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/message/received/count</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 GetUnreadCount (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUnreadCount"))
		{
			return _connector.Get<Int32>("/users/{user_id}/message/received/count")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetUnreadCount"/>
	///</summary>
	public async Task<Int32> GetUnreadCount_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetUnreadCount")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<Int32>("/users/{user_id}/message/received/count",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Schedules a new service request, returns the ID of the request
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_request"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/scheduled_services</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called with an active service subscription</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifiyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddScheduledService (object user_id, ColonyConcierge.APIData.Data.ScheduledService service_request )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddScheduledService"))
		{
			return _connector.Post<Int32>("/users/{user_id}/scheduled_services")
				.Parameter("user_id", user_id)
				.Parameter(service_request);
		}
	}
	///<summary>
	///Async version of <see cref="AddScheduledService"/>
	///</summary>
	public async Task<Int32> AddScheduledService_Async (object user_id, ColonyConcierge.APIData.Data.ScheduledService service_request )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddScheduledService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/users/{user_id}/scheduled_services",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(service_request);
				});
			return await result;
		}
	}

	///<summary>
	/// Makes modifications to a scheduled request, returning 'true' if successful.
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_request"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/scheduled_services/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user</li>
	///<li>Can only be called with an active service subscription</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean UpdateScheduledService (object user_id, object service_id, ColonyConcierge.APIData.Data.ScheduledService service_request )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.UpdateScheduledService"))
		{
			return _connector.Put<Boolean>("/users/{user_id}/scheduled_services/{service_id}")
				.Parameter("user_id", user_id)
				.Parameter("service_id", service_id)
				.Parameter(service_request);
		}
	}
	///<summary>
	///Async version of <see cref="UpdateScheduledService"/>
	///</summary>
	public async Task<Boolean> UpdateScheduledService_Async (object user_id, object service_id, ColonyConcierge.APIData.Data.ScheduledService service_request )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.UpdateScheduledService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/{user_id}/scheduled_services/{service_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("service_id", service_id)
					.Parameter(service_request);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of scheduled service IDs for this user
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_states"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="only_attention_needed"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start_date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end_date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="page_size"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="page_num"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="reverse_order"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.ScheduledService&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/scheduled_services?service_states={service_states}&amp;only_attention_needed={only_attention_needed}&amp;start_date={start_date}&amp;end_date={end_date}&amp;page_size={page_size}&amp;page_num={page_num}&amp;reverse_order={reverse_order}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService> GetScheduledServices (object user_id, object service_states = null, object only_attention_needed = null, object start_date = null, object end_date = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetScheduledServices"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/users/{user_id}/scheduled_services")
				.Parameter("user_id", user_id)
				.Query("service_states", service_states)
				.Query("only_attention_needed", only_attention_needed)
				.Query("start_date", start_date)
				.Query("end_date", end_date)
				.Query("page_size", page_size)
				.Query("page_num", page_num)
				.Query("reverse_order", reverse_order);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledServices"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>> GetScheduledServices_Async (object user_id, object service_states = null, object only_attention_needed = null, object start_date = null, object end_date = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetScheduledServices")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.ScheduledService>>("/users/{user_id}/scheduled_services",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("service_states", service_states)
					.Query("only_attention_needed", only_attention_needed)
					.Query("start_date", start_date)
					.Query("end_date", end_date)
					.Query("page_size", page_size)
					.Query("page_num", page_num)
					.Query("reverse_order", reverse_order);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of scheduled service IDs for this user
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_states"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="only_attention_needed"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="start_date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="end_date"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="page_size"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="page_num"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="reverse_order"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/scheduled_services/ids?service_states={service_states}&amp;only_attention_needed={only_attention_needed}&amp;start_date={start_date}&amp;end_date={end_date}&amp;page_size={page_size}&amp;page_num={page_num}&amp;reverse_order={reverse_order}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetScheduledServicesIds (object user_id, object service_states = null, object only_attention_needed = null, object start_date = null, object end_date = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetScheduledServicesIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/users/{user_id}/scheduled_services/ids")
				.Parameter("user_id", user_id)
				.Query("service_states", service_states)
				.Query("only_attention_needed", only_attention_needed)
				.Query("start_date", start_date)
				.Query("end_date", end_date)
				.Query("page_size", page_size)
				.Query("page_num", page_num)
				.Query("reverse_order", reverse_order);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledServicesIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetScheduledServicesIds_Async (object user_id, object service_states = null, object only_attention_needed = null, object start_date = null, object end_date = null, object page_size = null, object page_num = null, object reverse_order = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetScheduledServicesIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/users/{user_id}/scheduled_services/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Query("service_states", service_states)
					.Query("only_attention_needed", only_attention_needed)
					.Query("start_date", start_date)
					.Query("end_date", end_date)
					.Query("page_size", page_size)
					.Query("page_num", page_num)
					.Query("reverse_order", reverse_order);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a scheduled service by id
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.ScheduledService' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/scheduled_services/{service_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'ViewScheduledServices' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.ScheduledService GetScheduledService (object user_id, object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetScheduledService"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.ScheduledService>("/users/{user_id}/scheduled_services/{service_id}")
				.Parameter("user_id", user_id)
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetScheduledService"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.ScheduledService> GetScheduledService_Async (object user_id, object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetScheduledService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.ScheduledService>("/users/{user_id}/scheduled_services/{service_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Cancels a scheduled service, this just sets it's status to "canceled". The service can only be canceled in certain service status states
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="service_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/scheduled_services/{service_id}/cancel</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean CancelScheduledService (object user_id, object service_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.CancelScheduledService"))
		{
			return _connector.Post<Boolean>("/users/{user_id}/scheduled_services/{service_id}/cancel")
				.Parameter("user_id", user_id)
				.Parameter("service_id", service_id);
		}
	}
	///<summary>
	///Async version of <see cref="CancelScheduledService"/>
	///</summary>
	public async Task<Boolean> CancelScheduledService_Async (object user_id, object service_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.CancelScheduledService")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Boolean>("/users/{user_id}/scheduled_services/{service_id}/cancel",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("service_id", service_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new phone number, returns the id
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="phone_number"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/phone_numbers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddPhoneNumber (object user_id, ColonyConcierge.APIData.Data.PhoneNumber phone_number )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddPhoneNumber"))
		{
			return _connector.Post<Int32>("/users/{user_id}/phone_numbers")
				.Parameter("user_id", user_id)
				.Parameter(phone_number);
		}
	}
	///<summary>
	///Async version of <see cref="AddPhoneNumber"/>
	///</summary>
	public async Task<Int32> AddPhoneNumber_Async (object user_id, ColonyConcierge.APIData.Data.PhoneNumber phone_number )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddPhoneNumber")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/users/{user_id}/phone_numbers",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(phone_number);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a phone number by id
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="phone_number_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PhoneNumber' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/phone_numbers/{phone_number_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.PhoneNumber GetPhoneNumber (object user_id, object phone_number_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetPhoneNumber"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.PhoneNumber>("/users/{user_id}/phone_numbers/{phone_number_id}")
				.Parameter("user_id", user_id)
				.Parameter("phone_number_id", phone_number_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPhoneNumber"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.PhoneNumber> GetPhoneNumber_Async (object user_id, object phone_number_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetPhoneNumber")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.PhoneNumber>("/users/{user_id}/phone_numbers/{phone_number_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("phone_number_id", phone_number_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Updates a phone number by id
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="phone_number_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="phoneNumber"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.PhoneNumber' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/phone_numbers/{phone_number_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Can only be called with an active service subscription</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.PhoneNumber SetPhoneNumber (object user_id, object phone_number_id, ColonyConcierge.APIData.Data.PhoneNumber phoneNumber )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.SetPhoneNumber"))
		{
			return _connector.Put<ColonyConcierge.APIData.Data.PhoneNumber>("/users/{user_id}/phone_numbers/{phone_number_id}")
				.Parameter("user_id", user_id)
				.Parameter("phone_number_id", phone_number_id)
				.Parameter(phoneNumber);
		}
	}
	///<summary>
	///Async version of <see cref="SetPhoneNumber"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.PhoneNumber> SetPhoneNumber_Async (object user_id, object phone_number_id, ColonyConcierge.APIData.Data.PhoneNumber phoneNumber )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.SetPhoneNumber")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<ColonyConcierge.APIData.Data.PhoneNumber>("/users/{user_id}/phone_numbers/{phone_number_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("phone_number_id", phone_number_id)
					.Parameter(phoneNumber);
				});
			return await result;
		}
	}

	///<summary>
	/// deletes a phone number by id
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="phone_number_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/phone_numbers/{phone_number_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean DeletePhoneNumber (object user_id, object phone_number_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.DeletePhoneNumber"))
		{
			return _connector.Delete<Boolean>("/users/{user_id}/phone_numbers/{phone_number_id}")
				.Parameter("user_id", user_id)
				.Parameter("phone_number_id", phone_number_id);
		}
	}
	///<summary>
	///Async version of <see cref="DeletePhoneNumber"/>
	///</summary>
	public async Task<Boolean> DeletePhoneNumber_Async (object user_id, object phone_number_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.DeletePhoneNumber")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.DeleteAsync<Boolean>("/users/{user_id}/phone_numbers/{phone_number_id}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("phone_number_id", phone_number_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all phone numbers for the user
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;ColonyConcierge.APIData.Data.PhoneNumber&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/phone_numbers</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<ColonyConcierge.APIData.Data.PhoneNumber> GetPhoneNumbers (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetPhoneNumbers"))
		{
			return _connector.Get<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PhoneNumber>>("/users/{user_id}/phone_numbers")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPhoneNumbers"/>
	///</summary>
	public async Task<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PhoneNumber>> GetPhoneNumbers_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetPhoneNumbers")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<ColonyConcierge.APIData.Data.PhoneNumber>>("/users/{user_id}/phone_numbers",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all phone numbers ids for the user
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/phone_numbers/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by users on the account, OR by users with the 'SeeAllUsers' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetPhoneNumberIDs (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetPhoneNumberIDs"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/users/{user_id}/phone_numbers/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetPhoneNumberIDs"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetPhoneNumberIDs_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetPhoneNumberIDs")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/users/{user_id}/phone_numbers/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Gets a list of all shopping list ids for the user
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'System.Collections.Generic.List&lt;Int32&gt;' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/shopping_lists/ids</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Can only be called with an active service subscription</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public System.Collections.Generic.List<Int32> GetShoppingListsIds (object user_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetShoppingListsIds"))
		{
			return _connector.Get<System.Collections.Generic.List<Int32>>("/users/{user_id}/shopping_lists/ids")
				.Parameter("user_id", user_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetShoppingListsIds"/>
	///</summary>
	public async Task<System.Collections.Generic.List<Int32>> GetShoppingListsIds_Async (object user_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetShoppingListsIds")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<System.Collections.Generic.List<Int32>>("/users/{user_id}/shopping_lists/ids",
				builder =>
				{
					builder
					.Parameter("user_id", user_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new shopping list for the user, and returns its ID
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="shoppingList"><em>HTTP body parameter, passed as a JSON object<em>
	///</param>
	///<returns>returns <em>a 'Int32' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/shopping_lists</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>Requires the 'ScheduleService' permission on the calling account</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Int32 AddShoppingList (object user_id, ColonyConcierge.APIData.Data.ShoppingList shoppingList )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddShoppingList"))
		{
			return _connector.Post<Int32>("/users/{user_id}/shopping_lists")
				.Parameter("user_id", user_id)
				.Parameter(shoppingList);
		}
	}
	///<summary>
	///Async version of <see cref="AddShoppingList"/>
	///</summary>
	public async Task<Int32> AddShoppingList_Async (object user_id, ColonyConcierge.APIData.Data.ShoppingList shoppingList )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddShoppingList")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PostAsync<Int32>("/users/{user_id}/shopping_lists",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter(shoppingList);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a new shopping list for the user, and returns its ID
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="invoice_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'ColonyConcierge.APIData.Data.BinaryFile' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/invoice/{invoice_id}/printable_recceipt</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'SeeAllUsers' permission</li>
	///<li>Requires the 'ManagePayments' permission on the calling account</li>
	///<li>Can only be called by a user with permission to access the associated service group</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public ColonyConcierge.APIData.Data.BinaryFile GetInvoicePrintableReceipt (object user_id, object invoice_id )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetInvoicePrintableReceipt"))
		{
			return _connector.Get<ColonyConcierge.APIData.Data.BinaryFile>("/users/{user_id}/invoice/{invoice_id}/printable_recceipt")
				.Parameter("user_id", user_id)
				.Parameter("invoice_id", invoice_id);
		}
	}
	///<summary>
	///Async version of <see cref="GetInvoicePrintableReceipt"/>
	///</summary>
	public async Task<ColonyConcierge.APIData.Data.BinaryFile> GetInvoicePrintableReceipt_Async (object user_id, object invoice_id )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.GetInvoicePrintableReceipt")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.GetAsync<ColonyConcierge.APIData.Data.BinaryFile>("/users/{user_id}/invoice/{invoice_id}/printable_recceipt",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("invoice_id", invoice_id);
				});
			return await result;
		}
	}

	///<summary>
	/// Adds a device token for a user
	///</summary>
	///<param name="user_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="device_type"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="token"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<param name="unique_device_id"><em>Uri segment or query parameter, will be converted with 'ToString'</em>
	///</param>
	///<returns>returns <em>a 'Boolean' object.</em>
	///</returns>
	///<remarks>
	/// Full endpoint URI template: <b>/users/{user_id}/set_device_token/{device_type}/{token}?unique_device_id={unique_device_id}</b>
	///
	///<note>This method has the following security attributes:
	///
	///<ul>
	///<li>Can only be called by owning user, OR by users with the 'ModifyAnyUser' permission</li>
	///<li>This method is callable by logged in users with enabled accounts</li>
	///</ul>
	///</note>
	///</remarks>
	public Boolean AddDeviceToken (object user_id, object device_type, object token, object unique_device_id = null )
	{
		EnsureLogin();
		using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddDeviceToken"))
		{
			return _connector.Put<Boolean>("/users/{user_id}/set_device_token/{device_type}/{token}")
				.Parameter("user_id", user_id)
				.Parameter("device_type", device_type)
				.Parameter("token", token)
				.Query("unique_device_id", unique_device_id);
		}
	}
	///<summary>
	///Async version of <see cref="AddDeviceToken"/>
	///</summary>
	public async Task<Boolean> AddDeviceToken_Async (object user_id, object device_type, object token, object unique_device_id = null )
	{
		//TODO async methods for now still call EnsureLogin synchronously.
		EnsureLogin();
		//using (SimpleTimer.Measure(MetricsSink, EnableMetrics, "IUsers.AddDeviceToken")) // NOTE: Async methods not using metrics for now
		{
			var result = _connector.PutAsync<Boolean>("/users/{user_id}/set_device_token/{device_type}/{token}",
				builder =>
				{
					builder
					.Parameter("user_id", user_id)
					.Parameter("device_type", device_type)
					.Parameter("token", token)
					.Query("unique_device_id", unique_device_id);
				});
			return await result;
		}
	}

}

}
namespace ColonyConcierge.Client.DataSources
{
/// <summary>
/// This namespace contains the "ObjectData" API, the classes prefixed with "CC_API" are auto-generated wrappers
/// for the REST/JSON api supported by the server. See the <see cref="APIs"/> class for a convenient utility class
/// for accessing instances of these API objects.
/// <note>
/// The following API's are deprecated or not implemented yet
/// <ul>
	/// <li> <see cref="CC_API_IAccounts.GetServiceCreditRemaining">CC_API_IAccounts.GetServiceCreditRemaining</see> (Endpoint '<b>/accounts/{account_id}/service_credit</b>')</li>
	/// <li> <see cref="CC_API_IAccounts.GetToken">CC_API_IAccounts.GetToken</see> (Endpoint '<b>/accounts/bt/{account_id}/get_token</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.GetScheduledServiceStatus">CC_API_IAdmin.GetScheduledServiceStatus</see> (Endpoint '<b>/admin/scheduled_services/{scheduled_service_id}/status</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.GetServiceCalendarWeeklyFilter">CC_API_IAdmin.GetServiceCalendarWeeklyFilter</see> (Endpoint '<b>/admin/services/{service_id}/calendar/weekly_filter</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.SetServiceCalendarWeeklyFilter">CC_API_IAdmin.SetServiceCalendarWeeklyFilter</see> (Endpoint '<b>/admin/services/{service_id}/calendar/weekly_filter</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.GetServiceHolidayDates">CC_API_IAdmin.GetServiceHolidayDates</see> (Endpoint '<b>/admin/services/{service_id}/calendar/holidays/search</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.GetServiceHolidayByDate">CC_API_IAdmin.GetServiceHolidayByDate</see> (Endpoint '<b>/admin/services/{service_id}/calendar/holidays/on_date/{date}</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.GetServiceHoliday">CC_API_IAdmin.GetServiceHoliday</see> (Endpoint '<b>/admin/services/{service_id}/calendar/holidays/{holiday_id}</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.SetServiceHolidayDate">CC_API_IAdmin.SetServiceHolidayDate</see> (Endpoint '<b>/admin/services/{service_id}/calendar/holidays</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.DeleteServiceHolidayDate">CC_API_IAdmin.DeleteServiceHolidayDate</see> (Endpoint '<b>/admin/services/{service_id}/calendar/holidays/{holiday_id}</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.GetNewsItem">CC_API_IAdmin.GetNewsItem</see> (Endpoint '<b>/admin/news/{item_id}</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.AddNewsItem">CC_API_IAdmin.AddNewsItem</see> (Endpoint '<b>/admin/news</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.UpdateNewsItem">CC_API_IAdmin.UpdateNewsItem</see> (Endpoint '<b>/admin/news/{item_id}</b>')</li>
	/// <li> <see cref="CC_API_IAdmin.DeleteNewsItem">CC_API_IAdmin.DeleteNewsItem</see> (Endpoint '<b>/admin/news/{item_id}</b>')</li>
	/// <li> <see cref="CC_API_IBatchedTasks.ProcessMonthyServiceFees">CC_API_IBatchedTasks.ProcessMonthyServiceFees</see> (Endpoint '<b>/batched_tasks/monthly_fees/{year}/{month}</b>')</li>
	/// <li> <see cref="CC_API_IBatchedTasks.ApplyServiceCredits">CC_API_IBatchedTasks.ApplyServiceCredits</see> (Endpoint '<b>/batched_tasks/monthly_service_credits/{year}/{month}</b>')</li>
	/// <li> <see cref="CC_API_ICoupons.GetCoupon">CC_API_ICoupons.GetCoupon</see> (Endpoint '<b>/coupons/coupons/by_code/{coupon_code}</b>')</li>
	/// <li> <see cref="CC_API_ICouponsAdmin.CreateCoupon">CC_API_ICouponsAdmin.CreateCoupon</see> (Endpoint '<b>/coupons_admin/coupons/create</b>')</li>
	/// <li> <see cref="CC_API_ILogins.ResetPassword">CC_API_ILogins.ResetPassword</see> (Endpoint '<b>/logins/{username_or_email}/reset</b>')</li>
	/// <li> <see cref="CC_API_ILogistics.GetAvailableJobIds">CC_API_ILogistics.GetAvailableJobIds</see> (Endpoint '<b>/logistics/user/{user_id}/jobs/available/ids</b>')</li>
	/// <li> <see cref="CC_API_ILogistics.GetAvailableJobs">CC_API_ILogistics.GetAvailableJobs</see> (Endpoint '<b>/logistics/user/{user_id}/jobs/available</b>')</li>
	/// <li> <see cref="CC_API_ILogisticsAdmin.GetJob">CC_API_ILogisticsAdmin.GetJob</see> (Endpoint '<b>/logistics_admin/jobs/{job_id}</b>')</li>
	/// <li> <see cref="CC_API_ILogisticsAdmin.GetJobsRelatedToUser">CC_API_ILogisticsAdmin.GetJobsRelatedToUser</see> (Endpoint '<b>/logistics_admin/jobs/related_to/user/{user_id}</b>')</li>
	/// <li> <see cref="CC_API_INews.GetNewsByZip">CC_API_INews.GetNewsByZip</see> (Endpoint '<b>/news/by_zip/{zip_code}</b>')</li>
	/// <li> <see cref="CC_API_INews.GetNewsForAccount">CC_API_INews.GetNewsForAccount</see> (Endpoint '<b>/news/for_account/{account_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurant.GetLocationHolidayDates">CC_API_IRestaurant.GetLocationHolidayDates</see> (Endpoint '<b>/restaurant/locations/{loc_id}/holiday_dates</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.DeleteModifierPrice">CC_API_IRestaurantAdmin.DeleteModifierPrice</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/modifierprices/{modifier_price_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.MakeMenuItemCombination">CC_API_IRestaurantAdmin.MakeMenuItemCombination</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/make_combination</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.AddMenuItemCombinationSlot">CC_API_IRestaurantAdmin.AddMenuItemCombinationSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.UpdateMenuItemCombinationSlot">CC_API_IRestaurantAdmin.UpdateMenuItemCombinationSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.DeleteMenuItemCombinationSlot">CC_API_IRestaurantAdmin.DeleteMenuItemCombinationSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/combination_slots/{combo_slot_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationNotificationData">CC_API_IRestaurantAdmin.GetLocationNotificationData</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/notification_info</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.SetLocationNotificationData">CC_API_IRestaurantAdmin.SetLocationNotificationData</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/notification_info</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationDaysOfWeekOpen">CC_API_IRestaurantAdmin.GetLocationDaysOfWeekOpen</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/open_days_of_week</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.SetLocationDaysOfWeekOpen">CC_API_IRestaurantAdmin.SetLocationDaysOfWeekOpen</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/open_days_of_week</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationHolidays">CC_API_IRestaurantAdmin.GetLocationHolidays</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/holidays</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.AddLocationHoliday">CC_API_IRestaurantAdmin.AddLocationHoliday</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/holidays</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.RemoveLocationHoliday">CC_API_IRestaurantAdmin.RemoveLocationHoliday</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/holidays/{holiday_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationScheduleSlotIds">CC_API_IRestaurantAdmin.GetLocationScheduleSlotIds</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/schedule_slots/ids</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationScheduleSlots">CC_API_IRestaurantAdmin.GetLocationScheduleSlots</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/schedule_slots</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.AddLocationScheduleSlot">CC_API_IRestaurantAdmin.AddLocationScheduleSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/schedule_slots</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.UpdateLocationSchduleSlot">CC_API_IRestaurantAdmin.UpdateLocationSchduleSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.DeleteLocationScheduleSlot">CC_API_IRestaurantAdmin.DeleteLocationScheduleSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/schedule_slots/{slot_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationAvailableSlotIds">CC_API_IRestaurantAdmin.GetLocationAvailableSlotIds</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/available_schedule_slots/ids</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationAvailableSlots">CC_API_IRestaurantAdmin.GetLocationAvailableSlots</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/available_schedule_slots</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.GetLocationAvailableSlot">CC_API_IRestaurantAdmin.GetLocationAvailableSlot</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.SetLocationAvailableSlotActive">CC_API_IRestaurantAdmin.SetLocationAvailableSlotActive</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/available_schedule_slots/{avail_slot_id}/is_active/{is_active}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.SetTagActive">CC_API_IRestaurantAdmin.SetTagActive</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/tags/{rmenu_tag_id}/is_active/{is_active}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.SetMenuGroupParent">CC_API_IRestaurantAdmin.SetMenuGroupParent</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}/parent/{parent_rmenugroup_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.DeleteMenuGroup">CC_API_IRestaurantAdmin.DeleteMenuGroup</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menugroups/{rmenugroup_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantAdmin.SetMenuItemParent">CC_API_IRestaurantAdmin.SetMenuItemParent</see> (Endpoint '<b>/restaurant_admin/locations/{loc_id}/menus/{rmenu_id}/menuitems/{rmenuitem_id}/parent/{rmenu_group_id}</b>')</li>
	/// <li> <see cref="CC_API_IRestaurantBusiness.GetJobDetails">CC_API_IRestaurantBusiness.GetJobDetails</see> (Endpoint '<b>/restaurant_business/orders/{loc_id}/related_job_details/by_id_list/{job_id_list}</b>')</li>
	/// <li> <see cref="CC_API_IScheduledServices.IsServiceOpenToEdits">CC_API_IScheduledServices.IsServiceOpenToEdits</see> (Endpoint '<b>/scheduled_services/{service_id}/can_edit</b>')</li>
	/// <li> <see cref="CC_API_IScheduledServices.GetScheduledServiceInvoice">CC_API_IScheduledServices.GetScheduledServiceInvoice</see> (Endpoint '<b>/scheduled_services/{service_id}/invoice</b>')</li>
	/// <li> <see cref="CC_API_IServices.GetAvailableDatesForService">CC_API_IServices.GetAvailableDatesForService</see> (Endpoint '<b>/services/{service_id}/dates</b>')</li>
	/// <li> <see cref="CC_API_IShoppingLists.SetShoppingListItems">CC_API_IShoppingLists.SetShoppingListItems</see> (Endpoint '<b>/shopping_lists/{shopping_list_id}/items</b>')</li>
/// </ul>
/// </note>
/// </summary>
[CompilerGenerated]
class NamespaceDoc
{
}
}
